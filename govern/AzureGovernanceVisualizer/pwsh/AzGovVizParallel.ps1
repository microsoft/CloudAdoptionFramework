<#
.SYNOPSIS
    This script creates the following files to help better understand and audit your governance setup
    csv file
        Management Groups, Subscriptions, Policy, PolicySet (Initiative), RBAC
    html file
        Management Groups, Subscriptions, Policy, PolicySet (Initiative), RBAC
        The html file uses Java Script and CSS files which are hosted on various CDNs (Content Delivery Network). For details review the BuildHTML region in this script.
    markdown file for use with Azure DevOps Wiki leveraging the Mermaid plugin
        Management Groups, Subscriptions

.DESCRIPTION
    Do you want to get granular insights on your technical Azure Governance implementation? - document it in csv, html and markdown? AzGovViz is a PowerShell based script that iterates your Azure Tenants Management Group hierarchy down to Subscription level. It captures most relevant Azure governance capabilities such as Azure Policy, RBAC and Blueprints and a lot more. From the collected data AzGovViz provides visibility on your Hierarchy Map, creates a Tenant Summary and builds granular Scope Insights on Management Groups and Subscriptions. The technical requirements as well as the required permissions are minimal.

.PARAMETER ManagementGroupId
    Define the Management Group Id for which the outputs/files should be generated

.PARAMETER CsvDelimiter
    The script outputs a csv file depending on your delimit defaults choose semicolon or comma

.PARAMETER OutputPath
    Full- or relative path

.PARAMETER DoNotShowRoleAssignmentsUserData
    default is to capture the DisplayName and SignInName for RoleAssignments on ObjectType=User; for data protection and security reasons this may not be acceptable

.PARAMETER HierarchyMapOnly
    default is to query all Management groups and Subscription for Governance capabilities, if you use the parameter -HierarchyMapOnly then only the HierarchyMap will be created

.PARAMETER NoMDfCSecureScore
    default is to query all Subscriptions for Azure Microsoft Defender for Cloud Secure Score and summarize Secure Score for Management Groups.

.PARAMETER LimitCriticalPercentage
    default is 80%, this parameter defines the warning level for approaching Limits (e.g. 80% of Role Assignment limit reached) change as per your preference

.PARAMETER SubscriptionQuotaIdWhitelist
    default is 'undefined', this parameter defines the QuotaIds the subscriptions must match so that AzGovViz processes them. The script checks if the QuotaId startswith the string that you have put in. Separate multiple strings with comma e.g. MSDN_,EnterpriseAgreement_

.PARAMETER NoPolicyComplianceStates
    use this parameter if policy compliance states should not be queried

.PARAMETER NoResourceDiagnosticsPolicyLifecycle
    use this parameter if Resource Diagnostics Policy Lifecycle recommendations should not be created

.PARAMETER NoAADGroupsResolveMembers
    use this parameter if Azure Active Directory Group memberships should not be resolved for Role assignments where identity type is 'Group'

.PARAMETER AADServicePrincipalExpiryWarningDays
    define Service Principal Secret and Certificate grace period (lifetime below the defined will be marked for warning / default is 14 days)

.PARAMETER NoAzureConsumption
    #obsolete
    use this parameter if Azure Consumption data should not be reported

.PARAMETER DoAzureConsumption
    use this parameter if Azure Consumption data should be reported

.PARAMETER AzureConsumptionPeriod
    use this parameter to define for which time period Azure Consumption data should be gathered; default is 1 day

.PARAMETER NoAzureConsumptionReportExportToCSV
    use this parameter if Azure Consumption data should not be exported (CSV)

.PARAMETER ThrottleLimit
    Leveraging PowerShell CoreÂ´s parallel capability you can define the ThrottleLimit (default=5)

.PARAMETER DoTranscript
    Log the console output

.PARAMETER MermaidDirection
    Define the direction the Mermaid based HierarchyMap should be built TD (default) = TopDown (Horizontal), LR = LeftRight (Vertical)

.PARAMETER SubscriptionId4AzContext
    Define the Subscription Id to use for AzContext (default is to use a random Subscription Id)

.PARAMETER NoCsvExport
    Export enriched 'Role assignments' data, enriched 'Policy assignments' data and 'all resources' (subscriptionId, mgPath, resourceType, id, name, location, tags, createdTime, changedTime)

.PARAMETER DoNotIncludeResourceGroupsOnPolicy
    Do not include Policy assignments on ResourceGroups

.PARAMETER DoNotIncludeResourceGroupsAndResourcesOnRBAC
    Do not include Role assignments on ResourceGroups and Resources

.PARAMETER ChangeTrackingDays
    Define the period for Change tracking on newly created and updated custom Policy, PolicySet and RBAC Role definitions and Policy/RBAC Role assignments (default is '14')

.PARAMETER FileTimeStampFormat
    Ddefine the time format for the output files (default is `yyyyMMdd_HHmmss`)

.PARAMETER NoJsonExport
    Enable export of ManagementGroup Hierarchy including all MG/Sub Policy/RBAC definitions, Policy/RBAC assignments and some more relevant information to JSON

.PARAMETER JsonExportExcludeResourceGroups
    JSON Export will not include ResourceGroups (Policy & Role assignments)

.PARAMETER JsonExportExcludeResources
    JSON Export will not include Resources (Role assignments)

.PARAMETER LargeTenant
    A large tenant is a tenant with more than ~500 Subscriptions - the HTML output for large tenants simply becomes too big.
    If the parameter switch is true then the following parameters will be set:
    -PolicyAtScopeOnly $true
    -RBACAtScopeOnly $true
    -NoResourceProvidersDetailed $true
    -NoScopeInsights $true

.PARAMETER PolicyAtScopeOnly
    Removing 'inherited' lines in the HTML file; use this parameter if you run against a larger tenants

.PARAMETER RBACAtScopeOnly
    Removing 'inherited' lines in the HTML file; use this parameter if you run against a larger tenants

.PARAMETER NoResourceProvidersDetailed
    Note if you use parameter -LargeTenant then parameter -NoResourceProvidersDetailed will be set to true
    default is to output all ResourceProvider states for all Subscriptions in the TenantSummary. In large Tenants this can become time consuming and may blow off the html file.

.PARAMETER NoScopeInsights
    Note if you use parameter -LargeTenant then parameter -NoScopeInsights will be set to true
    Q: Why would you want to do this? A: In larger tenants the ScopeInsights section blows up the html file (up to unusable due to html file size)

.PARAMETER AADGroupMembersLimit
    Defines the limit (default=500) of AAD Group members; For AAD Groups that have more members than the defined limit Group members will not be resolved

.PARAMETER NoResources
    Will speed up the processing time but information like Resource diagnostics capability, resource type stats, UserAssigned Identities assigned to Resources is excluded (featured for large tenants)

.PARAMETER StatsOptOut
    Will opt-out sending stats

.PARAMETER NoSingleSubscriptionOutput
    Single Scope Insights output per Subscription should not be created

.PARAMETER HtmlTableRowsLimit
    Although the parameter -LargeTenant was introduced recently, still the html output may become too large to be processed properly. The new parameter defines the limit of rows - if for the html processing part the limit is reached then the html table will not be created (csv and json output will still be created). Default rows limit is 20.000

.PARAMETER ManagementGroupsOnly
    Collect data only for Management Groups (Subscription data such as e.g. Policy assignments etc. will not be collected)

.PARAMETER ExcludedResourceTypesDiagnosticsCapable
    Resource Types to be excluded from processing analysis for diagnostic settings capability (default: microsoft.web/certificates)

.EXAMPLE
    Define the ManagementGroup ID
    PS C:\> .\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id>

    Define how the CSV output should be delimited. Valid input is ; or , (semicolon is default)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -CsvDelimiter ","

    Define the outputPath (must exist)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -OutputPath 123

    Define if User information should be scrubbed (default prints Userinformation to the CSV and HTML output)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -DoNotShowRoleAssignmentsUserData

    Define if only the HierarchyMap output should be created. Will ignore the parameters 'LimitCriticalPercentage' and 'DoNotShowRoleAssignmentsUserData' (default queries for Governance capabilities such as policy-, role-, blueprints assignments and more)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -HierarchyMapOnly

    Define if Microsoft Defender for Cloud SecureScore should be queried for Subscriptions and Management Groups
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoMDfCSecureScore

    Define when limits should be highlighted as warning (default is 80 percent)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -LimitCriticalPercentage 90

    Define the QuotaId whitelist by providing strings separated by a comma
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -SubscriptionQuotaIdWhitelist MSDN_,EnterpriseAgreement_

    Define if policy compliance states should be queried
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoPolicyComplianceStates

    Define if Resource Diagnostics Policy Lifecycle recommendations should not be created
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoResourceDiagnosticsPolicyLifecycle

    Define if Azure Active Directory Group memberships should not be resolved for Role assignments where identity type is 'Group'
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoAADGroupsResolveMembers

    Define Service Principal Secret and Certificate grace period (lifetime below the defined will be marked for warning / default is 14 days)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -AADServicePrincipalExpiryWarningDays 30

    #obsolete Define if Azure Consumption data should not be reported
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoAzureConsumption

    Define if Azure Consumption data should be reported
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -DoAzureConsumption

    Define for which time period (days) Azure Consumption data should be gathered; e.g. 14 days; default is 1 day
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -AzureConsumptionPeriod 14

    Define the number of script blocks running in parallel. Leveraging PowerShell CoreÂ´s parallel capability you can define the ThrottleLimit (default=5)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -ThrottleLimit 10

    Define if you want to log the console output
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -DoTranscript

    Define the direction the Mermaid based HierarchyMap should be built in Markdown TD = TopDown (Horizontal), LR = LeftRight (Vertical)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -MermaidDirection "LR"

    Define the Subscription Id to use for AzContext (default is to use a random Subscription Id)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -SubscriptionId4AzContext "<your-Subscription-Id>"

    Do not Export enriched 'Role assignments' data, enriched 'Policy assignments' data and 'all resources' (subscriptionId, mgPath, resourceType, id, name, location, tags, createdTime, changedTime)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoCsvExport

    Do not include Policy assignments on ResourceGroups
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -DoNotIncludeResourceGroupsOnPolicy

    Do not include Role assignments on ResourceGroups and Resources
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -DoNotIncludeResourceGroupsAndResourcesOnRBAC

    Define the period for Change tracking on newly created and updated custom Policy, PolicySet and RBAC Role definitions and Policy/RBAC Role assignments (default is '14')
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -ChangeTrackingDays 30

    Define the time format for the output files (default is `yyyyMMdd_HHmmss`)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -FileTimeStampFormat "yyyyMM-dd_HHmm" (default is `yyyyMMdd_HHmmss`)

    Do not enable export of ManagementGroup Hierarchy including all MG/Sub Policy/RBAC definitions, Policy/RBAC assignments and some more relevant information to JSON
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoJsonExport

    JSON Export will not include ResourceGroups (Policy & Role assignments)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -JsonExportExcludeResourceGroups

    JSON Export will not include Resources (Role assignments)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -JsonExportExcludeResources

    A large tenant is a tenant with more than ~500 Subscriptions - the HTML output for large tenants simply becomes too big.
    If the parameter switch is true then the following parameters will be set:
    -PolicyAtScopeOnly $true
    -RBACAtScopeOnly $true
    -NoResourceProvidersDetailed $true
    -NoScopeInsights $true
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -LargeTenant

    Removing 'inherited' lines in the HTML file for 'Policy Assignments'; use this parameter if you run against a larger tenants
    Note if you use parameter -LargeTenant then parameter -PolicyAtScopeOnly will be set to true
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -PolicyAtScopeOnly

    Removing 'inherited' lines in the HTML file for 'Role Assignments'; use this parameter if you run against a larger tenants
    Note if you use parameter -LargeTenant then parameter -RBACAtScopeOnly will be set to true
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -RBACAtScopeOnly

    Define if a detailed summary on Resource Provider states per Subscription should be created in the TenantSummary section
    Note if you use parameter -LargeTenant then parameter -NoResourceProvidersDetailed will be set to true
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoResourceProvidersDetailed

    Define if ScopeInsights should be created or not. Q: Why would you want to do this? A: In larger tenants the ScopeInsights section blows up the html file (up to unusable due to html file size)
    Note if you use parameter -LargeTenant then parameter -NoScopeInsights will be set to true
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoScopeInsights

    Defines the limit (default=500) of AAD Group members; For AAD Groups that have more members than the defined limit Group members will not be resolved
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -AADGroupMembersLimit 750

    Will speed up the processing time but information like Resource diagnostics capability, resource type stats, UserAssigned Identities assigned to Resources is excluded (featured for large tenants)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoResources

    Will opt-out sending stats
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -StatsOptOut

    Will not create a single Scope Insights output per Subscription
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -NoSingleSubscriptionOutput

    Although the parameter -LargeTenant was introduced recently, still the html output may become too large to be processed properly. The new parameter defines the limit of rows - if for the html processing part the limit is reached then the html table will not be created (csv and json output will still be created). Default rows limit is 20.000
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -HtmlTableRowsLimit 23077

    Define if data should be collected for Management Groups only (Subscription data such as e.g. Policy assignments etc. will not be collected)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -ManagementGroupsOnly

    Define Resource Types to be excluded from processing analysis for diagnostic settings capability (default: microsoft.web/certificates)
    PS C:\>.\AzGovVizParallel.ps1 -ManagementGroupId <your-Management-Group-Id> -ExcludedResourceTypesDiagnosticsCapable @('microsoft.web/certificates')

    .NOTES
    AUTHOR: Julian Hayward - Customer Engineer - Customer Success Unit | Azure Infrastucture/Automation/Devops/Governance | Microsoft

.LINK
    https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting (aka.ms/AzGovViz)
    https://github.com/microsoft/CloudAdoptionFramework/tree/master/govern/AzureGovernanceVisualizer
    Please note that while being developed by a Microsoft employee, AzGovViz is not a Microsoft service or product. AzGovViz is a personal/community driven project, there are none implicit or explicit obligations related to this project, it is provided 'as is' with no warranties and confer no rights.
#>

[CmdletBinding()]
Param
(
    [string]
    $Product = 'AzGovViz',

    [string]
    $AzAPICallVersion = '1.1.17',

    [string]
    $ProductVersion = 'v6_major_20220622_2',

    [string]
    $GithubRepository = 'aka.ms/AzGovViz',

    [string]
    $ScriptPath = 'pwsh', #e.g. 'myfolder\pwsh'

    [string]
    $ManagementGroupId,

    [switch]
    $AzureDevOpsWikiAsCode, #deprecated - Based on environment variables the script will detect the code run platform

    [switch]
    $DebugAzAPICall,

    [switch]
    $NoCsvExport,

    [string]
    [parameter(ValueFromPipeline)][ValidateSet(';', ',')][string]$CsvDelimiter = ';',

    [switch]
    $CsvExportUseQuotesAsNeeded,

    [string]
    $OutputPath,

    [switch]
    $DoNotShowRoleAssignmentsUserData,

    [switch]
    $HierarchyMapOnly,

    [Alias('NoASCSecureScore')]
    [switch]
    $NoMDfCSecureScore,

    [switch]
    $NoResourceProvidersDetailed,

    [int]
    $LimitCriticalPercentage = 80,

    [array]
    $SubscriptionQuotaIdWhitelist = @('undefined'),

    [switch]
    $NoPolicyComplianceStates,

    [switch]
    $NoResourceDiagnosticsPolicyLifecycle,

    [switch]
    $NoAADGroupsResolveMembers,

    [int]
    $AADServicePrincipalExpiryWarningDays = 14,

    [switch]
    $NoAzureConsumption, #obsolete

    [switch]
    $DoAzureConsumption,

    [int]
    $AzureConsumptionPeriod = 1,

    [switch]
    $NoAzureConsumptionReportExportToCSV,

    [switch]
    $DoTranscript,

    [int]
    $HtmlTableRowsLimit = 20000, #HTML TenantSummary may become unresponsive depending on client device performance. A recommendation will be shown to use the CSV file instead of opening the TF table

    [int]
    $ThrottleLimit = 10,

    [Alias('ExludedResourceTypesDiagnosticsCapable')]
    [array]
    $ExcludedResourceTypesDiagnosticsCapable = @('microsoft.web/certificates'),

    [switch]
    $DoNotIncludeResourceGroupsOnPolicy,

    [switch]
    $DoNotIncludeResourceGroupsAndResourcesOnRBAC,

    [Alias('AzureDevOpsWikiHierarchyDirection')]
    [parameter(ValueFromPipeline)][ValidateSet('TD', 'LR')][string]$MermaidDirection = 'TD',

    [string]
    $SubscriptionId4AzContext = 'undefined',

    [int]
    $ChangeTrackingDays = 14,

    [string]
    $FileTimeStampFormat = 'yyyyMMdd_HHmmss',

    [switch]
    $NoJsonExport,

    [switch]
    $JsonExportExcludeResourceGroups,

    [switch]
    $JsonExportExcludeResources,

    [switch]
    $LargeTenant,

    [switch]
    $NoScopeInsights,

    [int]
    $AADGroupMembersLimit = 500,

    [switch]
    $PolicyAtScopeOnly,

    [switch]
    $RBACAtScopeOnly,

    [switch]
    $NoResources,

    [switch]
    $StatsOptOut,

    [switch]
    $NoSingleSubscriptionOutput,

    [switch]
    $ManagementGroupsOnly,

    [string]
    $DirectorySeparatorChar = [IO.Path]::DirectorySeparatorChar,

    [switch]
    $ShowMemoryUsage,

    [switch]
    $DoPSRule,

    [string]
    $PSRuleVersion,

    #https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#role-based-access-control-limits
    [int]
    $LimitRBACCustomRoleDefinitionsTenant = 5000,

    [int]
    $LimitRBACRoleAssignmentsManagementGroup = 500,

    #https://docs.microsoft.com/en-us/azure/governance/policy/overview#maximum-count-of-azure-policy-objects
    [int]
    $LimitPOLICYPolicyAssignmentsManagementGroup = 200,

    [int]
    $LimitPOLICYPolicyAssignmentsSubscription = 200,

    [int]
    $LimitPOLICYPolicyDefinitionsScopedManagementGroup = 500,

    [int]
    $LimitPOLICYPolicyDefinitionsScopedSubscription = 500,

    [int]
    $LimitPOLICYPolicySetAssignmentsManagementGroup = 200,

    [int]
    $LimitPOLICYPolicySetAssignmentsSubscription = 200,

    [int]
    $LimitPOLICYPolicySetDefinitionsScopedTenant = 2500,

    [int]
    $LimitPOLICYPolicySetDefinitionsScopedManagementGroup = 200,

    [int]
    $LimitPOLICYPolicySetDefinitionsScopedSubscription = 200,

    #https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#subscription-limits
    [int]
    $LimitResourceGroups = 980,

    [int]
    $LimitTagsSubscription = 50
)

$Error.clear()
$ErrorActionPreference = 'Stop'
#removeNoise
$ProgressPreference = 'SilentlyContinue'
Set-Item Env:\SuppressAzurePowerShellBreakingChangeWarnings 'true'

#start
$startAzGovViz = Get-Date
$startTime = Get-Date -Format 'dd-MMM-yyyy HH:mm:ss'
Write-Host "Start AzGovViz $($startTime) (#$($ProductVersion))"

#region Functions
function addHtParameters {
    Write-Host 'Add AzGovViz htParameters'
    if ($LargeTenant -eq $true) {
        $script:NoScopeInsights = $true
        $NoResourceProvidersDetailed = $true
        $PolicyAtScopeOnly = $true
        $RBACAtScopeOnly = $true
    }

    if ($ManagementGroupsOnly) {
        $script:NoSingleSubscriptionOutput = $true
    }

    if ($HierarchyMapOnly) {
        $NoJsonExport = $true
    }

    $script:azAPICallConf['htParameters'] += [ordered]@{
        DoAzureConsumption                           = [bool]$DoAzureConsumption
        DoNotIncludeResourceGroupsOnPolicy           = [bool]$DoNotIncludeResourceGroupsOnPolicy
        DoNotIncludeResourceGroupsAndResourcesOnRBAC = [bool]$DoNotIncludeResourceGroupsAndResourcesOnRBAC
        DoNotShowRoleAssignmentsUserData             = [bool]$DoNotShowRoleAssignmentsUserData
        HierarchyMapOnly                             = [bool]$HierarchyMapOnly
        LargeTenant                                  = [bool]$LargeTenant
        ManagementGroupsOnly                         = [bool]$ManagementGroupsOnly
        NoJsonExport                                 = [bool]$NoJsonExport
        NoMDfCSecureScore                            = [bool]$NoMDfCSecureScore
        NoResourceProvidersDetailed                  = [bool]$NoResourceProvidersDetailed
        NoPolicyComplianceStates                     = [bool]$NoPolicyComplianceStates
        NoResources                                  = [bool]$NoResources
        ProductVersion                               = $ProductVersion
        PolicyAtScopeOnly                            = [bool]$PolicyAtScopeOnly
        RBACAtScopeOnly                              = [bool]$RBACAtScopeOnly
        DoPSRule                                     = [bool]$DoPSRule
    }
    Write-Host 'htParameters:'
    $azAPICallConf['htParameters'] | format-table -AutoSize | Out-String
    Write-Host 'Add AzGovViz htParameters succeeded' -ForegroundColor Green
}
function addIndexNumberToArray (
    [Parameter(Mandatory = $True)]
    [array]$array
) {
    for ($i = 0; $i -lt ($array).count; $i++) {
        Add-Member -InputObject $array[$i] -Name '#' -Value ($i + 1) -MemberType NoteProperty
    }
    return $array
}
function addRowToTable() {
    Param (
        [string]$level = 0,
        [string]$mgName = '',
        [string]$mgId = '',
        [string]$mgParentId = '',
        [string]$mgParentName = '',
        [string]$mgASCSecureScore = '',
        [string]$Subscription = '',
        [string]$SubscriptionId = '',
        [string]$SubscriptionQuotaId = '',
        [string]$SubscriptionState = '',
        [string]$SubscriptionASCSecureScore = '',
        [string]$SubscriptionTags = '',
        [int]$SubscriptionTagsCount = 0,
        [string]$Policy = '',
        [string]$PolicyAvailability = '',
        [string]$PolicyDescription = '',
        [string]$PolicyVariant = '',
        [string]$PolicyType = '',
        [string]$PolicyCategory = '',
        [string]$PolicyDefinitionIdGuid = '',
        [string]$PolicyDefinitionId = '',
        [string]$PolicyDefintionScope = '',
        [string]$PolicyDefintionScopeMgSub = '',
        [string]$PolicyDefintionScopeId = '',
        [int]$PolicyDefinitionsScopedLimit = 0,
        [int]$PolicyDefinitionsScopedCount = 0,
        [int]$PolicySetDefinitionsScopedLimit = 0,
        [int]$PolicySetDefinitionsScopedCount = 0,
        [string]$PolicyDefinitionEffectDefault = '',
        [string]$PolicyDefinitionEffectFixed = '',
        [string]$PolicyAssignmentScope = '',
        [string]$PolicyAssignmentScopeMgSubRg = '',
        [string]$PolicyAssignmentScopeName = '',
        $PolicyAssignmentNotScopes = '',
        [string]$PolicyAssignmentId = '',
        [string]$PolicyAssignmentName = '',
        [string]$PolicyAssignmentDisplayName = '',
        [string]$PolicyAssignmentDescription = '',
        [string]$PolicyAssignmentEnforcementMode = '',
        $PolicyAssignmentNonComplianceMessages = '',
        [string]$PolicyAssignmentIdentity = '',
        [int]$PolicyAssignmentLimit = 0,
        [int]$PolicyAssignmentCount = 0,
        [int]$PolicyAssignmentAtScopeCount = 0,
        $PolicyAssignmentParameters,
        $PolicyAssignmentParametersFormated,
        [int]$PolicySetAssignmentLimit = 0,
        [int]$PolicySetAssignmentCount = 0,
        [int]$PolicySetAssignmentAtScopeCount = 0,
        [int]$PolicyAndPolicySetAssignmentAtScopeCount = 0,
        [string]$PolicyAssignmentAssignedBy = '',
        [string]$PolicyAssignmentCreatedBy = '',
        [string]$PolicyAssignmentCreatedOn = '',
        [string]$PolicyAssignmentUpdatedBy = '',
        [string]$PolicyAssignmentUpdatedOn = '',
        [string]$RoleDefinitionId = '',
        [string]$RoleDefinitionName = '',
        [string]$RoleAssignmentIdentityDisplayname = '',
        [string]$RoleAssignmentIdentitySignInName = '',
        [string]$RoleAssignmentIdentityObjectId = '',
        [string]$RoleAssignmentIdentityObjectType = '',
        [string]$RoleAssignmentId = '',
        [string]$RoleAssignmentScope = '',
        [string]$RoleAssignmentScopeName = '',
        [string]$RoleAssignmentScopeRG = '',
        [string]$RoleAssignmentScopeRes = '',
        [string]$RoleAssignmentScopeType = '',
        [string]$RoleAssignmentCreatedBy = '',
        [string]$RoleAssignmentCreatedOn = '',
        $RoleAssignmentCreatedOnUnformatted,
        [string]$RoleAssignmentUpdatedBy = '',
        [string]$RoleAssignmentUpdatedOn = '',
        [string]$RoleIsCustom = '',
        [string]$RoleAssignableScopes = '',
        [int]$RoleAssignmentsLimit = 0,
        [int]$RoleAssignmentsCount = 0,
        [string]$RoleActions = '',
        [string]$RoleNotActions = '',
        [string]$RoleDataActions = '',
        [string]$RoleNotDataActions = '',
        $RoleCanDoRoleAssignments,
        [int]$RoleSecurityCustomRoleOwner = 0,
        [int]$RoleSecurityOwnerAssignmentSP = 0,
        [string]$BlueprintName = '',
        [string]$BlueprintId = '',
        [string]$BlueprintDisplayName = '',
        [string]$BlueprintDescription = '',
        [string]$BlueprintScoped = '',
        [string]$BlueprintAssignmentVersion = '',
        [string]$BlueprintAssignmentId = '',
        [string]$RoleAssignmentPIM = '',
        [string]$RoleAssignmentPIMAssignmentType = '',
        $RoleAssignmentPIMSlotStart = '',
        $RoleAssignmentPIMSlotEnd = ''
    )

    $null = $script:newTable.Add([PSCustomObject]@{
            level                                    = $level
            mgName                                   = $mgName
            mgId                                     = $mgId
            mgParentId                               = $mgParentId
            mgParentName                             = $mgParentName
            mgASCSecureScore                         = $mgASCSecureScore
            Subscription                             = $Subscription
            SubscriptionId                           = $SubscriptionId
            SubscriptionQuotaId                      = $SubscriptionQuotaId
            SubscriptionState                        = $SubscriptionState
            SubscriptionASCSecureScore               = $SubscriptionASCSecureScore
            SubscriptionTags                         = $SubscriptionTags
            SubscriptionTagsCount                    = $SubscriptionTagsCount
            Policy                                   = $Policy
            PolicyAvailability                       = $PolicyAvailability
            PolicyDescription                        = $PolicyDescription
            PolicyVariant                            = $PolicyVariant
            PolicyType                               = $PolicyType
            PolicyCategory                           = $PolicyCategory
            PolicyDefinitionIdGuid                   = $PolicyDefinitionIdGuid
            PolicyDefinitionId                       = $PolicyDefinitionId
            PolicyDefintionScope                     = $PolicyDefintionScope
            PolicyDefintionScopeMgSub                = $PolicyDefintionScopeMgSub
            PolicyDefintionScopeId                   = $PolicyDefintionScopeId
            PolicyDefinitionsScopedLimit             = $PolicyDefinitionsScopedLimit
            PolicyDefinitionsScopedCount             = $PolicyDefinitionsScopedCount
            PolicySetDefinitionsScopedLimit          = $PolicySetDefinitionsScopedLimit
            PolicySetDefinitionsScopedCount          = $PolicySetDefinitionsScopedCount
            PolicyDefinitionEffectDefault            = $PolicyDefinitionEffectDefault
            PolicyDefinitionEffectFixed              = $PolicyDefinitionEffectFixed
            PolicyAssignmentScope                    = $PolicyAssignmentScope
            PolicyAssignmentScopeMgSubRg             = $PolicyAssignmentScopeMgSubRg
            PolicyAssignmentScopeName                = $PolicyAssignmentScopeName
            PolicyAssignmentNotScopes                = $PolicyAssignmentNotScopes
            PolicyAssignmentId                       = $PolicyAssignmentId
            PolicyAssignmentName                     = $PolicyAssignmentName
            PolicyAssignmentDisplayName              = $PolicyAssignmentDisplayName
            PolicyAssignmentDescription              = $PolicyAssignmentDescription
            PolicyAssignmentEnforcementMode          = $PolicyAssignmentEnforcementMode
            PolicyAssignmentNonComplianceMessages    = $PolicyAssignmentNonComplianceMessages
            PolicyAssignmentIdentity                 = $PolicyAssignmentIdentity
            PolicyAssignmentLimit                    = $PolicyAssignmentLimit
            PolicyAssignmentCount                    = $PolicyAssignmentCount
            PolicyAssignmentAtScopeCount             = $PolicyAssignmentAtScopeCount
            PolicyAssignmentParameters               = $PolicyAssignmentParameters
            PolicyAssignmentParametersFormated       = $PolicyAssignmentParametersFormated
            PolicySetAssignmentLimit                 = $PolicySetAssignmentLimit
            PolicySetAssignmentCount                 = $PolicySetAssignmentCount
            PolicySetAssignmentAtScopeCount          = $PolicySetAssignmentAtScopeCount
            PolicyAndPolicySetAssignmentAtScopeCount = $PolicyAndPolicySetAssignmentAtScopeCount
            PolicyAssignmentAssignedBy               = $PolicyAssignmentAssignedBy
            PolicyAssignmentCreatedBy                = $PolicyAssignmentCreatedBy
            PolicyAssignmentCreatedOn                = $PolicyAssignmentCreatedOn
            PolicyAssignmentUpdatedBy                = $PolicyAssignmentUpdatedBy
            PolicyAssignmentUpdatedOn                = $PolicyAssignmentUpdatedOn
            RoleDefinitionId                         = $RoleDefinitionId
            RoleDefinitionName                       = $RoleDefinitionName
            RoleAssignmentIdentityDisplayname        = $RoleAssignmentIdentityDisplayname
            RoleAssignmentIdentitySignInName         = $RoleAssignmentIdentitySignInName
            RoleAssignmentIdentityObjectId           = $RoleAssignmentIdentityObjectId
            RoleAssignmentIdentityObjectType         = $RoleAssignmentIdentityObjectType
            RoleAssignmentId                         = $RoleAssignmentId
            RoleAssignmentScope                      = $RoleAssignmentScope
            RoleAssignmentScopeName                  = $RoleAssignmentScopeName
            RoleAssignmentScopeRG                    = $RoleAssignmentScopeRG
            RoleAssignmentScopeRes                   = $RoleAssignmentScopeRes
            RoleAssignmentScopeType                  = $RoleAssignmentScopeType
            RoleIsCustom                             = $RoleIsCustom
            RoleAssignableScopes                     = $RoleAssignableScopes
            RoleAssignmentCreatedBy                  = $RoleAssignmentCreatedBy
            RoleAssignmentCreatedOn                  = $RoleAssignmentCreatedOn
            RoleAssignmentCreatedOnUnformatted       = $RoleAssignmentCreatedOnUnformatted
            RoleAssignmentUpdatedBy                  = $RoleAssignmentUpdatedBy
            RoleAssignmentUpdatedOn                  = $RoleAssignmentUpdatedOn
            RoleAssignmentsLimit                     = $RoleAssignmentsLimit
            RoleAssignmentsCount                     = $RoleAssignmentsCount
            RoleActions                              = $RoleActions
            RoleNotActions                           = $RoleNotActions
            RoleDataActions                          = $RoleDataActions
            RoleNotDataActions                       = $RoleNotDataActions
            RoleCanDoRoleAssignments                 = $RoleCanDoRoleAssignments
            RoleSecurityCustomRoleOwner              = $RoleSecurityCustomRoleOwner
            RoleSecurityOwnerAssignmentSP            = $RoleSecurityOwnerAssignmentSP
            BlueprintName                            = $BlueprintName
            BlueprintId                              = $BlueprintId
            BlueprintDisplayName                     = $BlueprintDisplayName
            BlueprintDescription                     = $BlueprintDescription
            BlueprintScoped                          = $BlueprintScoped
            BlueprintAssignmentVersion               = $BlueprintAssignmentVersion
            BlueprintAssignmentId                    = $BlueprintAssignmentId
            RoleAssignmentPIM                        = $RoleAssignmentPIM
            RoleAssignmentPIMAssignmentType          = $RoleAssignmentPIMAssignmentType
            RoleAssignmentPIMSlotStart               = $RoleAssignmentPIMSlotStart
            RoleAssignmentPIMSlotEnd                 = $RoleAssignmentPIMSlotEnd
        })
}
function apiCallTracking {
    [CmdletBinding()]Param(
        [string]$stage,
        [string]$spacing
    )
    #APITracking
    $APICallTrackingCount = ($azAPICallConf['arrayAPICallTracking']).Count
    $APICallTrackingRetriesCount = ($azAPICallConf['arrayAPICallTracking'].where({ $_.TryCounter -gt 1 } )).Count
    $APICallTrackingGroupedByTargetEndpoint = $azAPICallConf['arrayAPICallTracking'] | Group-Object -Property TargetEndpoint
    $APICallTrackingRestartDueToDuplicateNextlinkCounterCount = ($azAPICallConf['arrayAPICallTracking'].where({ $_.RestartDueToDuplicateNextlinkCounter -gt 0 } )).Count
    Write-Host "$($spacing)$($stage) API call stats:"
    $duarationStats = ($azAPICallConf['arrayAPICallTracking'].Duration | Measure-Object -Average -Maximum -Minimum)
    Write-Host "$($spacing) API calls total count: $APICallTrackingCount ($APICallTrackingRetriesCount retries; $APICallTrackingRestartDueToDuplicateNextlinkCounterCount nextLinkReset) | average: $($duarationStats.Average) sec, maximum: $($duarationStats.Maximum) sec, minimum: $($duarationStats.Minimum) sec"
    foreach ($targetEndpoint in $APICallTrackingGroupedByTargetEndpoint | Sort-Object -Property Name) {
        $APICallTrackingRetriesCount = ($targetEndpoint.Group.where({ $_.TryCounter -gt 1 } )).Count
        $APICallTrackingRestartDueToDuplicateNextlinkCounterCount = ($targetEndpoint.Group.where({ $_.RestartDueToDuplicateNextlinkCounter -gt 0 } )).Count
        $duarationStats = ($targetEndpoint.Group.Duration | Measure-Object -Average -Maximum -Minimum)
        Write-Host "$($spacing) API calls endpoint '$($targetEndpoint.Name) ($($azAPICallConf['azAPIEndpointUrls'].($targetEndpoint.Name)))' count: $($targetEndpoint.Count) ($APICallTrackingRetriesCount retries; $APICallTrackingRestartDueToDuplicateNextlinkCounterCount nextLinkReset) | average: $($duarationStats.Average) sec, maximum: $($duarationStats.Maximum) sec, minimum: $($duarationStats.Minimum) sec"
    }
}
function buildJSON {
    #$fileTimestamp  = Get-Date -Format "yyyyMM-dd HHmmss"
    $startJSON = Get-Date
    $startBuildHt = Get-Date

    Write-Host 'Create Hierarchy JSON'
    Write-Host ' Create ht for JSON'

    $htJSON = [ordered]@{}
    $htJSON.ManagementGroups = [ordered]@{}

    $MgIds = ($optimizedTableForPathQuery) | select-object -property level, MgId, MgName, mgParentId, mgParentName | Sort-Object -property level, MgId -unique
    $grpScopePolicyDefinitionsCustom = (($htCacheDefinitionsPolicy).values).where( { $_.Type -eq 'Custom' }) | Group-Object ScopeMgSub
    $grpMgScopePolicyDefinitionsCustom = ($grpScopePolicyDefinitionsCustom.where( { $_.Name -eq 'Mg' }).Group | Sort-Object -Property PolicyDefinitionId | Group-Object ScopeId)
    $grpSubScopePolicyDefinitionsCustom = ($grpScopePolicyDefinitionsCustom.where( { $_.Name -eq 'Sub' }).Group | Sort-Object -Property PolicyDefinitionId | Group-Object ScopeId)

    $grpScopePolicySetDefinitionsCustom = (($htCacheDefinitionsPolicySet).values).where( { $_.Type -eq 'Custom' }) | Group-Object ScopeMgSub
    $grpMgScopePolicySetDefinitionsCustom = $grpScopePolicySetDefinitionsCustom.where( { $_.Name -eq 'Mg' }).Group | Sort-Object -Property PolicyDefinitionId | Group-Object ScopeId
    $grpSubScopePolicySetDefinitionsCustom = $grpScopePolicySetDefinitionsCustom.where( { $_.Name -eq 'Sub' }).Group | Sort-Object -Property PolicyDefinitionId | Group-Object ScopeId

    $grpScopePolicyAssignments = ($htCacheAssignmentsPolicy).values | Group-Object -Property AssignmentScopeMgSubRg
    $grpMgScopePolicyAssignments = $grpScopePolicyAssignments.where( { $_.Name -eq 'Mg' }).Group | Sort-Object @{Expression = { $_.Assignment.Id } } | Group-Object -Property AssignmentScopeId
    $grpSubScopePolicyAssignments = $grpScopePolicyAssignments.where( { $_.Name -eq 'Sub' }).Group | Sort-Object @{Expression = { $_.Assignment.Id } } | Group-Object -Property AssignmentScopeId

    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
        if (-not $JsonExportExcludeResourceGroups) {
            $grpRGScopePolicyAssignments = $grpScopePolicyAssignments.where( { $_.Name -eq 'RG' }).Group | Sort-Object @{Expression = { $_.Assignment.Id } } | Group-Object -Property AssignmentScopeId
            $htSubRGPolicyAssignments = @{}
            foreach ($rgpa in $grpRGScopePolicyAssignments) {
                $subId = ($rgpa.Name).split('/')[0]
                if (-not $htSubRGPolicyAssignments.($subId)) {
                    $htSubRGPolicyAssignments.($subId) = @{}
                }
                if (-not $htSubRGPolicyAssignments.($subId).PolicyAssignments) {
                    $htSubRGPolicyAssignments.($subId).PolicyAssignments = @()
                }
                $htSubRGPolicyAssignments.($subId).PolicyAssignments += $rgpa.group
            }
        }
    }

    $grpScopeRoleAssignments = ($htCacheAssignmentsRole).values | Group-Object -Property AssignmentScopeTenMgSubRgRes
    $grpTenantScopeRoleAssignments = $grpScopeRoleAssignments.where( { $_.Name -eq 'Tenant' }).Group | Group-Object -Property AssignmentScopeId
    $grpMgScopeRoleAssignments = $grpScopeRoleAssignments.where( { $_.Name -eq 'Mg' }).Group | Sort-Object @{Expression = { $_.Assignment.RoleAssignmentId } } | Group-Object -Property AssignmentScopeId
    $grpSubScopeRoleAssignments = $grpScopeRoleAssignments.where( { $_.Name -eq 'Sub' }).Group | Sort-Object @{Expression = { $_.Assignment.RoleAssignmentId } } | Group-Object -Property AssignmentScopeId

    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
        if (-not $JsonExportExcludeResourceGroups) {
            $grpRGScopeRoleAssignments = $grpScopeRoleAssignments.where( { $_.Name -eq 'RG' }).Group | Sort-Object @{Expression = { $_.Assignment.RoleAssignmentId } } | Group-Object -Property AssignmentScopeId
            $htSubRGRoleAssignments = @{}
            foreach ($rgra in $grpRGScopeRoleAssignments) {
                $subId = ($rgra.Name).split('/')[0]
                if (-not $htSubRGRoleAssignments.($subId)) {
                    $htSubRGRoleAssignments.($subId) = @{}
                }
                if (-not $htSubRGRoleAssignments.($subId).RoleAssignments) {
                    $htSubRGRoleAssignments.($subId).RoleAssignments = @()
                }
                $htSubRGRoleAssignments.($subId).RoleAssignments += $rgra.group
            }

            #res
            if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                if (-not $JsonExportExcludeResources) {
                    $grpResScopeRoleAssignments = $grpScopeRoleAssignments.where( { $_.Name -eq 'Res' }).Group | Sort-Object @{Expression = { $_.Assignment.RoleAssignmentId } } | Group-Object -Property AssignmentScopeId
                    $htSubResRoleAssignments = @{}
                    foreach ($resra in $grpResScopeRoleAssignments.Group) {
                        $raSplit = ($resra.Assignment.RoleAssignmentId).split('/')
                        $splitSubId = $raSplit[2]
                        $splitRg = $raSplit[4]
                        if (-not $htSubResRoleAssignments.($splitSubId)) {
                            $htSubResRoleAssignments.($splitSubId) = @{}
                        }
                        if (-not $htSubResRoleAssignments.($splitSubId).($splitRg)) {
                            $htSubResRoleAssignments.($splitSubId).($splitRg) = @{}

                        }

                        $resourceName = $resra.AssignmentScopeId.split('/')[2]
                        if (-not $htSubResRoleAssignments.($splitSubId).($splitRg).("$($resra.ResourceType)_$($resourceName)")) {
                            $htSubResRoleAssignments.($splitSubId).($splitRg).("$($resra.ResourceType)_$($resourceName)") = @{}

                        }
                        if (-not $htSubResRoleAssignments.($splitSubId).($splitRg).("$($resra.ResourceType)_$($resourceName)").RoleAssignments) {
                            $htSubResRoleAssignments.($splitSubId).($splitRg).("$($resra.ResourceType)_$($resourceName)").RoleAssignments = [ordered]@{}

                        }
                        ($htSubResRoleAssignments.($splitSubId).($splitRg).("$($resra.ResourceType)_$($resourceName)").RoleAssignments.($resra.Assignment.RoleAssignmentId)) = $resra.Assignment
                    }
                }
            }
        }

    }

    $bluePrintsAssignmentsAtScope = ($htCacheAssignmentsBlueprint).keys | Sort-Object
    $bluePrintDefinitions = ($htCacheDefinitionsBlueprint).Keys | Sort-Object
    $subscriptions = ($optimizedTableForPathQuery.where( { -not [string]::IsNullOrEmpty($_.subscriptionId) })) | Select-Object mgId, Subscription* | Sort-Object -Property subscriptionId -Unique
    foreach ($mg in $MgIds) {

        $htJSON.ManagementGroups.($mg.MgId) = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).MgId = $mg.MgId
        $htJSON.ManagementGroups.($mg.MgId).MgName = $mg.MgName
        $htJSON.ManagementGroups.($mg.MgId).mgParentId = $mg.mgParentId
        $htJSON.ManagementGroups.($mg.MgId).mgParentName = $mg.mgParentName
        $htJSON.ManagementGroups.($mg.MgId).level = $mg.level
        $htJSON.ManagementGroups.($mg.MgId).PolicyDefinitionsCustom = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).PolicySetDefinitionsCustom = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).BlueprintDefinitions = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).PolicyAssignments = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).RoleAssignments = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings = [ordered]@{}
        $htJSON.ManagementGroups.($mg.MgId).Subscriptions = [ordered]@{}

        foreach ($PolDef in (($grpMgScopePolicyDefinitionsCustom).where( { $_.Name -eq $mg.MgId })).group) {
            $htJSON.ManagementGroups.($mg.MgId).PolicyDefinitionsCustom.($PolDef.Id) = [ordered]@{}
            $htJSON.ManagementGroups.($mg.MgId).PolicyDefinitionsCustom.($PolDef.Id) = $PolDef.Json
        }

        foreach ($PolSetDef in (($grpMgScopePolicySetDefinitionsCustom).where( { $_.Name -eq $mg.MgId })).group) {
            $htJSON.ManagementGroups.($mg.MgId).PolicySetDefinitionsCustom.($PolSetDef.Id) = [ordered]@{}
            $htJSON.ManagementGroups.($mg.MgId).PolicySetDefinitionsCustom.($PolSetDef.Id) = $PolSetDef.Json
        }

        foreach ($PolAssignment in ($grpMgScopePolicyAssignments).where( { $_.Name -eq $mg.MgId }).group) {
            $htJSON.ManagementGroups.($mg.MgId).PolicyAssignments.($PolAssignment.Assignment.id) = [ordered]@{}
            $htJSON.ManagementGroups.($mg.MgId).PolicyAssignments.($PolAssignment.Assignment.id) = $PolAssignment.Assignment
        }

        foreach ($RoleAssignment in ($grpMgScopeRoleAssignments).where( { $_.Name -eq $mg.MgId }).group) {
            $htJSON.ManagementGroups.($mg.MgId).RoleAssignments.($RoleAssignment.Assignment.RoleAssignmentId) = [ordered]@{}
            $htJSON.ManagementGroups.($mg.MgId).RoleAssignments.($RoleAssignment.Assignment.RoleAssignmentId) = $RoleAssignment.Assignment
        }

        foreach ($BlueprintDefinition in ($bluePrintDefinitions).where( { $_ -like "/providers/Microsoft.Management/managementGroups/$($mg.MgId)/*" })) {
            $htJSON.ManagementGroups.($mg.MgId).BlueprintDefinitions.($BlueprintDefinition) = [ordered]@{}
            $htJSON.ManagementGroups.($mg.MgId).BlueprintDefinitions.($BlueprintDefinition) = $BlueprintDefinition
        }

        if (($htDiagnosticSettingsMgSub).mg.($mg.MgId)) {
            foreach ($entry in ($htDiagnosticSettingsMgSub).mg.($mg.MgId).keys | Sort-Object) {
                $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings.($entry) = [ordered]@{}
                foreach ($diagset in ($htDiagnosticSettingsMgSub).mg.($mg.MgId).$entry.keys | Sort-Object) {
                    $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings.($entry).Name = (($htDiagnosticSettingsMgSub).mg.($mg.MgId).$entry.$diagset.DiagnosticSettingName)
                    $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings.($entry).Type = (($htDiagnosticSettingsMgSub).mg.($mg.MgId).$entry.$diagset.DiagnosticTargetType)
                    $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings.($entry).TargetId = (($htDiagnosticSettingsMgSub).mg.($mg.MgId).$entry.$diagset.DiagnosticTargetId)
                    $htJSON.ManagementGroups.($mg.MgId).DiagnosticSettings.($entry).Settings = (($htDiagnosticSettingsMgSub).mg.($mg.MgId).$entry.$diagset.DiagnosticCategories)
                }
            }
        }

        foreach ($subscription in $subscriptions) {
            if ($subscription.MgId -eq $mg.MgId) {

                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId) = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionName = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionQuotaId = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionState = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionTags = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionName = $subscription.Subscription
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionQuotaId = $subscription.SubscriptionQuotaId
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionState = $subscription.SubscriptionState
                if ($htSubscriptionTags.($subscription.SubscriptionId)) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).SubscriptionTags = $htSubscriptionTags.($subscription.SubscriptionId).getEnumerator() | Sort-Object Key -CaseSensitive
                }
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyDefinitionsCustom = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicySetDefinitionsCustom = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintDefinitions = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyAssignments = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).RoleAssignments = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintAssignments = [ordered]@{}
                $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings = [ordered]@{}

                foreach ($PolDef in (($grpSubScopePolicyDefinitionsCustom).where( { $_.Name -eq $subscription.subscriptionId })).group) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyDefinitionsCustom.($PolDef.Id) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyDefinitionsCustom.($PolDef.Id) = $PolDef.Json
                }

                foreach ($PolSetDef in (($grpSubScopePolicySetDefinitionsCustom).where( { $_.Name -eq $subscription.subscriptionId })).group) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicySetDefinitionsCustom.($PolSetDef.Id) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicySetDefinitionsCustom.($PolSetDef.Id) = $PolSetDef.Json
                }

                foreach ($PolAssignment in ($grpSubScopePolicyAssignments).where( { $_.Name -eq $subscription.subscriptionId }).group) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyAssignments.($PolAssignment.Assignment.id) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).PolicyAssignments.($PolAssignment.Assignment.id) = $PolAssignment.Assignment
                }

                foreach ($RoleAssignment in ($grpSubScopeRoleAssignments).where( { $_.Name -eq $subscription.subscriptionId }).group) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).RoleAssignments.($RoleAssignment.Assignment.RoleAssignmentId) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).RoleAssignments.($RoleAssignment.Assignment.RoleAssignmentId) = $RoleAssignment.Assignment
                }

                foreach ($BlueprintDefinition in ($bluePrintDefinitions).where( { $_ -like "/subscriptions/$($subscription.subscriptionId)/*" })) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintDefinitions.($BlueprintDefinition) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintDefinitions.($BlueprintDefinition) = $BlueprintDefinition
                }

                foreach ($BlueprintsAssignment in ($blueprintsAssignmentsAtScope).where( { $_ -like "/subscriptions/$($subscription.subscriptionId)/*" })) {
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintAssignments.($BlueprintsAssignment) = [ordered]@{}
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).BlueprintAssignments.($BlueprintsAssignment) = $BlueprintsAssignment
                }

                if (($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId)) {
                    foreach ($entry in ($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).keys | Sort-Object) {
                        $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings.($entry) = [ordered]@{}
                        foreach ($diagset in ($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).$entry.keys | Sort-Object) {
                            $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings.($entry).Name = (($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).$entry.$diagset.DiagnosticSettingName)
                            $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings.($entry).Type = (($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).$entry.$diagset.DiagnosticTargetType)
                            $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings.($entry).TargetId = (($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).$entry.$diagset.DiagnosticTargetId)
                            $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).DiagnosticSettings.($entry).Settings = (($htDiagnosticSettingsMgSub).sub.($subscription.subscriptionId).$entry.$diagset.DiagnosticCategories)
                        }
                    }
                }


                if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                    if (-not $JsonExportExcludeResourceGroups) {
                        $htTemp = @{}
                        if (-not $htTemp.ResourceGroups) {
                            $htTemp.ResourceGroups = @{}
                        }

                        if ($htSubRGPolicyAssignments.($subscription.subscriptionId)) {
                            foreach ($rgpa in $htSubRGPolicyAssignments.($subscription.subscriptionId).PolicyAssignments) {
                                $rgName = ($rgpa.AssignmentScopeId).split('/')[1]
                                if (-not $htTemp.ResourceGroups.($rgName)) {
                                    $htTemp.ResourceGroups.($rgName) = [ordered]@{}
                                }
                                if (-not $htTemp.ResourceGroups.($rgName).PolicyAssignments) {
                                    $htTemp.ResourceGroups.($rgName).PolicyAssignments = [ordered]@{}
                                }
                                $htTemp.ResourceGroups.($rgName).PolicyAssignments.($rgpa.Assignment.id) = $rgpa.Assignment
                            }
                        }
                    }
                }

                if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                    if (-not $JsonExportExcludeResourceGroups) {
                        if (-not $htTemp) {
                            $htTemp = @{}
                        }
                        if (-not $htTemp.ResourceGroups) {
                            $htTemp.ResourceGroups = @{}
                        }
                        if ($htSubRGRoleAssignments.($subscription.subscriptionId)) {
                            foreach ($rgra in $htSubRGRoleAssignments.($subscription.subscriptionId).RoleAssignments) {
                                $rgName = ($rgra.AssignmentScopeId).split('/')[1]
                                if (-not $htTemp.ResourceGroups.($rgName)) {
                                    $htTemp.ResourceGroups.($rgName) = [ordered]@{}
                                }
                                if (-not $htTemp.ResourceGroups.($rgName).RoleAssignments) {
                                    $htTemp.ResourceGroups.($rgName).RoleAssignments = [ordered]@{}
                                }
                                $htTemp.ResourceGroups.($rgName).RoleAssignments.($rgra.Assignment.RoleAssignmentId) = $rgra.Assignment
                            }
                        }
                        #
                        if (-not $JsonExportExcludeResources) {
                            if (-not $htTemp.ResourceGroups) {
                                $htTemp.ResourceGroups = @{}
                            }
                            if ($htSubResRoleAssignments.($subscription.subscriptionId)) {
                                foreach ($rg in $htSubResRoleAssignments.($subscription.subscriptionId).keys) {
                                    foreach ($res in $htSubResRoleAssignments.($subscription.subscriptionId).($rg).Keys | Sort-Object) {
                                        $rgName = ($resra.AssignmentScopeId).split('/')[1]
                                        if (-not $htTemp.ResourceGroups.($rg)) {
                                            $htTemp.ResourceGroups.($rg) = [ordered]@{}
                                        }
                                        if (-not $htTemp.ResourceGroups.($rg).Resources) {
                                            $htTemp.ResourceGroups.($rg).Resources = [ordered]@{}
                                        }
                                        if (-not $htTemp.ResourceGroups.($rg).Resources.($res)) {
                                            $htTemp.ResourceGroups.($rg).Resources.($res) = [ordered]@{}
                                        }
                                        if (-not $htTemp.ResourceGroups.($rg).Resources.($res).RoleAssignments) {
                                            $htTemp.ResourceGroups.($rg).Resources.($res).RoleAssignments = [ordered]@{}
                                        }
                                        $htTemp.ResourceGroups.($rg).Resources.($res).RoleAssignments = $htSubResRoleAssignments.($subscription.subscriptionId).($rg).($res).RoleAssignments
                                    }
                                }
                            }
                        }
                    }
                }

                if ($htTemp) {
                    $sortedHt = [ordered]@{}
                    foreach ($key in ($htTemp.ResourceGroups.keys | Sort-Object)) {
                        $sortedHt.($key) = $htTemp.ResourceGroups.($key)
                    }
                    $htJSON.ManagementGroups.($mg.MgId).Subscriptions.($subscription.subscriptionId).ResourceGroups = $sortedHt
                    $htTemp = $null
                    $sortedHt = $null
                }
            }
        }
    }

    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
        if ($ManagementGroupsOnly) {
            $JSONPath = "JSON_ManagementGroupsOnly_$($ManagementGroupId)"
        }
        else {
            $JSONPath = "JSON_$($ManagementGroupId)"
        }

        if (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)") {
            Write-Host ' Cleaning old state (Pipeline only)'
            Remove-Item -Recurse -Force "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)"
        }
    }
    else {
        if ($ManagementGroupsOnly) {
            $JSONPath = "JSON_ManagementGroupsOnly_$($ManagementGroupId)_$($fileTimestamp)"
        }
        else {
            $JSONPath = "JSON_$($ManagementGroupId)_$($fileTimestamp)"
        }
        Write-Host " Creating new state ($($JSONPath)) (local only))"
    }

    $null = new-item -Name $JSONPath -ItemType directory -path $outputPath

    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
        "The directory '$($JSONPath)' will be rebuilt during the AzDO Pipeline run. __Do not save any files in this directory, files and folders will be deleted!__" | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)$($DirectorySeparatorChar)ReadMe_important.md" -Encoding utf8
    }

    $null = new-item -Name "$($JSONPath)$($DirectorySeparatorChar)Definitions" -ItemType directory -path $outputPath




    $htJSON.RoleDefinitions = [ordered]@{}
    $pathRoleDefinitions = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)RoleDefinitions"
    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathRoleDefinitions)")) {
        $null = new-item -Name $pathRoleDefinitions -ItemType directory -path $outputPath
        $pathRoleDefinitionCustom = "$($pathRoleDefinitions)$($DirectorySeparatorChar)Custom"
        $pathRoleDefinitionBuiltIn = "$($pathRoleDefinitions)$($DirectorySeparatorChar)BuiltIn"
        $null = new-item -Name "$($pathRoleDefinitionCustom)" -ItemType directory -path $outputPath
        $null = new-item -Name "$($pathRoleDefinitionBuiltIn)" -ItemType directory -path $outputPath
    }

    if (($htCacheDefinitionsRole).Keys.Count -gt 0) {
        foreach ($roleDefinition in ($htCacheDefinitionsRole).Keys.where( { ($htCacheDefinitionsRole).($_).IsCustom }) | Sort-Object) {
            $htJSON.RoleDefinitions.($roleDefinition) = ($htCacheDefinitionsRole).($roleDefinition).Json.properties
            $jsonConverted = ($htCacheDefinitionsRole).($roleDefinition).Json.properties | ConvertTo-Json -Depth 99
            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathRoleDefinitionCustom)$($DirectorySeparatorChar)$(removeInvalidFileNameChars ($htCacheDefinitionsRole).($roleDefinition).Name) ($(($htCacheDefinitionsRole).($roleDefinition).Id)).json" -Encoding utf8
        }
        foreach ($roleDefinition in ($htCacheDefinitionsRole).Keys.where( { -not ($htCacheDefinitionsRole).($_).IsCustom })) {
            $jsonConverted = ($htCacheDefinitionsRole).($roleDefinition).Json | ConvertTo-Json -Depth 99
            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathRoleDefinitionBuiltIn)$($DirectorySeparatorChar)$(removeInvalidFileNameChars ($htCacheDefinitionsRole).($roleDefinition).Name ) ($(($htCacheDefinitionsRole).($roleDefinition).Id)).json" -Encoding utf8
        }
    }

    $pathPolicyDefinitions = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicyDefinitions"
    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathPolicyDefinitions)")) {
        $null = new-item -Name $pathPolicyDefinitions -ItemType directory -path $outputPath
        $pathPolicyDefinitionBuiltIn = "$($pathPolicyDefinitions)$($DirectorySeparatorChar)BuiltIn"
        $null = new-item -Name "$($pathPolicyDefinitionBuiltIn)" -ItemType directory -path $outputPath
    }
    if (($htCacheDefinitionsPolicy).Keys.Count -gt 0) {
        foreach ($policyDefinition in ($htCacheDefinitionsPolicy).Keys.where( { ($htCacheDefinitionsPolicy).($_).Type -eq 'BuiltIn' })) {
            $jsonConverted = ($htCacheDefinitionsPolicy).($policyDefinition).Json.properties | ConvertTo-Json -Depth 99
            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathPolicyDefinitionBuiltIn)$($DirectorySeparatorChar)$(removeInvalidFileNameChars ($htCacheDefinitionsPolicy).($policyDefinition).displayName) ($(($htCacheDefinitionsPolicy).($policyDefinition).Json.name)).json" -Encoding utf8
        }
    }

    $pathPolicySetDefinitions = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicySetDefinitions"
    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathPolicySetDefinitions)")) {
        $null = new-item -Name $pathPolicySetDefinitions -ItemType directory -path $outputPath
        $pathPolicySetDefinitionBuiltIn = "$($pathPolicySetDefinitions)$($DirectorySeparatorChar)BuiltIn"
        $null = new-item -Name "$($pathPolicySetDefinitionBuiltIn)" -ItemType directory -path $outputPath
    }
    if (($htCacheDefinitionsPolicySet).Keys.Count -gt 0) {
        foreach ($policySetDefinition in ($htCacheDefinitionsPolicySet).Keys.where( { ($htCacheDefinitionsPolicySet).($_).Type -eq 'BuiltIn' })) {
            $jsonConverted = ($htCacheDefinitionsPolicySet).($policySetDefinition).Json.properties | ConvertTo-Json -Depth 99
            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($pathPolicySetDefinitionBuiltIn)$($DirectorySeparatorChar)$(removeInvalidFileNameChars ($htCacheDefinitionsPolicySet).($policySetDefinition).displayName) ($(($htCacheDefinitionsPolicySet).($policySetDefinition).Json.name)).json" -Encoding utf8
        }
    }

    $endBuildHt = Get-Date
    Write-Host " ht for JSON creation duration: $((NEW-TIMESPAN -Start $startBuildHt -End $endBuildHt).TotalSeconds) seconds"

    $startBuildJSON = Get-Date
    Write-Host ' Build JSON'


    $null = new-item -Name "$($JSONPath)$($DirectorySeparatorChar)Tenant" -ItemType directory -path $outputPath

    $htTree = [ordered]@{}
    $htTree.'Tenant' = [ordered] @{}
    $htTree.Tenant.TenantId = $azAPICallConf['checkContext'].Tenant.Id
    $htTree.Tenant.RoleAssignments = [ordered]@{}
    foreach ($RoleAssignment in ($grpTenantScopeRoleAssignments).Group | Sort-Object @{Expression = { $_.Assignment.RoleAssignmentId } }) {

        $htTree.Tenant.RoleAssignments.$($RoleAssignment.Assignment.RoleAssignmentId) = [ordered]@{}
        $htTree.Tenant.RoleAssignments.$($RoleAssignment.Assignment.RoleAssignmentId) = $RoleAssignment.Assignment

        if ($RoleAssignment.Assignment.PIM -eq 'true') {
            $pim = 'PIM_'
        }
        else {
            $pim = ''
        }
        $jsonConverted = ($RoleAssignment.Assignment | Select-Object -ExcludeProperty PIM) | ConvertTo-Json -Depth 99
        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)$($DirectorySeparatorChar)Tenant$($DirectorySeparatorChar)ra_$($RoleAssignment.Assignment.ObjectType)_$($pim)$($RoleAssignment.Assignment.RoleAssignmentId -replace '.*/').json" -Encoding utf8
        $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)RoleAssignments$($DirectorySeparatorChar)Tenant"
        if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
            $null = new-item -Name $path -ItemType directory -path $outputPath
        }
        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($RoleAssignment.Assignment.ObjectType)_$($pim)$($RoleAssignment.Assignment.RoleAssignmentId -replace '.*/').json" -Encoding utf8
    }

    $htTree.'Tenant'.'ManagementGroups' = [ordered] @{}
    $json = $htTree.'Tenant'

    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)$($DirectorySeparatorChar)Assignments")) {
        $null = new-item -Name "$($JSONPath)$($DirectorySeparatorChar)Assignments" -ItemType directory -path $outputPath
    }

    buildTree -mgId $ManagementGroupId -json $json -prnt "$($JSONPath)$($DirectorySeparatorChar)Tenant"

    $htTree.'Tenant'.'CustomRoleDefinitions' = $htJSON.RoleDefinitions

    Write-Host " Exporting Tenant JSON '$($outputPath)$($DirectorySeparatorChar)$($JSONPath)$($DirectorySeparatorChar)$($fileName).json'"
    $htTree | ConvertTo-JSON -Depth 99 | Set-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($JSONPath)$($DirectorySeparatorChar)$($fileName).json" -Encoding utf8 -Force

    $endBuildJSON = Get-Date
    Write-Host " Building JSON duration: $((NEW-TIMESPAN -Start $startBuildJSON -End $endBuildJSON).TotalSeconds) seconds"

    $endJSON = Get-Date
    Write-Host "Creating Hierarchy JSON duration: $((NEW-TIMESPAN -Start $startJSON -End $endJSON).TotalSeconds) seconds"
}
function buildMD {
    Write-Host 'Building Markdown'
    $startBuildMD = Get-Date
    $script:arrayMgs = [System.Collections.ArrayList]@()
    $script:arraySubs = [System.Collections.ArrayList]@()
    $script:arraySubsOos = [System.Collections.ArrayList]@()
    $markdown = $null
    $script:markdownhierarchyMgs = $null
    $script:markdownhierarchySubs = $null
    $script:markdownTable = $null

    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions -eq $true) {
        if ($azAPICallConf['htParameters'].onAzureDevOps -eq $true) {
            $markdown += @"
# AzGovViz - Management Group Hierarchy

## HierarchyMap (Mermaid)

::: mermaid
    graph $($MermaidDirection.ToUpper());`n
"@
        }
        if ($azAPICallConf['htParameters'].onGitHubActions -eq $true) {
            $marks = '```'
            $markdown += @"
# AzGovViz - Management Group Hierarchy

## HierarchyMap (Mermaid)

$($marks)mermaid
    graph $($MermaidDirection.ToUpper());`n
"@
        }

    }
    else {
        $markdown += @"
# AzGovViz - Management Group Hierarchy

$executionDateTimeInternationalReadable ($currentTimeZone)

## HierarchyMap (Mermaid)

::: mermaid
    graph $($MermaidDirection.ToUpper());`n
"@
    }

    processDiagramMermaid

    $markdown += @"
$markdownhierarchyMgs
$markdownhierarchySubs
 classDef mgr fill:#D9F0FF,stroke:#56595E,color:#000000,stroke-width:1px;
 classDef subs fill:#EEEEEE,stroke:#56595E,color:#000000,stroke-width:1px;
"@

    if (($arraySubsOos).count -gt 0) {
        $markdown += @'
 classDef subsoos fill:#FFCBC7,stroke:#56595E,color:#000000,stroke-width:1px;
'@
    }

    $markdown += @"
 classDef mgrprnts fill:#FFFFFF,stroke:#56595E,color:#000000,stroke-width:1px;
 class $(($arrayMgs | Sort-Object -unique) -join ',') mgr;
 class $(($arraySubs | Sort-Object -unique) -join ',') subs;
"@

    if (($arraySubsOos).count -gt 0) {
        $markdown += @"
 class $(($arraySubsOos | Sort-Object -unique) -join ',') subsoos;
"@
    }

    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions -eq $true) {
        if ($azAPICallConf['htParameters'].onAzureDevOps -eq $true) {
            $markdown += @"
class $mermaidprnts mgrprnts;
:::

"@
        }
        if ($azAPICallConf['htParameters'].onGitHubActions -eq $true) {
`
                $marks = '```'
            $markdown += @"
class $mermaidprnts mgrprnts;
$marks

"@
        }
    }
    else {
        $markdown += @"
class $mermaidprnts mgrprnts;
:::

"@
    }

    $markdown += @"
## Summary
`n
"@
    if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
        $markdown += @"
Total Management Groups: $totalMgCount (depth $mgDepth)\`n
"@

        if (($arraySubsOos).count -gt 0) {
            $markdown += @"
Total Subscriptions: $totalSubIncludedAndExcludedCount (<font color="#FF0000">$totalSubOutOfScopeCount</font> out-of-scope)\`n
"@
        }
        else {
            $markdown += @"
Total Subscriptions: $totalSubIncludedAndExcludedCount\`n
"@
        }

        $markdown += @"
Total Custom Policy definitions: $tenantCustomPoliciesCount\
Total Custom PolicySet definitions: $tenantCustompolicySetsCount\
Total Policy assignments: $($totalPolicyAssignmentsCount)\
Total Policy assignments ManagementGroups $($totalPolicyAssignmentsCountMg)\
Total Policy assignments Subscriptions $($totalPolicyAssignmentsCountSub)\
Total Policy assignments ResourceGroups: $($totalPolicyAssignmentsCountRg)\
Total Custom Role definitions: $totalRoleDefinitionsCustomCount\
Total Role assignments: $totalRoleAssignmentsCount\
Total Role assignments (Tenant): $totalRoleAssignmentsCountTen\
Total Role assignments (ManagementGroups): $totalRoleAssignmentsCountMG\
Total Role assignments (Subscriptions): $totalRoleAssignmentsCountSub\
Total Role assignments (ResourceGroups and Resources): $totalRoleAssignmentsResourceGroupsAndResourcesCount\
Total Blueprint definitions: $totalBlueprintDefinitionsCount\
Total Blueprint assignments: $totalBlueprintAssignmentsCount\
Total Resources: $totalResourceCount\
Total Resource Types: $totalResourceTypesCount
"@

    }
    if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $true) {
        $mgsDetails = ($optimizedTableForPathQueryMg | Select-Object Level, MgId -Unique)
        $mgDepth = ($mgsDetails.Level | Measure-Object -maximum).Maximum
        $totalMgCount = ($mgsDetails).count
        $totalSubCount = ($optimizedTableForPathQuerySub).count

        $markdown += @"
Total Management Groups: $totalMgCount (depth $mgDepth)\
Total Subscriptions: $totalSubCount
"@

    }

    $markdown += @"
`n
## Hierarchy Table

| **MgLevel** | **MgName** | **MgId** | **MgParentName** | **MgParentId** | **SubName** | **SubId** |
|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
$markdownTable
"@

    $markdown | Set-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).md" -Encoding utf8 -Force
    $endBuildMD = Get-Date
    Write-Host "Building Markdown total duration: $((NEW-TIMESPAN -Start $startBuildMD -End $endBuildMD).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startBuildMD -End $endBuildMD).TotalSeconds) seconds)"
}
function buildPolicyAllJSON {
    Write-Host 'Creating PolicyAll JSON'
    $startPolicyAllJSON = Get-Date
    $htPolicyAndPolicySet = [ordered]@{}
    $htPolicyAndPolicySet.Policy = [ordered]@{}
    $htPolicyAndPolicySet.PolicySet = [ordered]@{}
    foreach ($policy in ($tenantPoliciesDetailed | Sort-Object -Property Type, ScopeMGLevel, PolicyDefinitionId)) {
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()) = [ordered]@{}
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyType = $policy.Type
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).ScopeMGLevel = $policy.ScopeMGLevel
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).Scope = $policy.Scope
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).ScopeId = $policy.scopeId
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyDisplayName = $policy.PolicyDisplayName
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyDefinitionName = $policy.PolicyDefinitionName
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyDefinitionId = $policy.PolicyDefinitionId
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyEffect = $policy.PolicyEffect
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).PolicyCategory = $policy.PolicyCategory
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UniqueAssignmentsCount = $policy.UniqueAssignmentsCount
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UniqueAssignments = $policy.UniqueAssignments
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UsedInPolicySetsCount = $policy.UsedInPolicySetsCount
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UsedInPolicySets = $policy.UsedInPolicySet4JSON
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).CreatedOn = $policy.CreatedOn
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).CreatedBy = $policy.CreatedByJson
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UpdatedOn = $policy.UpdatedOn
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).UpdatedBy = $policy.UpdatedByJson
        $htPolicyAndPolicySet.Policy.($policy.PolicyDefinitionId.ToLower()).JSON = $policy.Json
    }
    foreach ($policySet in ($tenantPolicySetsDetailed | Sort-Object -Property Type, ScopeMGLevel, PolicySetDefinitionId)) {
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()) = [ordered]@{}
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PolicySetType = $policy.Type
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).ScopeMGLevel = $policySet.ScopeMGLevel
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).Scope = $policySet.Scope
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).ScopeId = $policySet.scopeId
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PolicySetDisplayName = $policySet.PolicySetDisplayName
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PolicySetDefinitionName = $policySet.PolicySetDefinitionName
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PolicySetDefinitionId = $policySet.PolicySetDefinitionId
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PolicySetCategory = $policySet.PolicySetCategory
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).UniqueAssignmentsCount = $policySet.UniqueAssignmentsCount
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).UniqueAssignments = $policySet.UniqueAssignments
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PoliciesUsedCount = $policySet.PoliciesUsedCount
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).PoliciesUsed = $policySet.PoliciesUsed4JSON
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).CreatedOn = $policySet.CreatedOn
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).CreatedBy = $policySet.CreatedByJson
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).UpdatedOn = $policySet.UpdatedOn
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).UpdatedBy = $policySet.UpdatedByJson
        $htPolicyAndPolicySet.PolicySet.($policySet.PolicySetDefinitionId.ToLower()).JSON = $policySet.Json
    }
    Write-Host " Exporting PolicyAll JSON '$($outputPath)$($DirectorySeparatorChar)$($fileName)_PolicyAll.json'"
    $htPolicyAndPolicySet | ConvertTo-JSON -Depth 99 | Set-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_PolicyAll.json" -Encoding utf8 -Force

    $endPolicyAllJSON = Get-Date
    Write-Host "Creating PolicyAll JSON duration: $((NEW-TIMESPAN -Start $startPolicyAllJSON -End $endPolicyAllJSON).TotalSeconds) seconds"
}
function buildTree($mgId, $prnt) {
    $getMg = $arrayEntitiesFromAPI.where( { $_.type -eq 'Microsoft.Management/managementGroups' -and $_.name -eq $mgId })
    $childrenManagementGroups = $arrayEntitiesFromAPI.where( { $_.type -eq 'Microsoft.Management/managementGroups' -and $_.properties.parent.id -eq "/providers/Microsoft.Management/managementGroups/$($getMg.Name)" })
    $mgNameValid = removeInvalidFileNameChars $getMg.Name
    $mgDisplayNameValid = removeInvalidFileNameChars $getMg.properties.displayName
    $prntx = "$($prnt)$($DirectorySeparatorChar)$($mgNameValid) ($($mgDisplayNameValid))"
    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($prntx)")) {
        $null = new-item -Name $prntx -ItemType directory -path $outputPath
    }

    if (-not $json.'ManagementGroups') {
        $json.'ManagementGroups' = [ordered]@{}
    }
    $json = $json.'ManagementGroups'.($getMg.Name) = [ordered]@{}
    foreach ($mgCap in $htJSON.ManagementGroups.($getMg.Name).keys) {
        $json.$mgCap = $htJSON.ManagementGroups.($getMg.Name).$mgCap
        if ($mgCap -eq 'PolicyDefinitionsCustom') {
            $mgCapShort = 'pd'
            foreach ($pdc in $htJSON.ManagementGroups.($getMg.Name).($mgCap).Keys) {
                $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($pdc)
                if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                    $displayName = 'noDisplayNameGiven'
                }
                else {
                    $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                }
                $jsonConverted = $hlp.properties | ConvertTo-Json -Depth 99
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($prntx)$($DirectorySeparatorChar)$($mgCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                $path = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicyDefinitions$($DirectorySeparatorChar)Custom$($DirectorySeparatorChar)Mg$($DirectorySeparatorChar)$($mgNameValid) ($($mgDisplayNameValid))"
                if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                    $null = new-item -Name $path -ItemType directory -path $outputPath
                }
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
            }
        }
        if ($mgCap -eq 'PolicySetDefinitionsCustom') {
            $mgCapShort = 'psd'
            foreach ($psdc in $htJSON.ManagementGroups.($getMg.Name).($mgCap).Keys) {
                $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($psdc)
                if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                    $displayName = 'noDisplayNameGiven'
                }
                else {
                    $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                }
                $jsonConverted = $hlp.properties | ConvertTo-Json -Depth 99
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($prntx)$($DirectorySeparatorChar)$($mgCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                $path = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicySetDefinitions$($DirectorySeparatorChar)Custom$($DirectorySeparatorChar)Mg$($DirectorySeparatorChar)$($mgNameValid) ($($mgDisplayNameValid))"
                if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                    $null = new-item -Name $path -ItemType directory -path $outputPath
                }
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
            }
        }
        if ($mgCap -eq 'PolicyAssignments') {
            $mgCapShort = 'pa'
            foreach ($pa in $htJSON.ManagementGroups.($getMg.Name).($mgCap).Keys) {
                $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($pa)
                if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                    $displayName = 'noDisplayNameGiven'
                }
                else {
                    $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                }
                $jsonConverted = $hlp | ConvertTo-Json -Depth 99
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($prntx)$($DirectorySeparatorChar)$($mgCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)$($mgCap)$($DirectorySeparatorChar)Mg$($DirectorySeparatorChar)$($mgNameValid) ($($mgDisplayNameValid))"
                if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                    $null = new-item -Name $path -ItemType directory -path $outputPath
                }

                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
            }
        }
        #marker
        if ($mgCap -eq 'RoleAssignments') {
            $mgCapShort = 'ra'
            foreach ($ra in $htJSON.ManagementGroups.($getMg.Name).($mgCap).Keys) {
                $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($ra)
                if ($hlp.PIM -eq 'true') {
                    $pim = 'PIM_'
                }
                else {
                    $pim = ''
                }
                $jsonConverted = ($hlp | Select-Object -ExcludeProperty PIM) | ConvertTo-Json -Depth 99
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($prntx)$($DirectorySeparatorChar)$($mgCapShort)_$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)$($mgCap)$($DirectorySeparatorChar)Mg$($DirectorySeparatorChar)$($mgNameValid) ($($mgDisplayNameValid))"
                if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                    $null = new-item -Name $path -ItemType directory -path $outputPath
                }
                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
            }
        }

        if ($mgCap -eq 'Subscriptions') {
            foreach ($sub in $htJSON.ManagementGroups.($getMg.Name).($mgCap).Keys) {
                $subNameValid = removeInvalidFileNameChars $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).SubscriptionName
                $subFolderName = "$($prntx)$($DirectorySeparatorChar)$($subNameValid) ($($sub))"
                $null = new-item -Name $subFolderName -ItemType directory -path $outputPath
                foreach ($subCap in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).Keys) {
                    if ($subCap -eq 'PolicyDefinitionsCustom') {
                        $subCapShort = 'pd'
                        foreach ($pdc in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys) {
                            $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($pdc)
                            if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                                $displayName = 'noDisplayNameGiven'
                            }
                            else {
                                $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                            }
                            $jsonConverted = $hlp.properties | ConvertTo-Json -Depth 99
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($subCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                            $path = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicyDefinitions$($DirectorySeparatorChar)Custom$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))"
                            if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                $null = new-item -Name $path -ItemType directory -path $outputPath
                            }
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                        }
                    }
                    if ($subCap -eq 'PolicySetDefinitionsCustom') {
                        $subCapShort = 'psd'
                        foreach ($psdc in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys) {
                            $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($psdc)
                            if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                                $displayName = 'noDisplayNameGiven'
                            }
                            else {
                                $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                            }
                            $jsonConverted = $hlp.properties | ConvertTo-Json -Depth 99
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($subCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                            $path = "$($JSONPath)$($DirectorySeparatorChar)Definitions$($DirectorySeparatorChar)PolicySetDefinitions$($DirectorySeparatorChar)Custom$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))"
                            if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                $null = new-item -Name $path -ItemType directory -path $outputPath
                            }
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                        }
                    }
                    if ($subCap -eq 'PolicyAssignments') {
                        $subCapShort = 'pa'
                        foreach ($pa in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys) {
                            $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($pa)
                            if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                                $displayName = 'noDisplayNameGiven'
                            }
                            else {
                                $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                            }
                            $jsonConverted = $hlp | ConvertTo-Json -Depth 99
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($subCapShort)_$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                            $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)$($subCap)$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))"
                            if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                $null = new-item -Name $path -ItemType directory -path $outputPath
                            }
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($(removeInvalidFileNameChars $hlp.name)).json" -Encoding utf8
                        }
                    }
                    #marker
                    if ($subCap -eq 'RoleAssignments') {
                        $subCapShort = 'ra'
                        foreach ($ra in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys) {
                            $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($ra)
                            if ($hlp.PIM -eq 'true') {
                                $pim = 'PIM_'
                            }
                            else {
                                $pim = ''
                            }
                            $jsonConverted = ($hlp | Select-Object -ExcludeProperty PIM) | ConvertTo-Json -Depth 99
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($subCapShort)_$($pim)$($hlp.ObjectType)_$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                            $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)$($subCap)$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))"
                            if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                $null = new-item -Name $path -ItemType directory -path $outputPath
                            }
                            $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                        }
                    }

                    #RG Pol
                    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                        if (-not $JsonExportExcludeResourceGroups) {
                            if ($subCap -eq 'ResourceGroups') {
                                foreach ($rg in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys | Sort-Object) {
                                    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)")) {
                                        $null = new-item -Name "$($subFolderName)$($DirectorySeparatorChar)$($rg)" -ItemType directory -path "$($outputPath)"
                                    }
                                    foreach ($pa in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).PolicyAssignments.keys) {
                                        $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).PolicyAssignments.($pa)
                                        if ([string]::IsNullOrEmpty($hlp.properties.displayName)) {
                                            $displayName = 'noDisplayNameGiven'
                                        }
                                        else {
                                            $displayName = removeInvalidFileNameChars $hlp.properties.displayName
                                        }
                                        $jsonConverted = $hlp | ConvertTo-Json -Depth 99
                                        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)pa_$($displayName) ($($hlp.name)).json" -Encoding utf8
                                        $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)PolicyAssignments$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))$($DirectorySeparatorChar)$($rg)"
                                        if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                            $null = new-item -Name $path -ItemType directory -path $outputPath
                                        }
                                        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($displayName) ($($hlp.name)).json" -Encoding utf8
                                    }
                                }
                            }
                        }
                    }

                    #RG RoleAss
                    #marker
                    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                        if (-not $JsonExportExcludeResourceGroups) {
                            if ($subCap -eq 'ResourceGroups') {
                                foreach ($rg in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).Keys | Sort-Object) {
                                    if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)")) {
                                        $null = new-item -Name "$($subFolderName)$($DirectorySeparatorChar)$($rg)" -ItemType directory -path "$($outputPath)"
                                    }
                                    foreach ($ra in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).RoleAssignments.keys) {
                                        $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).RoleAssignments.($ra)
                                        if ($hlp.PIM -eq 'true') {
                                            $pim = 'PIM_'
                                        }
                                        else {
                                            $pim = ''
                                        }
                                        $jsonConverted = ($hlp | Select-Object -ExcludeProperty PIM) | ConvertTo-Json -Depth 99
                                        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)ra_$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                                        $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)RoleAssignments$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))$($DirectorySeparatorChar)$($rg)"
                                        if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                            $null = new-item -Name $path -ItemType directory -path $outputPath
                                        }
                                        $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                                    }
                                    #res
                                    if (-not $JsonExportExcludeResources) {

                                        foreach ($res in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).Resources.keys) {
                                            if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)$($res)")) {
                                                $null = new-item -Name "$($subFolderName)$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)$($res)" -ItemType directory -path "$($outputPath)"
                                            }
                                            foreach ($ra in $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).Resources.($res).RoleAssignments.keys) {
                                                $hlp = $htJSON.ManagementGroups.($getMg.Name).($mgCap).($sub).($subCap).($rg).Resources.($res).RoleAssignments.($ra)
                                                if ($hlp.PIM -eq 'true') {
                                                    $pim = 'PIM_'
                                                }
                                                else {
                                                    $pim = ''
                                                }
                                                $jsonConverted = ($hlp | Select-Object -ExcludeProperty PIM) | ConvertTo-Json -Depth 99
                                                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($subFolderName)$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)$($res)$($DirectorySeparatorChar)ra_$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                                                $path = "$($JSONPath)$($DirectorySeparatorChar)Assignments$($DirectorySeparatorChar)RoleAssignments$($DirectorySeparatorChar)Sub$($DirectorySeparatorChar)$($subNameValid) ($($sub))$($DirectorySeparatorChar)$($rg)$($DirectorySeparatorChar)$($res)"
                                                if (-not (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)")) {
                                                    $null = new-item -Name $path -ItemType directory -path $outputPath
                                                }
                                                $jsonConverted | Set-Content -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($path)$($DirectorySeparatorChar)$($hlp.ObjectType)_$($pim)$($hlp.RoleAssignmentId -replace '.*/').json" -Encoding utf8
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if ($childrenManagementGroups.Count -eq 0) {
        $json.'ManagementGroups' = @{}
    }
    else {
        foreach ($childMg in $childrenManagementGroups) {
            buildTree -mgId $childMg.Name -json $json -prnt $prntx
        }
    }
}
function cacheBuiltIn {
    $startDefinitionsCaching = Get-Date
    Write-Host 'Caching built-in Policy and RBAC Role definitions'

    $arrayBuiltInCaching = @('PolicyDefinitions', 'PolicySetDefinitions', 'RoleDefinitions')

    $arrayBuiltInCaching | ForEach-Object -parallel {

        $builtInCapability = $_
        #fromOtherFunctions
        $azAPICallConf = $using:azAPICallConf
        $scriptPath = $using:ScriptPath
        #Array&HTs
        $htCacheDefinitionsPolicy = $using:htCacheDefinitionsPolicy
        $htCacheDefinitionsPolicySet = $using:htCacheDefinitionsPolicySet
        $htCacheDefinitionsRole = $using:htCacheDefinitionsRole
        $htRoleDefinitionIdsUsedInPolicy = $using:htRoleDefinitionIdsUsedInPolicy

        if ($builtInCapability -eq 'PolicyDefinitions') {
            $currentTask = 'Caching built-in Policy definitions'
            #Write-Host " $currentTask"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Authorization/policyDefinitions?api-version=2021-06-01&`$filter=policyType eq 'BuiltIn'"
            $method = 'GET'
            $requestPolicyDefinitionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

            Write-Host " $($requestPolicyDefinitionAPI.Count) built-in Policy definitions returned"
            $builtinPolicyDefinitions = $requestPolicyDefinitionAPI.where( { $_.properties.policyType -eq 'BuiltIn' } )

            foreach ($builtinPolicyDefinition in $builtinPolicyDefinitions) {
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()) = @{}
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Id = ($builtinPolicyDefinition.Id).ToLower()
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).ScopeMGLevel = ''
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Scope = 'n/a'
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).ScopeMgSub = 'n/a'
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).ScopeId = 'n/a'
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).DisplayName = $builtinPolicyDefinition.Properties.displayname
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Description = $builtinPolicyDefinition.Properties.description
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Type = $builtinPolicyDefinition.Properties.policyType
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Category = $builtinPolicyDefinition.Properties.metadata.category
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).PolicyDefinitionId = ($builtinPolicyDefinition.Id).ToLower()
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).LinkToAzAdvertizer = "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azpolicyadvertizer/$(($builtinPolicyDefinition.Id -replace '.*/')).html`" target=`"_blank`" rel=`"noopener`">$($builtinPolicyDefinition.Properties.displayname)</a>"
                if ($builtinPolicyDefinition.Properties.metadata.deprecated -eq $true -or $builtinPolicyDefinition.Properties.displayname -like "``[Deprecated``]*") {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Deprecated = $builtinPolicyDefinition.Properties.metadata.deprecated
                }
                else {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Deprecated = $false
                }
                if ($builtinPolicyDefinition.Properties.metadata.preview -eq $true -or $builtinPolicyDefinition.Properties.displayname -like "``[*Preview``]*") {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Preview = $builtinPolicyDefinition.Properties.metadata.preview
                }
                else {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Preview = $false
                }
                #effects
                if ($builtinPolicyDefinition.properties.parameters.effect.defaultvalue) {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectDefaultValue = $builtinPolicyDefinition.properties.parameters.effect.defaultvalue
                    if ($builtinPolicyDefinition.properties.parameters.effect.allowedValues) {
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectAllowedValue = $builtinPolicyDefinition.properties.parameters.effect.allowedValues -join ','
                    }
                    else {
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectAllowedValue = 'n/a'
                    }
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectFixedValue = 'n/a'
                }
                else {
                    if ($builtinPolicyDefinition.properties.parameters.policyEffect.defaultValue) {
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectDefaultValue = $builtinPolicyDefinition.properties.parameters.policyEffect.defaultvalue
                        if ($builtinPolicyDefinition.properties.parameters.policyEffect.allowedValues) {
                                ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectAllowedValue = $builtinPolicyDefinition.properties.parameters.policyEffect.allowedValues -join ','
                        }
                        else {
                                ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectAllowedValue = 'n/a'
                        }
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectFixedValue = 'n/a'
                    }
                    else {
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectFixedValue = $builtinPolicyDefinition.Properties.policyRule.then.effect
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectDefaultValue = 'n/a'
                            ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).effectAllowedValue = 'n/a'
                    }
                }
                    ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).Json = $builtinPolicyDefinition

                if (-not [string]::IsNullOrEmpty($builtinPolicyDefinition.properties.policyRule.then.details.roleDefinitionIds)) {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).RoleDefinitionIds = $builtinPolicyDefinition.properties.policyRule.then.details.roleDefinitionIds
                    foreach ($roledefinitionId in $builtinPolicyDefinition.properties.policyRule.then.details.roleDefinitionIds) {
                        if (-not $htRoleDefinitionIdsUsedInPolicy.($roledefinitionId)) {
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId) = @{}
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies = [array]$builtinPolicyDefinition.Id
                        }
                        else {
                            $usedInPolicies = $htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies
                            $usedInPolicies += $builtinPolicyDefinition.Id
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies = $usedInPolicies
                        }
                    }
                }
                else {
                        ($script:htCacheDefinitionsPolicy).(($builtinPolicyDefinition.Id).ToLower()).RoleDefinitionIds = 'n/a'
                }
            }
        }

        if ($builtInCapability -eq 'PolicySetDefinitions') {

            $currentTask = 'Caching built-in PolicySet definitions'
            #Write-Host " $currentTask"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Authorization/policySetDefinitions?api-version=2021-06-01&`$filter=policyType eq 'BuiltIn'"
            $method = 'GET'
            $requestPolicySetDefinitionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

            $builtinPolicySetDefinitions = $requestPolicySetDefinitionAPI.where( { $_.properties.policyType -eq 'BuiltIn' } )
            Write-Host " $($requestPolicySetDefinitionAPI.Count) built-in PolicySet definitions returned"
            foreach ($builtinPolicySetDefinition in $builtinPolicySetDefinitions) {
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()) = @{}
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Id = ($builtinPolicySetDefinition.Id).ToLower()
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).ScopeMGLevel = ''
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Scope = 'n/a'
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).ScopeMgSub = 'n/a'
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).ScopeId = 'n/a'
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).DisplayName = $builtinPolicySetDefinition.Properties.displayname
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Description = $builtinPolicySetDefinition.Properties.description
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Type = $builtinPolicySetDefinition.Properties.policyType
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Category = $builtinPolicySetDefinition.Properties.metadata.category
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).PolicyDefinitionId = ($builtinPolicySetDefinition.Id).ToLower()
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).LinkToAzAdvertizer = "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azpolicyinitiativesadvertizer/$(($builtinPolicySetDefinition.Id -replace '.*/')).html`" target=`"_blank`" rel=`"noopener`">$($builtinPolicySetDefinition.Properties.displayname)</a>"
                $arrayPolicySetPolicyIdsToLower = @()
                $htPolicySetPolicyRefIds = @{}
                $arrayPolicySetPolicyIdsToLower = foreach ($policySetPolicy in $builtinPolicySetDefinition.properties.policydefinitions) {
                    ($policySetPolicy.policyDefinitionId).ToLower()
                    $htPolicySetPolicyRefIds.($policySetPolicy.policyDefinitionReferenceId) = ($policySetPolicy.policyDefinitionId)
                }
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).PolicySetPolicyIds = $arrayPolicySetPolicyIdsToLower
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).PolicySetPolicyRefIds = $htPolicySetPolicyRefIds
                if ($builtinPolicySetDefinition.Properties.metadata.deprecated -eq $true -or $builtinPolicySetDefinition.Properties.displayname -like "``[Deprecated``]*") {
                    ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Deprecated = $builtinPolicySetDefinition.Properties.metadata.deprecated
                }
                else {
                    ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Deprecated = $false
                }
                if ($builtinPolicySetDefinition.Properties.metadata.preview -eq $true -or $builtinPolicySetDefinition.Properties.displayname -like "``[*Preview``]*") {
                    ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Preview = $builtinPolicySetDefinition.Properties.metadata.preview
                }
                else {
                    ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Preview = $false
                }
                ($script:htCacheDefinitionsPolicySet).(($builtinPolicySetDefinition.Id).ToLower()).Json = $builtinPolicySetDefinition
            }
        }

        if ($builtInCapability -eq 'RoleDefinitions') {
            $currentTask = 'Caching built-in Role definitions'
            #Write-Host " $currentTask"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($azAPICallConf['checkContext'].Subscription.Id)/providers/Microsoft.Authorization/roleDefinitions?api-version=2018-07-01&`$filter=type eq 'BuiltInRole'"
            $method = 'GET'
            $requestRoleDefinitionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

            Write-Host " $($requestRoleDefinitionAPI.Count) built-in Role definitions returned"
            foreach ($roleDefinition in $requestRoleDefinitionAPI) {
                if (
                    (
                        $roleDefinition.properties.permissions.actions -contains 'Microsoft.Authorization/roleassignments/write' -or
                        $roleDefinition.properties.permissions.actions -contains 'Microsoft.Authorization/roleassignments/*' -or
                        $roleDefinition.properties.permissions.actions -contains 'Microsoft.Authorization/*/write' -or
                        $roleDefinition.properties.permissions.actions -contains 'Microsoft.Authorization/*' -or
                        $roleDefinition.properties.permissions.actions -contains '*/write' -or
                        $roleDefinition.properties.permissions.actions -contains '*'
                    ) -and (
                        $roleDefinition.properties.permissions.notActions -notcontains 'Microsoft.Authorization/roleassignments/write' -and
                        $roleDefinition.properties.permissions.notActions -notcontains 'Microsoft.Authorization/roleassignments/*' -and
                        $roleDefinition.properties.permissions.notActions -notcontains 'Microsoft.Authorization/*/write' -and
                        $roleDefinition.properties.permissions.notActions -notcontains 'Microsoft.Authorization/*' -and
                        $roleDefinition.properties.permissions.notActions -notcontains '*/write' -and
                        $roleDefinition.properties.permissions.notActions -notcontains '*'
                    )
                ) {
                    $roleCapable4RoleAssignmentsWrite = $true
                }
                else {
                    $roleCapable4RoleAssignmentsWrite = $false
                }

                    ($script:htCacheDefinitionsRole).($roleDefinition.name) = @{}
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).Id = ($roleDefinition.name)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).Name = ($roleDefinition.properties.roleName)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).IsCustom = $false
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).AssignableScopes = ($roleDefinition.properties.assignableScopes)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).Actions = ($roleDefinition.properties.permissions.actions)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).NotActions = ($roleDefinition.properties.permissions.notActions)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).DataActions = ($roleDefinition.properties.permissions.dataActions)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).NotDataActions = ($roleDefinition.properties.permissions.notDataActions)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).Json = ($roleDefinition.properties)
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).LinkToAzAdvertizer = "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azrolesadvertizer/$($roleDefinition.name).html`" target=`"_blank`" rel=`"noopener`">$($roleDefinition.properties.roleName)</a>"
                    ($script:htCacheDefinitionsRole).($roleDefinition.name).RoleCanDoRoleAssignments = $roleCapable4RoleAssignmentsWrite
            }
        }
    }

    $script:builtInPolicyDefinitionsCount = $script:htCacheDefinitionsPolicy.Keys.Count

    $endDefinitionsCaching = Get-Date
    Write-Host "Caching built-in definitions duration: $((NEW-TIMESPAN -Start $startDefinitionsCaching -End $endDefinitionsCaching).TotalSeconds) seconds"
}
function checkAzGovVizVersion {
    try {
        $getRepoVersion = Invoke-WebRequest -uri 'https://raw.githubusercontent.com/JulianHayward/Azure-MG-Sub-Governance-Reporting/master/version.txt'
        $azGovVizVersionThis = ($ProductVersion -split "_")[2]
        $script:azGovVizVersionOnRepositoryFull = $getRepoVersion.Content -replace "`n"
        $azGovVizVersionOnRepository = ($azGovVizVersionOnRepositoryFull -split "_")[2]
        $script:azGovVizNewerVersionAvailable = $false
        if ([int]$azGovVizVersionOnRepository -gt [int]$azGovVizVersionThis) {
            $script:azGovVizNewerVersionAvailable = $true
            $script:azGovVizNewerVersionAvailableHTML = '<span style="color:#FF5733; font-weight:bold">Get the latest AzGovViz version (' + $azGovVizVersionOnRepositoryFull + ')!</span> <a href="https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting/blob/master/history.md" target="_blank"><i class="fa fa-external-link" aria-hidden="true"></i></a>'
        }
    }
    catch {
        #skip
    }
}
function createTagList {
    $startTagListArray = Get-Date
    Write-Host 'Creating TagList array'

    $tagsSubRgResCount = ($htAllTagList.'AllScopes'.Keys).Count
    $tagsSubsriptionCount = ($htAllTagList.'Subscription'.Keys).Count
    $tagsResourceGroupCount = ($htAllTagList.'ResourceGroup'.Keys).Count
    $tagsResourceCount = ($htAllTagList.'Resource'.Keys).Count
    Write-Host " Total Number of ALL unique Tag Names: $tagsSubRgResCount"
    Write-Host " Total Number of Subscription unique Tag Names: $tagsSubsriptionCount"
    Write-Host " Total Number of ResourceGroup unique Tag Names: $tagsResourceGroupCount"
    Write-Host " Total Number of Resource unique Tag Names: $tagsResourceCount"

    foreach ($tagScope in $htAllTagList.keys) {
        foreach ($tagScopeTagName in $htAllTagList.($tagScope).keys) {
            $null = $script:arrayTagList.Add([PSCustomObject]@{
                    Scope    = $tagScope
                    TagName  = ($tagScopeTagName)
                    TagCount = $htAllTagList.($tagScope).($tagScopeTagName)
                })
        }
    }
    $endTagListArray = Get-Date
    Write-Host "Creating TagList array duration: $((NEW-TIMESPAN -Start $startTagListArray -End $endTagListArray).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startTagListArray -End $endTagListArray).TotalSeconds) seconds)"
}
function detailSubscriptions {
    #API in rare cases returns duplicates, therefor sorting unique (id)
    $childrenSubscriptions = $arrayEntitiesFromAPI.where( { $_.properties.parentNameChain -contains $ManagementGroupID -and $_.type -eq '/subscriptions' } ) | Sort-Object -Property id -Unique
    $script:childrenSubscriptionsCount = ($childrenSubscriptions).Count
    $script:subsToProcessInCustomDataCollection = [System.Collections.ArrayList]@()
    foreach ($childrenSubscription in $childrenSubscriptions) {

        $sub = $htAllSubscriptionsFromAPI.($childrenSubscription.name)
        if ($sub.subDetails.subscriptionPolicies.quotaId.startswith('AAD_', 'CurrentCultureIgnoreCase') -or $sub.subDetails.state -ne 'Enabled') {
            if (($sub.subDetails.subscriptionPolicies.quotaId).startswith('AAD_', 'CurrentCultureIgnoreCase')) {
                $null = $script:outOfScopeSubscriptions.Add([PSCustomObject]@{
                        subscriptionId      = $childrenSubscription.name
                        subscriptionName    = $childrenSubscription.properties.displayName
                        outOfScopeReason    = "QuotaId: AAD_ (State: $($sub.subDetails.state))"
                        ManagementGroupId   = $htSubscriptionsMgPath.($childrenSubscription.name).Parent
                        ManagementGroupName = $htSubscriptionsMgPath.($childrenSubscription.name).ParentName
                        Level               = $htSubscriptionsMgPath.($childrenSubscription.name).level
                    })
            }
            if ($sub.subDetails.state -ne 'Enabled') {
                $null = $script:outOfScopeSubscriptions.Add([PSCustomObject]@{
                        subscriptionId      = $childrenSubscription.name
                        subscriptionName    = $childrenSubscription.properties.displayName
                        outOfScopeReason    = "State: $($sub.subDetails.state)"
                        ManagementGroupId   = $htSubscriptionsMgPath.($childrenSubscription.name).Parent
                        ManagementGroupName = $htSubscriptionsMgPath.($childrenSubscription.name).ParentName
                        Level               = $htSubscriptionsMgPath.($childrenSubscription.name).level
                    })
            }
        }
        else {
            if ($SubscriptionQuotaIdWhitelist[0] -ne 'undefined') {
                $whitelistMatched = 'unknown'
                foreach ($subscriptionQuotaIdWhitelistQuotaId in $SubscriptionQuotaIdWhitelist) {
                    if (($sub.subDetails.subscriptionPolicies.quotaId).startswith($subscriptionQuotaIdWhitelistQuotaId, 'CurrentCultureIgnoreCase')) {
                        $whitelistMatched = 'inWhitelist'
                    }
                }

                if ($whitelistMatched -eq 'inWhitelist') {
                    #write-host "$($childrenSubscription.properties.displayName) in whitelist"
                    $null = $script:subsToProcessInCustomDataCollection.Add([PSCustomObject]@{
                            subscriptionId      = $childrenSubscription.name
                            subscriptionName    = $childrenSubscription.properties.displayName
                            subscriptionQuotaId = $sub.subDetails.subscriptionPolicies.quotaId
                        })
                }
                else {
                    #Write-Host " preCustomDataCollection: $($childrenSubscription.properties.displayName) ($($childrenSubscription.name)) Subscription Quota Id: $($sub.subDetails.subscriptionPolicies.quotaId) is out of scope for AzGovViz (not in Whitelist)"
                    $null = $script:outOfScopeSubscriptions.Add([PSCustomObject]@{
                            subscriptionId      = $childrenSubscription.name
                            subscriptionName    = $childrenSubscription.properties.displayName
                            outOfScopeReason    = "QuotaId: '$($sub.subDetails.subscriptionPolicies.quotaId)' not in Whitelist"
                            ManagementGroupId   = $htSubscriptionsMgPath.($childrenSubscription.name).Parent
                            ManagementGroupName = $htSubscriptionsMgPath.($childrenSubscription.name).ParentName
                            Level               = $htSubscriptionsMgPath.($childrenSubscription.name).level
                        })
                }
            }
            else {
                $null = $script:subsToProcessInCustomDataCollection.Add([PSCustomObject]@{
                        subscriptionId      = $childrenSubscription.name
                        subscriptionName    = $childrenSubscription.properties.displayName
                        subscriptionQuotaId = $sub.subDetails.subscriptionPolicies.quotaId
                    })
            }
        }
    }
    $script:subsToProcessInCustomDataCollectionCount = ($subsToProcessInCustomDataCollection).Count
}
function exportBaseCSV {
    Write-Host "Exporting CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName).csv'"
    $startBuildCSV = Get-Date

    $outprops = $newtable[0].PSObject.Properties.Name
    $outprops.Set($outprops.IndexOf('PolicyAssignmentNotScopes'), @{L = 'PolicyAssignmentNotScopes'; E = { ($_.PolicyAssignmentNotScopes -join "$CsvDelimiterOpposite ") } })
    if ($CsvExportUseQuotesAsNeeded) {
        $newTable | Sort-Object -Property level, mgId, SubscriptionId, PolicyAssignmentId, RoleAssignmentId, BlueprintId, BlueprintAssignmentId | Select-Object -Property $outprops -ExcludeProperty PolicyAssignmentParameters | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).csv" -Delimiter "$csvDelimiter" -NoTypeInformation  -UseQuotes AsNeeded
    }
    else {
        $newTable | Sort-Object -Property level, mgId, SubscriptionId, PolicyAssignmentId, RoleAssignmentId, BlueprintId, BlueprintAssignmentId | Select-Object -Property $outprops -ExcludeProperty PolicyAssignmentParameters | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).csv" -Delimiter "$csvDelimiter" -NoTypeInformation
    }

    $endBuildCSV = Get-Date
    Write-Host "Exporting CSV total duration: $((NEW-TIMESPAN -Start $startBuildCSV -End $endBuildCSV).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startBuildCSV -End $endBuildCSV).TotalSeconds) seconds)"
}
function getConsumption {

    function addToAllConsumptionData {
        [CmdletBinding()]Param(
            [Parameter(Mandatory)]
            [object]
            $consumptiondataFromAPI
        )

        foreach ($consumptionline in $consumptiondataFromAPI.properties.rows) {
            $hlper = $htSubscriptionsMgPath.($consumptionline[1])
            $null = $script:allConsumptionData.Add([PSCustomObject]@{
                    "$($consumptiondataFromAPI.properties.columns.name[0])" = $consumptionline[0]
                    "$($consumptiondataFromAPI.properties.columns.name[1])" = $consumptionline[1]
                    SubscriptionName                                        = $hlper.DisplayName
                    SubscriptionMgPath                                      = $hlper.ParentNameChainDelimited
                    "$($consumptiondataFromAPI.properties.columns.name[2])" = $consumptionline[2]
                    "$($consumptiondataFromAPI.properties.columns.name[3])" = $consumptionline[3]
                    "$($consumptiondataFromAPI.properties.columns.name[4])" = $consumptionline[4]
                    "$($consumptiondataFromAPI.properties.columns.name[5])" = $consumptionline[5]
                    "$($consumptiondataFromAPI.properties.columns.name[6])" = $consumptionline[6]
                })
        }
    }

    $startConsumptionData = Get-Date

    #cost only for whitelisted quotaId
    if ($SubscriptionQuotaIdWhitelist[0] -ne 'undefined') {
        if ($subsToProcessInCustomDataCollectionCount -gt 0) {
            #region mgScopeWhitelisted
            #$subscriptionIdsOptimizedForBody = '"{0}"' -f ($subsToProcessInCustomDataCollection.subscriptionId -join '","')
            $currenttask = "Getting Consumption data (scope MG '$($ManagementGroupId)') for $($subsToProcessInCustomDataCollectionCount) Subscriptions (QuotaId Whitelist: '$($SubscriptionQuotaIdWhitelist -join ', ')') for period $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)"
            Write-Host "$currentTask"
            #https://docs.microsoft.com/en-us/rest/api/cost-management/query/usage
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)/providers/Microsoft.CostManagement/query?api-version=2019-11-01&`$top=5000"
            $method = 'POST'

            $counterBatch = [PSCustomObject] @{ Value = 0 }
            $batchSize = 100
            $subscriptionsBatch = ($subsToProcessInCustomDataCollection | Sort-Object -Property subscriptionQuotaId) | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }
            $batchCnt = 0

            foreach ($batch in $subscriptionsBatch) {
                $batchCnt++
                $subscriptionIdsOptimizedForBody = '"{0}"' -f (($batch.Group).subscriptionId -join '","')
                $currenttask = "Getting Consumption data #batch$($batchCnt)/$(($subscriptionsBatch | Measure-Object).Count) (scope MG '$($ManagementGroupId)') for $(($batch.Group).Count) Subscriptions (QuotaId Whitelist: '$($SubscriptionQuotaIdWhitelist -join ', ')') for period $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)"
                Write-Host "$currentTask" -ForegroundColor Cyan

                $body = @"
{
"type": "ActualCost",
"dataset": {
    "granularity": "none",
    "filter": {
        "dimensions": {
            "name": "SubscriptionId",
            "operator": "In",
            "values": [
                $($subscriptionIdsOptimizedForBody)
            ]
        }
    },
    "aggregation": {
        "totalCost": {
            "name": "PreTaxCost",
            "function": "Sum"
        }
    },
    "grouping": [
        {
            "type": "Dimension",
            "name": "SubscriptionId"
        },
        {
            "type": "Dimension",
            "name": "ResourceId"
        },
        {
            "type": "Dimension",
            "name": "ResourceType"
        },
        {
            "type": "Dimension",
            "name": "MeterCategory"
        },
        {
            "type": "Dimension",
            "name": "ChargeType"
        }
    ]
},
"timeframe": "Custom",
"timeperiod": {
    "from": "$($azureConsumptionStartDate)",
    "to": "$($azureConsumptionEndDate)"
}
}
"@

                $mgConsumptionData = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask -listenOn 'ContentProperties'
                #endregion mgScopeWhitelisted

                <#test
                #$mgConsumptionData = "OfferNotSupported"
                if ($batchCnt -eq 1){
                    $mgConsumptionData = "OfferNotSupported"
                }
                #>

                if ($mgConsumptionData -eq 'Unauthorized' -or $mgConsumptionData -eq 'OfferNotSupported' -or $mgConsumptionData -eq 'NoValidSubscriptions') {
                    if (-not $script:htConsumptionExceptionLog.Mg.($ManagementGroupId)) {
                        $script:htConsumptionExceptionLog.Mg.($ManagementGroupId) = @{}
                    }
                    $script:htConsumptionExceptionLog.Mg.($ManagementGroupId).($batchCnt) = @{}
                    $script:htConsumptionExceptionLog.Mg.($ManagementGroupId).($batchCnt).Exception = $mgConsumptionData
                    $script:htConsumptionExceptionLog.Mg.($ManagementGroupId).($batchCnt).Subscriptions = ($batch.Group).subscriptionId
                    Write-Host " Switching to 'foreach Subscription' Subscription scope mode. Getting Consumption data #batch$($batchCnt) using Management Group scope failed."
                    #region subScopewhitelisted
                    $body = @"
{
"type": "ActualCost",
"dataset": {
    "granularity": "none",
    "aggregation": {
        "totalCost": {
            "name": "PreTaxCost",
            "function": "Sum"
        }
    },
    "grouping": [
        {
            "type": "Dimension",
            "name": "SubscriptionId"
        },
        {
            "type": "Dimension",
            "name": "ResourceId"
        },
        {
            "type": "Dimension",
            "name": "ResourceType"
        },
        {
            "type": "Dimension",
            "name": "MeterCategory"
        },
        {
            "type": "Dimension",
            "name": "ChargeType"
        }
    ]
},
"timeframe": "Custom",
"timeperiod": {
    "from": "$($azureConsumptionStartDate)",
    "to": "$($azureConsumptionEndDate)"
}
}
"@
                    $funcAddToAllConsumptionData = $function:addToAllConsumptionData.ToString()
                    $batch.Group | ForEach-Object -Parallel {
                        $subIdToProcess = $_.subscriptionId
                        $subNameToProcess = $_.subscriptionName
                        $subscriptionQuotaIdToProcess = $_.subscriptionQuotaId
                        #region UsingVARs
                        $body = $using:body
                        $azureConsumptionStartDate = $using:azureConsumptionStartDate
                        $azureConsumptionEndDate = $using:azureConsumptionEndDate
                        $SubscriptionQuotaIdWhitelist = $using:SubscriptionQuotaIdWhitelist
                        #fromOtherFunctions
                        $azAPICallConf = $using:azAPICallConf
                        $scriptPath = $using:ScriptPath
                        #Array&HTs
                        $allConsumptionData = $using:allConsumptionData
                        $htSubscriptionsMgPath = $using:htSubscriptionsMgPath
                        $htAllSubscriptionsFromAPI = $using:htAllSubscriptionsFromAPI
                        $htConsumptionExceptionLog = $using:htConsumptionExceptionLog
                        #other
                        $function:addToAllConsumptionData = $using:funcAddToAllConsumptionData
                        #endregion UsingVARs

                        $currentTask = "  Getting Consumption data (scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess)) (whitelist))"
                        #test
                        write-host $currentTask
                        #https://docs.microsoft.com/en-us/rest/api/cost-management/query/usage
                        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($subIdToProcess)/providers/Microsoft.CostManagement/query?api-version=2019-11-01&`$top=5000"
                        $method = 'POST'
                        $subConsumptionData = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask -listenOn 'ContentProperties'
                        if ($subConsumptionData -eq 'Unauthorized' -or $subConsumptionData -eq 'OfferNotSupported' -or $subConsumptionData -eq 'InvalidQueryDefinition' -or $subConsumptionData -eq 'NonValidWebDirectAIRSOfferType' -or $subConsumptionData -eq 'NotFoundNotSupported' -or $subConsumptionData -eq 'IndirectCostDisabled') {
                            Write-Host "   Failed ($subConsumptionData) - Getting Consumption data (scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess)) (whitelist))"
                            $hlper = $htAllSubscriptionsFromAPI.($subIdToProcess).subDetails
                            $hlper2 = $htSubscriptionsMgPath.($subIdToProcess)
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess) = @{}
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).Exception = $subConsumptionData
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).SubscriptionId = $subIdToProcess
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).SubscriptionName = $hlper.displayName
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).QuotaId = $hlper.subscriptionPolicies.quotaId
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).mgPath = $hlper2.ParentNameChainDelimited
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).mgParent = $hlper2.Parent
                            Continue
                        }
                        else {
                            Write-Host "   $($subConsumptionData.Count) Consumption data entries ((scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess))))"
                            if ($subConsumptionData.Count -gt 0) {
                                addToAllConsumptionData -consumptiondataFromAPI $subConsumptionData
                                <#
                                foreach ($consumptionEntry in $subConsumptionData) {
                                    if ($consumptionEntry.PreTaxCost -ne 0) {
                                        $null = $script:allConsumptionData.Add($consumptionEntry)
                                    }
                                }
                                #>

                            }
                        }
                    } -ThrottleLimit $ThrottleLimit
                    #endregion subScopewhitelisted
                }
                else {
                    Write-Host " $($mgConsumptionData.Count) Consumption data entries"
                    if ($mgConsumptionData.Count -gt 0) {
                        addToAllConsumptionData -consumptiondataFromAPI $mgConsumptionData
                        <#
                        foreach ($consumptionEntry in $mgConsumptionData) {
                            if ($consumptionEntry.PreTaxCost -ne 0) {
                                $null = $script:allConsumptionData.Add($consumptionEntry)
                            }
                        }
                        #>
                    }
                }
            }
        }
        else {
            $detailShowStopperResult = 'NoWhitelistSubscriptionsPresent'
            Write-Host ' No Subscriptions matching whitelist present, skipping Consumption data processing'
            #Ã¼berprÃ¼fen
        }
    }
    else {

        if ($subsToProcessInCustomDataCollectionCount -gt 0) {
            #region mgScope
            $currenttask = "Getting Consumption data (scope MG '$($ManagementGroupId)') for period $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)"
            Write-Host "$currentTask"
            #https://docs.microsoft.com/en-us/rest/api/cost-management/query/usage
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)/providers/Microsoft.CostManagement/query?api-version=2019-11-01&`$top=5000"
            $method = 'POST'
            $body = @"
{
    "type": "ActualCost",
    "dataset": {
        "granularity": "none",
        "aggregation": {
            "totalCost": {
                "name": "PreTaxCost",
                "function": "Sum"
            }
        },
        "grouping": [
            {
                "type": "Dimension",
                "name": "SubscriptionId"
            },
            {
                "type": "Dimension",
                "name": "ResourceId"
            },
            {
                "type": "Dimension",
                "name": "ResourceType"
            },
            {
                "type": "Dimension",
                "name": "MeterCategory"
            },
            {
                "type": "Dimension",
                "name": "ChargeType"
            }
        ]
    },
    "timeframe": "Custom",
    "timeperiod": {
        "from": "$($azureConsumptionStartDate)",
        "to": "$($azureConsumptionEndDate)"
    }
}
"@
            #$script:allConsumptionData = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask -listenOn 'ContentProperties'
            $allConsumptionDataAPIResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask -listenOn 'ContentProperties'
            #endregion mgScope

            #test
            #$allConsumptionData = "OfferNotSupported"

            if ($allConsumptionDataAPIResult -eq 'AccountCostDisabled' <#-or $allConsumptionDataAPIResult -eq 'NoValidSubscriptions'#>) {
                if ($allConsumptionDataAPIResult -eq 'AccountCostDisabled') {
                    $detailShowStopperResult = $allConsumptionDataAPIResult
                }
                <#if ($allConsumptionDataAPIResult -eq 'NoValidSubscriptions') {
                    $detailShowStopperResult = $allConsumptionDataAPIResult
                }#>
            }
            else {
                if ($allConsumptionDataAPIResult -eq 'Unauthorized' -or $allConsumptionDataAPIResult -eq 'OfferNotSupported' -or $allConsumptionDataAPIResult -eq 'NoValidSubscriptions') {
                    $script:htConsumptionExceptionLog.Mg.($ManagementGroupId) = @{}
                    $script:htConsumptionExceptionLog.Mg.($ManagementGroupId).Exception = $allConsumptionDataAPIResult
                    Write-Host " Switching to 'foreach Subscription' mode. Getting Consumption data using Management Group scope failed."
                    #region subScope
                    $body = @"
{
    "type": "ActualCost",
    "dataset": {
        "granularity": "none",
        "aggregation": {
            "totalCost": {
                "name": "PreTaxCost",
                "function": "Sum"
            }
        },
        "grouping": [
            {
                "type": "Dimension",
                "name": "SubscriptionId"
            },
            {
                "type": "Dimension",
                "name": "ResourceId"
            },
            {
                "type": "Dimension",
                "name": "ResourceType"
            },
            {
                "type": "Dimension",
                "name": "MeterCategory"
            },
            {
                "type": "Dimension",
                "name": "ChargeType"
            }
        ]
    },
    "timeframe": "Custom",
    "timeperiod": {
        "from": "$($azureConsumptionStartDate)",
        "to": "$($azureConsumptionEndDate)"
    }
}
"@

                    $funcAddToAllConsumptionData = $function:addToAllConsumptionData.ToString()
                    $subsToProcessInCustomDataCollection | ForEach-Object -Parallel {
                        $subIdToProcess = $_.subscriptionId
                        $subNameToProcess = $_.subscriptionName
                        $subscriptionQuotaIdToProcess = $_.subscriptionQuotaId
                        #region UsingVARs
                        $body = $using:body
                        $azureConsumptionStartDate = $using:azureConsumptionStartDate
                        $azureConsumptionEndDate = $using:azureConsumptionEndDate
                        #fromOtherFunctions
                        $azAPICallConf = $using:azAPICallConf
                        $scriptPath = $using:ScriptPath
                        #Array&HTs
                        $htSubscriptionsMgPath = $using:htSubscriptionsMgPath
                        $htAllSubscriptionsFromAPI = $using:htAllSubscriptionsFromAPI
                        $allConsumptionData = $using:allConsumptionData
                        $htConsumptionExceptionLog = $using:htConsumptionExceptionLog
                        #other
                        $function:addToAllConsumptionData = $using:funcAddToAllConsumptionData
                        #endregion UsingVARs

                        $currentTask = "  Getting Consumption data (scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess)))"
                        #test
                        write-host $currentTask
                        #https://docs.microsoft.com/en-us/rest/api/cost-management/query/usage
                        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($subIdToProcess)/providers/Microsoft.CostManagement/query?api-version=2019-11-01&`$top=5000"
                        $method = 'POST'
                        $subConsumptionData = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask -listenOn 'ContentProperties'
                        if ($subConsumptionData -eq 'Unauthorized' -or $subConsumptionData -eq 'OfferNotSupported' -or $subConsumptionData -eq 'InvalidQueryDefinition' -or $subConsumptionData -eq 'NonValidWebDirectAIRSOfferType' -or $subConsumptionData -eq 'NotFoundNotSupported' -or $subConsumptionData -eq 'IndirectCostDisabled') {
                            Write-Host "   Failed ($subConsumptionData) - Getting Consumption data (scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess)))"
                            $hlper = $htAllSubscriptionsFromAPI.($subIdToProcess).subDetails
                            $hlper2 = $htSubscriptionsMgPath.($subIdToProcess)
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess) = @{}
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).Exception = $subConsumptionData
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).SubscriptionId = $subIdToProcess
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).SubscriptionName = $hlper.displayName
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).QuotaId = $hlper.subscriptionPolicies.quotaId
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).mgPath = $hlper2.ParentNameChainDelimited
                            $script:htConsumptionExceptionLog.Sub.($subIdToProcess).mgParent = $hlper2.Parent
                            Continue
                        }
                        else {
                            Write-Host "   $($subConsumptionData.Count) Consumption data entries (scope Sub $($subNameToProcess) '$($subIdToProcess)' ($($subscriptionQuotaIdToProcess)))"
                            if ($subConsumptionData.Count -gt 0) {
                                addToAllConsumptionData -consumptiondataFromAPI $subConsumptionData
                                <#
                            foreach ($consumptionEntry in $subConsumptionData) {
                                if ($consumptionEntry.PreTaxCost -ne 0) {
                                    $null = $script:allConsumptionData.Add($consumptionEntry)
                                }
                            }
                            #>
                            }
                        }
                    } -ThrottleLimit $ThrottleLimit
                    #endregion subScope
                }
                else {
                    Write-Host " $($allConsumptionDataAPIResult.properties.rows.Count) Consumption data entries"
                    if ($allConsumptionDataAPIResult.properties.rows.Count -gt 0) {
                        addToAllConsumptionData -consumptiondataFromAPI $allConsumptionDataAPIResult
                    }
                }
            }
        }
        else {
            $detailShowStopperResult = 'NoSubscriptionsPresent'
            Write-Host ' No Subscriptions present, skipping Consumption data processing'
        }
    }

    if ($detailShowStopperResult -eq 'AccountCostDisabled' -or $detailShowStopperResult -eq 'NoValidSubscriptions' -or $detailShowStopperResult -eq 'NoWhitelistSubscriptionsPresent' -or $detailShowStopperResult -eq 'NoSubscriptionsPresent') {
        if ($detailShowStopperResult -eq 'AccountCostDisabled') {
            Write-Host ' Seems Access to cost data has been disabled for this Account - skipping CostManagement'
        }
        if ($detailShowStopperResult -eq 'NoValidSubscriptions') {
            Write-Host ' Seems there are no valid Subscriptions present - skipping CostManagement'
        }
        if ($detailShowStopperResult -eq 'NoWhitelistSubscriptionsPresent') {
            Write-Host " Seems there are no Subscriptions present that match the whitelist ($($SubscriptionQuotaIdWhitelist -join ', ')) - skipping CostManagement"
        }
        if ($detailShowStopperResult -eq 'NoSubscriptionsPresent') {
            Write-Host ' Seems there are no Subscriptions present - skipping CostManagement'
        }
        Write-Host " Action: Setting switch parameter 'DoAzureConsumption' to false"
        $azAPICallConf['htParameters'].DoAzureConsumption = $false
    }
    else {
        Write-Host ' Checking returned Consumption data'
        $script:allConsumptionDataCount = $allConsumptionData.Count

        if ($allConsumptionDataCount -gt 0) {

            $script:allConsumptionData = $allConsumptionData.where( { $_.PreTaxCost -ne 0 } )
            $script:allConsumptionDataCount = $allConsumptionData.Count

            if ($allConsumptionDataCount -gt 0) {
                Write-Host "  $($allConsumptionDataCount) relevant Consumption data entries"

                $script:consumptionData = $allConsumptionData
                $script:consumptionDataGroupedByCurrency = $consumptionData | Group-Object -property Currency

                foreach ($currency in $consumptionDataGroupedByCurrency) {

                    #subscriptions
                    $groupAllConsumptionDataPerCurrencyBySubscriptionId = $currency.group | Group-Object -Property SubscriptionId
                    foreach ($subscriptionId in $groupAllConsumptionDataPerCurrencyBySubscriptionId) {

                        $subTotalCost = ($subscriptionId.Group.PreTaxCost | Measure-Object -Sum).Sum
                        $script:htAzureConsumptionSubscriptions.($subscriptionId.Name) = @{}
                        $script:htAzureConsumptionSubscriptions.($subscriptionId.Name).ConsumptionData = $subscriptionId.group
                        $script:htAzureConsumptionSubscriptions.($subscriptionId.Name).TotalCost = $subTotalCost
                        $script:htAzureConsumptionSubscriptions.($subscriptionId.Name).Currency = $currency.Name
                        $resourceTypes = $subscriptionId.Group.ResourceType | Sort-Object -Unique

                        foreach ($parentMg in $htSubscriptionsMgPath.($subscriptionId.Name).ParentNameChain) {

                            if (-not $htManagementGroupsCost.($parentMg)) {
                                $script:htManagementGroupsCost.($parentMg) = @{}
                                $script:htManagementGroupsCost.($parentMg).currencies = $currency.Name
                                $script:htManagementGroupsCost.($parentMg)."mgTotalCost_$($currency.Name)" = $subTotalCost #[decimal]$subTotalCost
                                $script:htManagementGroupsCost.($parentMg)."resourcesThatGeneratedCost_$($currency.Name)" = ($subscriptionId.Group.ResourceId | Sort-Object -Unique | Measure-Object).Count
                                $script:htManagementGroupsCost.($parentMg).resourcesThatGeneratedCostCurrencyIndependent = ($subscriptionId.Group.ResourceId | Sort-Object -Unique | Measure-Object).Count
                                $script:htManagementGroupsCost.($parentMg)."subscriptionsThatGeneratedCost_$($currency.Name)" = 1
                                $script:htManagementGroupsCost.($parentMg).subscriptionsThatGeneratedCostCurrencyIndependent = 1
                                $script:htManagementGroupsCost.($parentMg)."resourceTypesThatGeneratedCost_$($currency.Name)" = $resourceTypes
                                $script:htManagementGroupsCost.($parentMg).resourceTypesThatGeneratedCostCurrencyIndependent = $resourceTypes
                                $script:htManagementGroupsCost.($parentMg)."consumptionDataSubscriptions_$($currency.Name)" = $subscriptionId.group
                                $script:htManagementGroupsCost.($parentMg).consumptionDataSubscriptions = $subscriptionId.group
                            }
                            else {
                                $newMgTotalCost = $htManagementGroupsCost.($parentMg)."mgTotalCost_$($currency.Name)" + $subTotalCost #[decimal]$subTotalCost
                                $script:htManagementGroupsCost.($parentMg)."mgTotalCost_$($currency.Name)" = $newMgTotalCost #[decimal]$newMgTotalCost

                                $currencies = [array]$htManagementGroupsCost.($parentMg).currencies
                                if ($currencies -notcontains $currency.Name) {
                                    $currencies += $currency.Name
                                    $script:htManagementGroupsCost.($parentMg).currencies = $currencies
                                }

                                #currency based
                                $resourcesThatGeneratedCost = $htManagementGroupsCost.($parentMg)."resourcesThatGeneratedCost_$($currency.Name)" + ($subscriptionId.Group.ResourceId | Sort-Object -Unique | Measure-Object).Count
                                $script:htManagementGroupsCost.($parentMg)."resourcesThatGeneratedCost_$($currency.Name)" = $resourcesThatGeneratedCost

                                $subscriptionsThatGeneratedCost = $htManagementGroupsCost.($parentMg)."subscriptionsThatGeneratedCost_$($currency.Name)" + 1
                                $script:htManagementGroupsCost.($parentMg)."subscriptionsThatGeneratedCost_$($currency.Name)" = $subscriptionsThatGeneratedCost

                                $consumptionDataSubscriptions = $htManagementGroupsCost.($parentMg)."consumptionDataSubscriptions_$($currency.Name)" += $subscriptionId.group
                                $script:htManagementGroupsCost.($parentMg)."consumptionDataSubscriptions_$($currency.Name)" = $consumptionDataSubscriptions

                                $resourceTypesThatGeneratedCost = $htManagementGroupsCost.($parentMg)."resourceTypesThatGeneratedCost_$($currency.Name)"
                                foreach ($resourceType in $resourceTypes) {
                                    if ($resourceTypesThatGeneratedCost -notcontains $resourceType) {
                                        $resourceTypesThatGeneratedCost += $resourceType
                                    }
                                }
                                $script:htManagementGroupsCost.($parentMg)."resourceTypesThatGeneratedCost_$($currency.Name)" = $resourceTypesThatGeneratedCost

                                #currencyIndependent
                                $resourcesThatGeneratedCostCurrencyIndependent = $htManagementGroupsCost.($parentMg).resourcesThatGeneratedCostCurrencyIndependent + ($subscriptionId.Group.ResourceId | Sort-Object -Unique | Measure-Object).Count
                                $script:htManagementGroupsCost.($parentMg).resourcesThatGeneratedCostCurrencyIndependent = $resourcesThatGeneratedCostCurrencyIndependent

                                $subscriptionsThatGeneratedCostCurrencyIndependent = $htManagementGroupsCost.($parentMg).subscriptionsThatGeneratedCostCurrencyIndependent + 1
                                $script:htManagementGroupsCost.($parentMg).subscriptionsThatGeneratedCostCurrencyIndependent = $subscriptionsThatGeneratedCostCurrencyIndependent

                                $consumptionDataSubscriptionsCurrencyIndependent = $htManagementGroupsCost.($parentMg).consumptionDataSubscriptions += $subscriptionId.group
                                $script:htManagementGroupsCost.($parentMg).consumptionDataSubscriptions = $consumptionDataSubscriptionsCurrencyIndependent

                                $resourceTypesThatGeneratedCostCurrencyIndependent = $htManagementGroupsCost.($parentMg).resourceTypesThatGeneratedCostCurrencyIndependent
                                foreach ($resourceType in $resourceTypes) {
                                    if ($resourceTypesThatGeneratedCostCurrencyIndependent -notcontains $resourceType) {
                                        $resourceTypesThatGeneratedCostCurrencyIndependent += $resourceType
                                    }
                                }
                                $script:htManagementGroupsCost.($parentMg).resourceTypesThatGeneratedCostCurrencyIndependent = $resourceTypesThatGeneratedCostCurrencyIndependent
                            }
                        }
                    }

                    $totalCost = 0
                    $script:tenantSummaryConsumptionDataGrouped = $currency.group | Group-Object -property ResourceType, ChargeType, MeterCategory
                    $subsCount = ($tenantSummaryConsumptionDataGrouped.group.subscriptionId | Sort-Object -Unique | Measure-Object).Count
                    $consumedServiceCount = ($tenantSummaryConsumptionDataGrouped.group.ResourceType | Sort-Object -Unique | Measure-Object).Count
                    $resourceCount = ($tenantSummaryConsumptionDataGrouped.group.ResourceId | Sort-Object -Unique | Measure-Object).Count
                    foreach ($consumptionline in $tenantSummaryConsumptionDataGrouped) {

                        $costConsumptionLine = ($consumptionline.group.PreTaxCost | Measure-Object -Sum).Sum

                        if ([math]::Round($costConsumptionLine, 2) -eq 0) {
                            $cost = $costConsumptionLine.ToString('0.0000')
                        }
                        else {
                            $cost = [math]::Round($costConsumptionLine, 2).ToString('0.00')
                        }

                        $null = $script:arrayConsumptionData.Add([PSCustomObject]@{
                                ResourceType                 = ($consumptionline.name).split(', ')[0]
                                ConsumedServiceChargeType    = ($consumptionline.name).split(', ')[1]
                                ConsumedServiceCategory      = ($consumptionline.name).split(', ')[2]
                                ConsumedServiceInstanceCount = $consumptionline.Count
                                ConsumedServiceCost          = $cost #[decimal]$cost
                                ConsumedServiceSubscriptions = ($consumptionline.group.SubscriptionId | Sort-Object -Unique).Count
                                ConsumedServiceCurrency      = $currency.Name
                            })

                        $totalCost = $totalCost + $costConsumptionLine

                    }
                    if ([math]::Round($totalCost, 2) -eq 0) {
                        $totalCost = $totalCost
                    }
                    else {
                        $totalCost = [math]::Round($totalCost, 2).ToString('0.00')
                    }
                    $script:arrayTotalCostSummary += "$($totalCost) $($currency.Name) generated by $($resourceCount) Resources ($($consumedServiceCount) ResourceTypes) in $($subsCount) Subscriptions"
                }
            }
            else {
                Write-Host '  No relevant consumption data entries (0)'
            }
        }

        #region BuildConsumptionCSV
        if (-not $NoAzureConsumptionReportExportToCSV) {
            Write-Host " Exporting Consumption CSV $($outputPath)$($DirectorySeparatorChar)$($fileName)_Consumption.csv"
            $startBuildConsumptionCSV = Get-Date
            if ($CsvExportUseQuotesAsNeeded) {
                $allConsumptionData | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_Consumption.csv" -Delimiter "$csvDelimiter" -NoTypeInformation -UseQuotes AsNeeded
            }
            else {
                $allConsumptionData | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_Consumption.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
            }
            $endBuildConsumptionCSV = Get-Date
            Write-Host " Exporting Consumption CSV total duration: $((NEW-TIMESPAN -Start $startBuildConsumptionCSV -End $endBuildConsumptionCSV).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startBuildConsumptionCSV -End $endBuildConsumptionCSV).TotalSeconds) seconds)"
        }
        #endregion BuildConsumptionCSV
    }
    $endConsumptionData = Get-Date
    Write-Host "Getting Consumption data duration: $((NEW-TIMESPAN -Start $startConsumptionData -End $endConsumptionData).TotalSeconds) seconds"
}
function getDefaultManagementGroup {
    $currentTask = 'Get Default Management Group'
    Write-Host $currentTask
    #https://docs.microsoft.com/en-us/azure/governance/management-groups/how-to/protect-resource-hierarchy#setting---default-management-group
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($azAPICallConf['checkContext'].Tenant.Id)/settings?api-version=2020-02-01"
    $method = 'GET'
    $settingsMG = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    if (($settingsMG).count -gt 0) {
        write-host " default ManagementGroup Id: $($settingsMG.properties.defaultManagementGroup)"
        $script:defaultManagementGroupId = $settingsMG.properties.defaultManagementGroup
        write-host " requireAuthorizationForGroupCreation: $($settingsMG.properties.requireAuthorizationForGroupCreation)"
        $script:requireAuthorizationForGroupCreation = $settingsMG.properties.requireAuthorizationForGroupCreation
    }
    else {
        write-host " default ManagementGroup: $(($azAPICallConf['checkContext']).Tenant.Id) (Tenant Root)"
        $script:defaultManagementGroupId = ($azAPICallConf['checkContext']).Tenant.Id
        $script:requireAuthorizationForGroupCreation = $false
    }
}
function getEntities {
    Write-Host 'Entities'
    $startEntities = Get-Date
    $currentTask = ' Getting Entities'
    Write-Host $currentTask
    #https://management.azure.com/providers/Microsoft.Management/getEntities?api-version=2020-02-01
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/getEntities?api-version=2020-02-01"
    $method = 'POST'
    $script:arrayEntitiesFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    Write-Host "  $($arrayEntitiesFromAPI.Count) Entities returned"

    $endEntities = Get-Date
    Write-Host " Getting Entities duration: $((NEW-TIMESPAN -Start $startEntities -End $endEntities).TotalSeconds) seconds"

    $startEntitiesdata = Get-Date
    Write-Host ' Processing Entities data'
    $script:htSubscriptionsMgPath = @{}
    $script:htManagementGroupsMgPath = @{}
    $script:htEntities = @{}
    $script:htEntitiesPlain = @{}

    foreach ($entity in $arrayEntitiesFromAPI) {
        $script:htEntitiesPlain.($entity.Name) = @{}
        $script:htEntitiesPlain.($entity.Name) = $entity
    }

    foreach ($entity in $arrayEntitiesFromAPI) {
        if ($entity.Type -eq '/subscriptions') {
            $script:htSubscriptionsMgPath.($entity.name) = @{}
            $script:htSubscriptionsMgPath.($entity.name).ParentNameChain = $entity.properties.parentNameChain
            $script:htSubscriptionsMgPath.($entity.name).ParentNameChainDelimited = $entity.properties.parentNameChain -join '/'
            $script:htSubscriptionsMgPath.($entity.name).Parent = $entity.properties.parent.Id -replace '.*/'
            $script:htSubscriptionsMgPath.($entity.name).ParentName = $htEntitiesPlain.($entity.properties.parent.Id -replace '.*/').properties.displayName
            $script:htSubscriptionsMgPath.($entity.name).DisplayName = $entity.properties.displayName
            $array = $entity.properties.parentNameChain
            $array += $entity.name
            $script:htSubscriptionsMgPath.($entity.name).path = $array
            $script:htSubscriptionsMgPath.($entity.name).pathDelimited = $array -join '/'
            $script:htSubscriptionsMgPath.($entity.name).level = (($entity.properties.parentNameChain).Count - 1)
        }
        if ($entity.Type -eq 'Microsoft.Management/managementGroups') {
            if ([string]::IsNullOrEmpty($entity.properties.parent.Id)) {
                $parent = '__TenantRoot__'
            }
            else {
                $parent = $entity.properties.parent.Id -replace '.*/'
            }
            $script:htManagementGroupsMgPath.($entity.name) = @{}
            $script:htManagementGroupsMgPath.($entity.name).ParentNameChain = $entity.properties.parentNameChain
            $script:htManagementGroupsMgPath.($entity.name).ParentNameChainDelimited = $entity.properties.parentNameChain -join '/'
            $script:htManagementGroupsMgPath.($entity.name).ParentNameChainCount = ($entity.properties.parentNameChain | Measure-Object).Count
            $script:htManagementGroupsMgPath.($entity.name).Parent = $parent
            $script:htManagementGroupsMgPath.($entity.name).ChildMgsAll = ($arrayEntitiesFromAPI.where( { $_.Type -eq 'Microsoft.Management/managementGroups' -and $_.properties.ParentNameChain -contains $entity.name } )).Name
            $script:htManagementGroupsMgPath.($entity.name).ChildMgsDirect = ($arrayEntitiesFromAPI.where( { $_.Type -eq 'Microsoft.Management/managementGroups' -and $_.properties.Parent.Id -replace '.*/' -eq $entity.name } )).Name
            $script:htManagementGroupsMgPath.($entity.name).DisplayName = $entity.properties.displayName
            $script:htManagementGroupsMgPath.($entity.name).Id = ($entity.name)
            $array = $entity.properties.parentNameChain
            $array += $entity.name
            $script:htManagementGroupsMgPath.($entity.name).path = $array
            $script:htManagementGroupsMgPath.($entity.name).pathDelimited = $array -join '/'
        }

        $script:htEntities.($entity.name) = @{}
        $script:htEntities.($entity.name).ParentNameChain = $entity.properties.parentNameChain
        $script:htEntities.($entity.name).Parent = $parent
        if ($parent -eq '__TenantRoot__') {
            $parentDisplayName = '__TenantRoot__'
        }
        else {
            $parentDisplayName = $htEntitiesPlain.($htEntities.($entity.name).Parent).properties.displayName
        }
        $script:htEntities.($entity.name).ParentDisplayName = $parentDisplayName
        $script:htEntities.($entity.name).DisplayName = $entity.properties.displayName
        $script:htEntities.($entity.name).Id = $entity.Name
    }

    Write-Host "  $(($htManagementGroupsMgPath.Keys).Count) Management Groups returned"
    Write-Host "  $(($htSubscriptionsMgPath.Keys).Count) Subscriptions returned"

    $endEntitiesdata = Get-Date
    Write-Host " Processing Entities data duration: $((NEW-TIMESPAN -Start $startEntitiesdata -End $endEntitiesdata).TotalSeconds) seconds"

    $script:arrayEntitiesFromAPISubscriptionsCount = ($arrayEntitiesFromAPI.where( { $_.type -eq '/subscriptions' -and $_.properties.parentNameChain -contains $ManagementGroupId } ) | Sort-Object -Property id -Unique).count
    $script:arrayEntitiesFromAPIManagementGroupsCount = ($arrayEntitiesFromAPI.where( { $_.type -eq 'Microsoft.Management/managementGroups' -and $_.properties.parentNameChain -contains $ManagementGroupId } )  | Sort-Object -Property id -Unique).count + 1

    $endEntities = Get-Date
    Write-Host "Processing Entities duration: $((NEW-TIMESPAN -Start $startEntities -End $endEntities).TotalSeconds) seconds"
}
function getFileNaming {
    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions -eq $true) {
        if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $true) {
            $script:fileName = "AzGovViz_HierarchyMapOnly_$($ManagementGroupId)"
        }
        elseif ($azAPICallConf['htParameters'].ManagementGroupsOnly -eq $true) {
            $script:fileName = "AzGovViz_ManagementGroupsOnly_$($ManagementGroupId)"
        }
        else {
            $script:fileName = "AzGovViz_$($ManagementGroupId)"
        }
    }
    else {
        if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $true) {
            $script:fileName = "AzGovViz_HierarchyMapOnly_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)"
        }
        elseif ($azAPICallConf['htParameters'].ManagementGroupsOnly -eq $true) {
            $script:fileName = "AzGovViz_ManagementGroupsOnly_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)"
        }
        else {
            $script:fileName = "AzGovViz_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)"
        }
    }
}

function getGroupmembers($aadGroupId, $aadGroupDisplayName) {
    if (-not $htAADGroupsDetails.($aadGroupId)) {
        $script:htAADGroupsDetails.$aadGroupId = @{}
        $script:htAADGroupsDetails.($aadGroupId).Id = $aadGroupId
        $script:htAADGroupsDetails.($aadGroupId).displayname = $aadGroupDisplayName
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/beta/groups/$($aadGroupId)/transitiveMembers"
        $method = 'GET'
        $aadGroupMembers = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask "getGroupmembers $($aadGroupId)"

        if ($aadGroupMembers -eq 'Request_ResourceNotFound') {
            $null = $script:arrayGroupRequestResourceNotFound.Add([PSCustomObject]@{
                    groupId = $aadGroupId
                })
        }

        $aadGroupMembersAll = ($aadGroupMembers)
        $aadGroupMembersUsers = $aadGroupMembers.where( { $_.'@odata.type' -eq '#microsoft.graph.user' } )
        $aadGroupMembersGroups = $aadGroupMembers.where( { $_.'@odata.type' -eq '#microsoft.graph.group' } )
        $aadGroupMembersServicePrincipals = $aadGroupMembers.where( { $_.'@odata.type' -eq '#microsoft.graph.servicePrincipal' } )

        $aadGroupMembersAllCount = $aadGroupMembersAll.count
        $aadGroupMembersUsersCount = $aadGroupMembersUsers.count
        $aadGroupMembersGroupsCount = $aadGroupMembersGroups.count
        $aadGroupMembersServicePrincipalsCount = $aadGroupMembersServicePrincipals.count
        #for SP stuff
        if ($aadGroupMembersServicePrincipalsCount -gt 0) {
            foreach ($identity in $aadGroupMembersServicePrincipals) {
                $arrayIdentityObject = [System.Collections.ArrayList]@()
                if ($identity.servicePrincipalType -eq 'Application') {
                    if ($identity.appOwnerOrganizationId -eq $azAPICallConf['checkContext'].Tenant.Id) {
                        $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                type                   = 'ServicePrincipal'
                                spTypeConcatinated     = 'SP APP INT'
                                servicePrincipalType   = $identity.servicePrincipalType
                                id                     = $identity.id
                                appid                  = $identity.appId
                                displayName            = $identity.displayName
                                appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                alternativeNames       = $identity.alternativeNames
                            })
                    }
                    else {
                        $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                type                   = 'ServicePrincipal'
                                spTypeConcatinated     = 'SP APP EXT'
                                servicePrincipalType   = $identity.servicePrincipalType
                                id                     = $identity.id
                                appid                  = $identity.appId
                                displayName            = $identity.displayName
                                appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                alternativeNames       = $identity.alternativeNames
                            })
                    }
                }
                elseif ($identity.servicePrincipalType -eq 'ManagedIdentity') {
                    $miType = 'unknown'
                    if ($identity.alternativeNames) {
                        foreach ($altName in $identity.alternativeNames) {
                            if ($altName -like 'isExplicit=*') {
                                $splitAltName = $altName.split('=')
                                if ($splitAltName[1] -eq 'true') {
                                    $miType = 'Usr'
                                }
                                if ($splitAltName[1] -eq 'false') {
                                    $miType = 'Sys'
                                }
                            }
                        }
                    }
                    $null = $arrayIdentityObject.Add([PSCustomObject]@{
                            type                   = 'ServicePrincipal'
                            spTypeConcatinated     = "SP MI $miType"
                            servicePrincipalType   = $identity.servicePrincipalType
                            id                     = $identity.id
                            appid                  = $identity.appId
                            displayName            = $identity.displayName
                            appOwnerOrganizationId = $identity.appOwnerOrganizationId
                            alternativeNames       = $identity.alternativeNames
                        })
                }
                else {
                    $null = $arrayIdentityObject.Add([PSCustomObject]@{
                            type                   = 'servicePrincipal'
                            spTypeConcatinated     = "SP $($identity.servicePrincipalType)"
                            servicePrincipalType   = $identity.servicePrincipalType
                            id                     = $identity.id
                            appid                  = $identity.appId
                            displayName            = $identity.displayName
                            appOwnerOrganizationId = $identity.appOwnerOrganizationId
                            alternativeNames       = $identity.alternativeNames
                        })
                }
                if (-not $htServicePrincipals.($identity.id)) {
                    #Write-Host "$($identity.displayName) $($identity.id) added - - - - - - - - "
                    $script:htServicePrincipals.($identity.id) = @{}
                    $script:htServicePrincipals.($identity.id) = $arrayIdentityObject
                }
            }
        }

        #guests
        if ($aadGroupMembersUsersCount -gt 0) {
            $cntx = 0
            $cnty = 0
            foreach ($aadGroupMembersUser in $aadGroupMembersUsers | Sort-Object -Property id -Unique) {
                $cntx++
                if ($aadGroupMembersUser.userType -eq 'Guest') {
                    if (-not $htUserTypesGuest.($aadGroupMembersUser.id)) {
                        $cnty++
                        #Write-Host "$($aadGroupMembersUser.id) is Guest"
                        $script:htUserTypesGuest.($aadGroupMembersUser.id) = @{}
                        $script:htUserTypesGuest.($aadGroupMembersUser.id).userType = 'Guest'
                    }
                    else {
                        #Write-Host "$($aadGroupMembersUser.id) already known as Guest"
                    }
                }
            }
        }

        $script:htAADGroupsDetails.($aadGroupId).MembersAllCount = $aadGroupMembersAllCount
        $script:htAADGroupsDetails.($aadGroupId).MembersUsersCount = $aadGroupMembersUsersCount
        $script:htAADGroupsDetails.($aadGroupId).MembersGroupsCount = $aadGroupMembersGroupsCount
        $script:htAADGroupsDetails.($aadGroupId).MembersServicePrincipalsCount = $aadGroupMembersServicePrincipalsCount

        if ($aadGroupMembersAllCount -gt 0) {
            $script:htAADGroupsDetails.($aadGroupId).MembersAll = $aadGroupMembersAll

            if ($aadGroupMembersUsersCount -gt 0) {
                $script:htAADGroupsDetails.($aadGroupId).MembersUsers = $aadGroupMembersUsers
            }
            if ($aadGroupMembersGroupsCount -gt 0) {
                $script:htAADGroupsDetails.($aadGroupId).MembersGroups = $aadGroupMembersGroups
            }
            if ($aadGroupMembersServicePrincipalsCount -gt 0) {
                $script:htAADGroupsDetails.($aadGroupId).MembersServicePrincipals = $aadGroupMembersServicePrincipals
            }
        }
    }
}
function getMDfCSecureScoreMG {
    $currentTask = 'Getting Microsoft Defender for Cloud Secure Score for Management Groups'
    Write-Host $currentTask
    #ref: https://docs.microsoft.com/en-us/azure/governance/management-groups/resource-graph-samples?tabs=azure-cli#secure-score-per-management-group
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01"
    $method = 'POST'

    $query = @'
        SecurityResources
        | where type == 'microsoft.security/securescores'
        | project subscriptionId,
            subscriptionTotal = iff(properties.score.max == 0, 0.00, round(tolong(properties.weight) * todouble(properties.score.current)/tolong(properties.score.max),2)),
            weight = tolong(iff(properties.weight == 0, 1, properties.weight))
        | join kind=leftouter (
            ResourceContainers
            | where type == 'microsoft.resources/subscriptions' and properties.state == 'Enabled'
            | project subscriptionId, mgChain=properties.managementGroupAncestorsChain )
            on subscriptionId
        | mv-expand mg=mgChain
        | summarize sumSubs = sum(subscriptionTotal), sumWeight = sum(weight), resultsNum = count() by tostring(mg.displayName), mgId = tostring(mg.name)
        | extend secureScore = iff(tolong(resultsNum) == 0, 404.00, round(sumSubs/sumWeight*100,2))
        | project mgDisplayName=mg_displayName, mgId, sumSubs, sumWeight, resultsNum, secureScore
        | order by mgDisplayName asc
'@

    $body = @"
        {
            "query": "$($query)",
            "managementGroups":[
                "$($ManagementGroupId)"
            ]
        }
"@

    $start = Get-Date
    $getMgAscSecureScore = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -body $body -listenOn 'Content'
    $end = Get-Date
    Write-Host " Getting Microsoft Defender for Cloud Secure Score for Management Groups duration: $((NEW-TIMESPAN -Start $start -End $end).TotalSeconds) seconds"
    if ($getMgAscSecureScore) {
        if ($getMgAscSecureScore -eq 'capitulation') {
            Write-Host '  Microsoft Defender for Cloud SecureScore for Management Groups will not be available' -ForegroundColor Yellow
        }
        else {
            foreach ($entry in $getMgAscSecureScore) {
                $script:htMgASCSecureScore.($entry.mgId) = @{}
                if ($entry.secureScore -eq 404) {
                    $script:htMgASCSecureScore.($entry.mgId).SecureScore = 'n/a'
                }
                else {
                    $script:htMgASCSecureScore.($entry.mgId).SecureScore = $entry.secureScore
                }
            }
        }
    }
}
function getOrphanedResources {
    $start = Get-Date
    Write-Host 'Getting orphaned resources (ARG)'

    $queries = [System.Collections.ArrayList]@()
    $intent = 'clean up'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.resources/subscriptions/resourceGroups'
            query     = "ResourceContainers | where type =~ 'microsoft.resources/subscriptions/resourceGroups' | extend rgAndSub = strcat(resourceGroup, '--', subscriptionId) | join kind=leftouter (Resources | extend rgAndSub = strcat(resourceGroup, '--', subscriptionId) | summarize count() by rgAndSub) on rgAndSub | where isnull(count_) | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'misconfiguration'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.network/networkSecurityGroups'
            query     = "Resources | where type =~ 'microsoft.network/networkSecurityGroups' and isnull(properties.networkInterfaces) and isnull(properties.subnets) | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'misconfiguration'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.network/routeTables'
            query     = "resources | where type =~ 'microsoft.network/routeTables' | where isnull(properties.subnets) | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'misconfiguration'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.network/networkInterfaces'
            query     = "Resources | where type =~ 'microsoft.network/networkInterfaces' | where isnull(properties.privateEndpoint) | where isnull(properties.privateLinkService) | where properties.hostedWorkloads == '[]' | where properties !has 'virtualmachine' | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'cost savings'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.compute/disks'
            query     = "Resources | where type =~ 'microsoft.compute/disks' | extend diskState = tostring(properties.diskState) | where managedBy == '' | where not(name endswith '-ASRReplica' or name startswith 'ms-asr-') | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'cost savings'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.network/publicIpAddresses'
            query     = "Resources | where type =~ 'microsoft.network/publicIpAddresses' | where properties.ipConfiguration == '' | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'misconfiguration'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.compute/availabilitySets'
            query     = "Resources | where type =~ 'microsoft.compute/availabilitySets' | where properties.virtualMachines == '[]' | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'misconfiguration'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.network/loadBalancers'
            query     = "Resources | where type =~ 'microsoft.network/loadBalancers' | where properties.backendAddressPools == '[]' | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $intent = 'clean up'
    $null = $queries.Add([PSCustomObject]@{
            queryName = 'microsoft.web/serverfarms'
            query     = "Resources | where type =~ 'microsoft.web/serverfarms' | where properties.numberOfSites == 0 | project type, subscriptionId, Resource=id, Intent='$intent'"
        })

    $queries | foreach-object -Parallel {
        $queryDetail = $_
        $arrayOrphanedResources = $using:arrayOrphanedResources
        $subsToProcessInCustomDataCollection = $using:subsToProcessInCustomDataCollection
        $azAPICallConf = $using:azAPICallConf

        #Batching: https://docs.microsoft.com/en-us/azure/governance/resource-graph/troubleshoot/general#toomanysubscription
        $counterBatch = [PSCustomObject] @{ Value = 0 }
        $batchSize = 1000    
        $subscriptionsBatch = $subsToProcessInCustomDataCollection | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }

        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01"
        $method = "POST"
        foreach ($batch in $subscriptionsBatch) { 
            " Getting orphaned $($queryDetail.queryName) for $($batch.Group.subscriptionId.Count) Subscriptions"
            $subscriptions = '"{0}"' -f ($batch.Group.subscriptionId -join '","')
            $body = @"
{
"query": "$($queryDetail.query)",
"subscriptions": [$($subscriptions)]
}
"@

            $res = (AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -listenOn 'Content' -currentTask "Getting orphaned $($queryDetail.queryName)")
            #Write-Host '$res.count:' $res.count
            if ($res.count -gt 0) {
                foreach ($resource in $res) {
                    $null = $script:arrayOrphanedResources.Add($resource)
                }
            }
        }
    } -ThrottleLimit ($queries.Count)

    if ($arrayOrphanedResources.Count -gt 0) {
        Write-Host " Found $($arrayOrphanedResources.Count) orphaned Resources"
        Write-Host " Exporting OrphanedResources CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourcesOrphaned.csv'"
        $arrayOrphanedResources | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourcesOrphaned.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
    }
    else {
        Write-Host " No orphaned Resources found"
    }

    $end = Get-Date
    Write-Host "Getting orphaned resources (ARG) processing duration: $((NEW-TIMESPAN -Start $start -End $end).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $start -End $end).TotalSeconds) seconds)"
}
function getResourceDiagnosticsCapability {
    Write-Host 'Checking Resource Types Diagnostics capability (1st party only)'
    $startResourceDiagnosticsCheck = Get-Date
    if (($resourcesAll).count -gt 0) {

        $startGroupResourceIdsByType = Get-Date
        $script:resourceTypesUnique = ($resourcesIdsAll | Group-Object -property type)
        $endGroupResourceIdsByType = Get-Date
        Write-Host " GroupResourceIdsByType processing duration: $((NEW-TIMESPAN -Start $startGroupResourceIdsByType -End $endGroupResourceIdsByType).TotalSeconds) seconds)"
        $resourceTypesUniqueCount = ($resourceTypesUnique | Measure-Object).count
        Write-Host " $($resourceTypesUniqueCount) unique Resource Types"
        $script:resourceTypesSummarizedArray = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))

        $script:resourceTypesDiagnosticsArray = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
        $microsoftResourceTypes = $resourceTypesUnique.where({ $_.Name.StartsWith('microsoft') })
        if ($microsoftResourceTypes.Count -gt 0) {
            $microsoftResourceTypes | ForEach-Object -Parallel {
                $resourceTypesUniqueGroup = $_
                $resourcetype = $resourceTypesUniqueGroup.Name
                #region UsingVARs
                #fromOtherFunctions
                $azAPICallConf = $using:azAPICallConf
                $scriptPath = $using:ScriptPath
                #Array&HTs
                $ExcludedResourceTypesDiagnosticsCapable = $using:ExcludedResourceTypesDiagnosticsCapable
                $resourceTypesDiagnosticsArray = $using:resourceTypesDiagnosticsArray
                $htResourceTypesUniqueResource = $using:htResourceTypesUniqueResource
                $resourceTypesSummarizedArray = $using:resourceTypesSummarizedArray
                #endregion UsingVARs
    
                $skipThisResourceType = $false
                if (($ExcludedResourceTypesDiagnosticsCapable).Count -gt 0) {
                    foreach ($excludedResourceType in $ExcludedResourceTypesDiagnosticsCapable) {
                        if ($excludedResourceType -eq $resourcetype) {
                            $skipThisResourceType = $true
                        }
                    }
                }
    
                if ($skipThisResourceType -eq $false) {
                    $resourceCount = $resourceTypesUniqueGroup.Count
    
                    #thx @Jim Britt (Microsoft) https://github.com/JimGBritt/AzurePolicy/tree/master/AzureMonitor/Scripts Create-AzDiagPolicy.ps1
                    $responseJSON = ''
                    $logCategories = @()
                    $metrics = $false
                    $logs = $false
    
                    $resourceAvailability = ($resourceCount - 1)
                    $counterTryForResourceType = 0
                    do {
                        $counterTryForResourceType++
                        if ($resourceCount -gt 1) {
                            $resourceId = $resourceTypesUniqueGroup.Group.Id[$resourceAvailability]
                        }
                        else {
                            $resourceId = $resourceTypesUniqueGroup.Group.Id
                        }
    
                        $resourceAvailability = $resourceAvailability - 1
                        $currentTask = "Checking if ResourceType '$resourceType' is capable for Resource Diagnostics using $counterTryForResourceType ResourceId: '$($resourceId)'"
                        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/$($resourceId)/providers/microsoft.insights/diagnosticSettingsCategories?api-version=2021-05-01-preview"
                        $method = 'GET'
    
                        $responseJSON = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask
                        if ($responseJSON -notlike 'meanwhile_deleted*') {
                            if ($responseJSON -eq 'ResourceTypeOrResourceProviderNotSupported') {
                                Write-Host "  ResourceTypeOrResourceProviderNotSupported | The resource type '$($resourcetype)' does not support diagnostic settings."
    
                            }
                            else {
                                Write-Host "  ResourceTypeSupported | The resource type '$($resourcetype)' supports diagnostic settings."
                            }
                        }
                        else {
                            Write-Host "resId '$resourceId' meanwhile deleted"
                        }
                    }
                    until ($resourceAvailability -lt 0 -or $responseJSON -notlike 'meanwhile_deleted*')
    
                    if ($resourceAvailability -lt 0 -and $responseJSON -like 'meanwhile_deleted*') {
                        Write-Host "tried for all available resourceIds ($($resourceCount)) for resourceType $resourceType, but seems all resources meanwhile have been deleted"
                        $null = $script:resourceTypesDiagnosticsArray.Add([PSCustomObject]@{
                                ResourceType  = $resourcetype
                                Metrics       = "n/a - $responseJSON"
                                Logs          = "n/a - $responseJSON"
                                LogCategories = 'n/a'
                                ResourceCount = $resourceCount
                            })
                    }
                    else {
                        if ($responseJSON) {
                            foreach ($response in $responseJSON) {
                                if ($response.properties.categoryType -eq 'Metrics') {
                                    $metrics = $true
                                }
                                if ($response.properties.categoryType -eq 'Logs') {
                                    $logs = $true
                                    $logCategories += $response.name
                                }
                            }
                        }
    
                        $null = $script:resourceTypesDiagnosticsArray.Add([PSCustomObject]@{
                                ResourceType  = $resourcetype
                                Metrics       = $metrics
                                Logs          = $logs
                                LogCategories = $logCategories
                                ResourceCount = $resourceCount
                            })
                    }
                }
                else {
                    Write-Host "Skipping ResourceType $($resourcetype) as per parameter '-ExcludedResourceTypesDiagnosticsCapable'"
                }
            } -ThrottleLimit $ThrottleLimit
            #[System.GC]::Collect()
        }
        else {
            Write-Host ' No 1st party Resource Types at all'
        }

    }
    else {
        Write-Host ' No Resources at all'
    }
    $endResourceDiagnosticsCheck = Get-Date
    Write-Host "Checking Resource Types Diagnostics capability duration: $((NEW-TIMESPAN -Start $startResourceDiagnosticsCheck -End $endResourceDiagnosticsCheck).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startResourceDiagnosticsCheck -End $endResourceDiagnosticsCheck).TotalSeconds) seconds)"
}
function getSubscriptions {
    $startGetSubscriptions = Get-Date
    $currentTask = 'Getting all Subscriptions'
    Write-Host "$currentTask"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions?api-version=2020-01-01"
    $method = 'GET'
    $requestAllSubscriptionsAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    Write-Host " $($requestAllSubscriptionsAPI.Count) Subscriptions returned"
    foreach ($subscription in $requestAllSubscriptionsAPI) {
        $script:htAllSubscriptionsFromAPI.($subscription.subscriptionId) = @{}
        $script:htAllSubscriptionsFromAPI.($subscription.subscriptionId).subDetails = $subscription
    }

    $endGetSubscriptions = Get-Date
    Write-Host "Getting all Subscriptions duration: $((NEW-TIMESPAN -Start $startGetSubscriptions -End $endGetSubscriptions).TotalSeconds) seconds"
}
function getTenantDetails {
    $currentTask = 'Get Tenant details'
    Write-Host $currentTask
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/tenants?api-version=2020-01-01"
    $method = 'GET'
    $tenantDetailsResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    if (($tenantDetailsResult).count -gt 0) {
        $tenantDetails = $tenantDetailsResult | Where-Object { $_.tenantId -eq ($azAPICallConf['checkContext']).Tenant.Id }
        if ($tenantDetails.displayName) {
            $script:tenantDisplayName = $tenantDetails.displayName
            Write-Host " Tenant DisplayName: $tenantDisplayName"
        }
        else {
            Write-Host ' Tenant DisplayName: could not be retrieved'
        }

        if ($tenantDetails.defaultDomain) {
            $script:tenantDefaultDomain = $tenantDetails.defaultDomain
        }
    }
    else {
        Write-Host ' something unexpected'
    }
}
function handleCloudEnvironment {
    Write-Host "Environment: $($azAPICallConf['checkContext'].Environment.Name)"
    if ($DoAzureConsumption) {
        if ($azAPICallConf['checkContext'].Environment.Name -eq 'AzureChinaCloud') {
            Write-Host 'Azure Billing not supported in AzureChinaCloud, skipping Consumption..'
            $script:DoAzureConsumption = $false
        }
    }
}
function handlePSRuleData {
    $start = Get-Date

    $script:psRuleDataSelection = $arrayPsRule | select-object `
    @{label = "resourceType"; Expression = { $_.TargetType } }, `
    @{label = "subscriptionId"; Expression = { ($_.TargetObject.id.split('/')[2]) } }, `
    @{label = "mgPath"; Expression = { ($htSubscriptionsMgPath.($_.TargetObject.id.split('/')[2])).ParentNameChainDelimited } }, `
    @{label = "resourceId"; Expression = { ($_.TargetObject.id) } }, `
    @{label = "pillar"; Expression = { $_.Info.Annotations.pillar } }, `
    @{label = "category"; Expression = { $_.Info.Annotations.category } }, `
    @{label = "severity"; Expression = { $_.Info.Annotations.severity } }, `
    @{label = "rule"; Expression = { $_.Info.DisplayName } }, `
    @{label = "description"; Expression = { $_.Info.Description } }, `
    @{label = "recommendation"; Expression = { $_.Info.Recommendation } }, `
    @{label = "link"; Expression = { $_.Info.Annotations.'online version' } }, `
    @{label = "ruleId"; Expression = { $_.RuleId } }, `
    @{label = "result"; Expression = { $_.Outcome } }, `
    @{label = "errorMsg"; Expression = { $_.Error.Message } }

    if (-not $NoCsvExport) {
        Write-Host "Exporting 'PSRule for Azure' CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_PSRule.csv'"
        $psRuleDataSelection | Sort-Object -Property resourceId, pillar, category, severity, rule | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_PSRule.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
    }

    $end = Get-Date
    Write-Host "   handlePSRuleData processing duration: $((NEW-TIMESPAN -Start $start -End $end).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $start -End $end).TotalSeconds) seconds)"
}
function NamingValidation($toCheck) {
    $checks = @(':', '/', '\', '<', '>', '|', '"')
    $array = @()
    foreach ($check in $checks) {
        if ($toCheck -like "*$($check)*") {
            $array += $check
        }
    }
    if ($toCheck -match '\*') {
        $array += '*'
    }
    if ($toCheck -match '\?') {
        $array += '?'
    }
    return $array
}
function prepareData {
    Write-Host 'Preparing Data'
    $startPreparingArrays = Get-Date
    $script:optimizedTableForPathQuery = ($newTable | Select-Object -Property level, mg*, subscription*) | Sort-Object -Property level, mgid, subscriptionId -Unique
    $hlperOptimizedTableForPathQuery = $optimizedTableForPathQuery.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) } )
    $script:optimizedTableForPathQueryMgAndSub = ($hlperOptimizedTableForPathQuery | Select-Object -Property level, mg*, subscription*) | Sort-Object -Property level, mgid, mgname, mgparentId, mgparentName, subscriptionId, subscription -Unique
    $script:optimizedTableForPathQueryMg = ($optimizedTableForPathQuery.where( { [String]::IsNullOrEmpty($_.SubscriptionId) } ) | Select-Object -Property level, mgid, mgName, mgparentid, mgparentName) | Sort-Object -Property level, mgid, mgname, mgparentId, mgparentName -Unique
    $script:optimizedTableForPathQuerySub = ($hlperOptimizedTableForPathQuery | Select-Object -Property subscription*) | Sort-Object -Property subscriptionId -Unique

    foreach ($entry in $optimizedTableForPathQuery) {
        $script:htMgDetails.($entry.mgId) = @{}
        $mgSubs = $optimizedTableForPathQueryMgAndSub.where( { $_.mgId -eq $entry.mgId } )
        $script:htMgDetails.($entry.mgId).subscriptionsCount = $mgSubs.Count
        $script:htMgDetails.($entry.mgId).subscriptions = $mgSubs
        $script:htMgDetails.($entry.mgId).details = $entry
        $mgChildren = ($optimizedTableForPathQueryMg.where( { $_.mgParentId -eq $entry.mgId } )).MgId
        $script:htMgDetails.($entry.mgId).mgChildren = $mgChildren
        $script:htMgDetails.($entry.mgId).mgChildrenCount = $mgChildren.Count
    }

    foreach ($entry in $optimizedTableForPathQueryMgAndSub) {
        $script:htSubDetails.($entry.SubscriptionId) = @{}
        $script:htSubDetails.($entry.SubscriptionId).details = $optimizedTableForPathQueryMgAndSub.where( { $_.SubscriptionId -eq $entry.SubscriptionId } )
    }

    $script:parentMgBaseQuery = ($optimizedTableForPathQueryMg.where( { $_.MgParentId -eq $getMgParentId } ))
    $script:parentMgNamex = $parentMgBaseQuery.mgParentName | Get-Unique
    $script:parentMgIdx = $parentMgBaseQuery.mgParentId | Get-Unique

    $endPreparingArrays = Get-Date
    Write-Host "Preparing Arrays duration: $((NEW-TIMESPAN -Start $startPreparingArrays -End $endPreparingArrays).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPreparingArrays -End $endPreparingArrays).TotalSeconds) seconds)"
}
function processAADGroups {
    Write-Host 'Resolving AAD Groups (for which a RBAC Role assignment exists)'
    Write-Host " Users known as Guest count: $($htUserTypesGuest.Keys.Count) (before Resolving AAD Groups)"
    $startAADGroupsResolveMembers = Get-Date

    $optimizedTableForAADGroupsQuery = ($roleAssignmentsUniqueById.where( { $_.RoleAssignmentIdentityObjectType -eq 'Group' } ) | Select-Object -Property RoleAssignmentIdentityObjectId, RoleAssignmentIdentityDisplayname) | Sort-Object -Property RoleAssignmentIdentityObjectId -Unique
    $aadGroupsCount = ($optimizedTableForAADGroupsQuery).Count

    if ($aadGroupsCount -gt 0) {

        switch ($aadGroupsCount) {
            { $_ -gt 0 } { $indicator = 1 }
            { $_ -gt 10 } { $indicator = 5 }
            { $_ -gt 50 } { $indicator = 10 }
            { $_ -gt 100 } { $indicator = 20 }
            { $_ -gt 250 } { $indicator = 25 }
            { $_ -gt 500 } { $indicator = 50 }
            { $_ -gt 1000 } { $indicator = 100 }
            { $_ -gt 10000 } { $indicator = 250 }
        }

        Write-Host " processing $($aadGroupsCount) AAD Groups with Role assignments (indicating progress in steps of $indicator)"

        $optimizedTableForAADGroupsQuery | ForEach-Object -Parallel {
            $aadGroupIdWithRoleAssignment = $_
            #region UsingVARs
            #fromOtherFunctions
            $AADGroupMembersLimit = $using:AADGroupMembersLimit
            $azAPICallConf = $using:azAPICallConf
            $scriptPath = $using:ScriptPath
            #Array&HTs
            $htAADGroupsDetails = $using:htAADGroupsDetails
            $arrayGroupRoleAssignmentsOnServicePrincipals = $using:arrayGroupRoleAssignmentsOnServicePrincipals
            $arrayGroupRequestResourceNotFound = $using:arrayGroupRequestResourceNotFound
            $arrayProgressedAADGroups = $using:arrayProgressedAADGroups
            $htAADGroupsExeedingMemberLimit = $using:htAADGroupsExeedingMemberLimit
            $indicator = $using:indicator
            $htUserTypesGuest = $using:htUserTypesGuest
            $htServicePrincipals = $using:htServicePrincipals
            #other
            $function:getGroupmembers = $using:funcGetGroupmembers
            #endregion UsingVARs

            $rndom = Get-Random -Minimum 10 -Maximum 750
            start-sleep -Millisecond $rndom

            $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/beta/groups/$($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId)/transitiveMembers/`$count"
            $method = 'GET'
            $aadGroupMembersCount = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask "getGroupMembersCountTransitive $($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId)" -listenOn 'Content' -consistencyLevel 'eventual'

            if ($aadGroupMembersCount -eq 'Request_ResourceNotFound') {
                $null = $script:arrayGroupRequestResourceNotFound.Add([PSCustomObject]@{
                        groupId = $aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId
                    })
            }
            else {
                if ($aadGroupMembersCount -gt $AADGroupMembersLimit) {
                    Write-Host "  Group exceeding limit ($($AADGroupMembersLimit)); memberCount: $aadGroupMembersCount; Group: $($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityDisplayname) ($($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId)); Members will not be resolved adjust the limit using parameter -AADGroupMembersLimit"
                    $script:htAADGroupsDetails.($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId) = @{}
                    $script:htAADGroupsDetails.($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId).MembersAllCount = $aadGroupMembersCount
                    $script:htAADGroupsDetails.($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId).MembersUsersCount = 'n/a'
                    $script:htAADGroupsDetails.($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId).MembersGroupsCount = 'n/a'
                    $script:htAADGroupsDetails.($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId).MembersServicePrincipalsCount = 'n/a'
                }
                else {
                    getGroupmembers -aadGroupId $aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId -aadGroupDisplayName $aadGroupIdWithRoleAssignment.RoleAssignmentIdentityDisplayname
                }
            }

            $null = $script:arrayProgressedAADGroups.Add($aadGroupIdWithRoleAssignment.RoleAssignmentIdentityObjectId)
            $processedAADGroupsCount = $null
            $processedAADGroupsCount = ($arrayProgressedAADGroups).Count
            if ($processedAADGroupsCount) {
                if ($processedAADGroupsCount % $indicator -eq 0) {
                    Write-Host " $processedAADGroupsCount AAD Groups processed"
                }
            }
        } -ThrottleLimit ($ThrottleLimit * 2)
        #[System.GC]::Collect()
    }
    else {
        Write-Host " processing $($aadGroupsCount) AAD Groups with Role assignments"
    }

    $arrayGroupRequestResourceNotFoundCount = ($arrayGroupRequestResourceNotFound).Count
    if ($arrayGroupRequestResourceNotFoundCount -gt 0) {
        Write-Host "$arrayGroupRequestResourceNotFoundCount Groups could not be checked for Memberships"
    }

    Write-Host " Collected $($arrayProgressedAADGroups.Count) AAD Groups"
    $endAADGroupsResolveMembers = Get-Date
    Write-Host "Resolving AAD Groups duration: $((NEW-TIMESPAN -Start $startAADGroupsResolveMembers -End $endAADGroupsResolveMembers).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startAADGroupsResolveMembers -End $endAADGroupsResolveMembers).TotalSeconds) seconds)"
    Write-Host " Users known as Guest count: $($htUserTypesGuest.Keys.Count) (after Resolving AAD Groups)"
}
function processApplications {
    Write-Host 'Processing Service Principals - Applications'
    $script:servicePrincipalsOfTypeApplication = $htServicePrincipals.Keys.where( { $htServicePrincipals.($_).servicePrincipalType -eq 'Application' -and $htServicePrincipals.($_).appOwnerOrganizationId -eq $azAPICallConf['checkContext'].Subscription.TenantId } )
    if ($azAPICallConf['htParameters'].userType -eq 'Guest') {
        #checking if Guest has enough permissions
        $app4Test = $htServicePrincipals.($servicePrincipalsOfTypeApplication[0])
        $currentTask = "getApp Test $($app4Test.appId)"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/applications?`$filter=appId eq '$($app4Test.appId)'"
        $method = 'GET'
        $testGetApplication = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask
        if ($testGetApplication -eq 'skipApplications') {
            $skipApplications = $true
            Write-Host ' Guest account does not have enough permissions, skipping Applications (Secrets & Certificates)'
        }
    }
    if (-not $skipApplications) {
        $startSPApp = Get-Date
        $currentDateUTC = (Get-Date).ToUniversalTime()
        $script:arrayApplicationRequestResourceNotFound = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
        $servicePrincipalsOfTypeApplication | ForEach-Object -Parallel {

            #region UsingVARs
            $currentDateUTC = $using:currentDateUTC
            #fromOtherFunctions
            $azAPICallConf = $using:azAPICallConf
            $scriptPath = $using:ScriptPath
            #Array&HTs
            $arrayApplicationRequestResourceNotFound = $using:arrayApplicationRequestResourceNotFound
            $htAppDetails = $using:htAppDetails
            $htServicePrincipals = $using:htServicePrincipals
            #endregion UsingVARs

            $sp = $htServicePrincipals.($_)

            $currentTask = "getApp $($sp.appId)"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/applications?`$filter=appId eq '$($sp.appId)'"
            $method = 'GET'
            $getApplication = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

            if ($getApplication -eq 'Request_ResourceNotFound') {
                $null = $script:arrayApplicationRequestResourceNotFound.Add([PSCustomObject]@{
                        appId = $sp.appId
                    })
            }
            else {
                if (($getApplication).Count -eq 0) {
                    Write-Host "$($sp.appId) no data returned / seems non existent?"
                }
                else {
                    $script:htAppDetails.($sp.id) = @{}
                    $script:htAppDetails.($sp.id).servicePrincipalType = $sp.servicePrincipalType
                    $script:htAppDetails.($sp.id).spGraphDetails = $sp
                    $script:htAppDetails.($sp.id).appGraphDetails = $getApplication

                    $appPasswordCredentialsCount = ($getApplication.passwordCredentials).count
                    if ($appPasswordCredentialsCount -gt 0) {
                        $script:htAppDetails.($sp.id).appPasswordCredentialsCount = $appPasswordCredentialsCount
                        $appPasswordCredentialsExpiredCount = 0
                        $appPasswordCredentialsGracePeriodExpiryCount = 0
                        $appPasswordCredentialsExpiryOKCount = 0
                        $appPasswordCredentialsExpiryOKMoreThan2YearsCount = 0
                        foreach ($appPasswordCredential in $getApplication.passwordCredentials) {
                            $passwordExpiryTotalDays = (NEW-TIMESPAN -Start $currentDateUTC -End $appPasswordCredential.endDateTime).TotalDays
                            if ($passwordExpiryTotalDays -lt 0) {
                                $appPasswordCredentialsExpiredCount++
                            }
                            elseif ($passwordExpiryTotalDays -lt $AADServicePrincipalExpiryWarningDays) {
                                $appPasswordCredentialsGracePeriodExpiryCount++
                            }
                            else {
                                if ($passwordExpiryTotalDays -gt 730) {
                                    $appPasswordCredentialsExpiryOKMoreThan2YearsCount++
                                }
                                else {
                                    $appPasswordCredentialsExpiryOKCount++
                                }
                            }
                        }
                        $script:htAppDetails.($sp.id).appPasswordCredentialsExpiredCount = $appPasswordCredentialsExpiredCount
                        $script:htAppDetails.($sp.id).appPasswordCredentialsGracePeriodExpiryCount = $appPasswordCredentialsGracePeriodExpiryCount
                        $script:htAppDetails.($sp.id).appPasswordCredentialsExpiryOKCount = $appPasswordCredentialsExpiryOKCount
                        $script:htAppDetails.($sp.id).appPasswordCredentialsExpiryOKMoreThan2YearsCount = $appPasswordCredentialsExpiryOKMoreThan2YearsCount
                    }

                    $appKeyCredentialsCount = ($getApplication.keyCredentials).count
                    if ($appKeyCredentialsCount -gt 0) {
                        $script:htAppDetails.($sp.id).appKeyCredentialsCount = $appKeyCredentialsCount
                        $appKeyCredentialsExpiredCount = 0
                        $appKeyCredentialsGracePeriodExpiryCount = 0
                        $appKeyCredentialsExpiryOKCount = 0
                        $appKeyCredentialsExpiryOKMoreThan2YearsCount = 0
                        foreach ($appKeyCredential in $getApplication.keyCredentials) {
                            $keyCredentialExpiryTotalDays = (NEW-TIMESPAN -Start $currentDateUTC -End $appKeyCredential.endDateTime).TotalDays
                            if ($keyCredentialExpiryTotalDays -lt 0) {
                                $appKeyCredentialsExpiredCount++
                            }
                            elseif ($keyCredentialExpiryTotalDays -lt $AADServicePrincipalExpiryWarningDays) {
                                $appKeyCredentialsGracePeriodExpiryCount++
                            }
                            else {
                                if ($keyCredentialExpiryTotalDays -gt 730) {
                                    $appKeyCredentialsExpiryOKMoreThan2YearsCount++
                                }
                                else {
                                    $appKeyCredentialsExpiryOKCount++
                                }
                            }
                        }
                        $script:htAppDetails.($sp.id).appKeyCredentialsExpiredCount = $appKeyCredentialsExpiredCount
                        $script:htAppDetails.($sp.id).appKeyCredentialsGracePeriodExpiryCount = $appKeyCredentialsGracePeriodExpiryCount
                        $script:htAppDetails.($sp.id).appKeyCredentialsExpiryOKCount = $appKeyCredentialsExpiryOKCount
                        $script:htAppDetails.($sp.id).appKeyCredentialsExpiryOKMoreThan2YearsCount = $appKeyCredentialsExpiryOKMoreThan2YearsCount
                    }
                }
            }

        } -Throttlelimit ($ThrottleLimit * 2)

        $endSPApp = Get-Date
        Write-Host "Processing Service Principals - Applications duration: $((NEW-TIMESPAN -Start $startSPApp -End $endSPApp).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSPApp -End $endSPApp).TotalSeconds) seconds)"
    }
}
function processDataCollection {
    [CmdletBinding()]Param(
        [string]$mgId
    )

    Write-Host ' CustomDataCollection ManagementGroups'
    $startMgLoop = Get-Date

    $allManagementGroupsFromEntitiesChildOfRequestedMg = $arrayEntitiesFromAPI.where( { $_.type -eq 'Microsoft.Management/managementGroups' -and ($_.Name -eq $mgId -or $_.properties.parentNameChain -contains $mgId) })
    $allManagementGroupsFromEntitiesChildOfRequestedMgCount = ($allManagementGroupsFromEntitiesChildOfRequestedMg).Count
    Write-Host " $allManagementGroupsFromEntitiesChildOfRequestedMgCount Management Groups: $(($allManagementGroupsFromEntitiesChildOfRequestedMg.Name | Sort-Object) -join ', ')"
    
    $mgBatch = ($allManagementGroupsFromEntitiesChildOfRequestedMg | Group-Object -Property { ($_.properties.parentNameChain).Count }) | Sort-Object -Property Name
    foreach ($batchLevel in $mgBatch) {
        Write-Host "  Processing Management Groups L$($batchLevel.Name) ($($batchLevel.Count) Management Groups)"

        showMemoryUsage

        $batchLevel.Group | ForEach-Object -Parallel {
            $mgdetail = $_
            #region UsingVARs
            #Parameters MG&Sub related
            $CsvDelimiter = $using:CsvDelimiter
            $CsvDelimiterOpposite = $using:CsvDelimiterOpposite
            $ManagementGroupId = $using:ManagementGroupId
            #fromOtherFunctions
            $azAPICallConf = $using:azAPICallConf
            $scriptPath = $using:ScriptPath
            #Array&HTs
            $newTable = $using:newTable
            $customDataCollectionDuration = $using:customDataCollectionDuration
            $htSubscriptionTagList = $using:htSubscriptionTagList
            $htResourceTypesUniqueResource = $using:htResourceTypesUniqueResource
            $htAllTagList = $using:htAllTagList
            $htSubscriptionTags = $using:htSubscriptionTags
            $htCacheDefinitionsPolicy = $using:htCacheDefinitionsPolicy
            $htCacheDefinitionsPolicySet = $using:htCacheDefinitionsPolicySet
            $htCacheDefinitionsRole = $using:htCacheDefinitionsRole
            $htCacheDefinitionsBlueprint = $using:htCacheDefinitionsBlueprint
            $htRoleDefinitionIdsUsedInPolicy = $using:htRoleDefinitionIdsUsedInPolicy
            $htCachePolicyComplianceMG = $using:htCachePolicyComplianceMG
            $htCachePolicyComplianceResponseTooLargeMG = $using:htCachePolicyComplianceResponseTooLargeMG
            $htCacheAssignmentsRole = $using:htCacheAssignmentsRole
            $htCacheAssignmentsRBACOnResourceGroupsAndResources = $using:htCacheAssignmentsRBACOnResourceGroupsAndResources
            $htCacheAssignmentsBlueprint = $using:htCacheAssignmentsBlueprint
            $htCacheAssignmentsPolicy = $using:htCacheAssignmentsPolicy
            $htPolicyAssignmentExemptions = $using:htPolicyAssignmentExemptions
            $htManagementGroupsMgPath = $using:htManagementGroupsMgPath
            $LimitPOLICYPolicyDefinitionsScopedManagementGroup = $using:LimitPOLICYPolicyDefinitionsScopedManagementGroup
            $LimitPOLICYPolicySetDefinitionsScopedManagementGroup = $using:LimitPOLICYPolicySetDefinitionsScopedManagementGroup
            $LimitPOLICYPolicyAssignmentsManagementGroup = $using:LimitPOLICYPolicyAssignmentsManagementGroup
            $LimitPOLICYPolicySetAssignmentsManagementGroup = $using:LimitPOLICYPolicySetAssignmentsManagementGroup
            $LimitRBACRoleAssignmentsManagementGroup = $using:LimitRBACRoleAssignmentsManagementGroup
            $arrayEntitiesFromAPI = $using:arrayEntitiesFromAPI
            $allManagementGroupsFromEntitiesChildOfRequestedMgCount = $using:allManagementGroupsFromEntitiesChildOfRequestedMgCount
            $arrayDataCollectionProgressMg = $using:arrayDataCollectionProgressMg
            $arrayDiagnosticSettingsMgSub = $using:arrayDiagnosticSettingsMgSub
            $htMgAtScopePolicyAssignments = $using:htMgAtScopePolicyAssignments
            $htMgAtScopePoliciesScoped = $using:htMgAtScopePoliciesScoped
            $htMgAtScopeRoleAssignments = $using:htMgAtScopeRoleAssignments
            $htMgASCSecureScore = $using:htMgASCSecureScore
            $htRoleAssignmentsFromAPIInheritancePrevention = $using:htRoleAssignmentsFromAPIInheritancePrevention
            $htNamingValidation = $using:htNamingValidation
            $htPrincipals = $using:htPrincipals
            $htServicePrincipals = $using:htServicePrincipals
            $htUserTypesGuest = $using:htUserTypesGuest
            #other
            $function:addRowToTable = $using:funcAddRowToTable
            $function:namingValidation = $using:funcNamingValidation
            $function:resolveObjectIds = $using:funcResolveObjectIds

            #$function:dataCollectionFunctions = $using:funcdataCollectionFunctions

            $function:dataCollectionMGSecureScore = $using:funcDataCollectionMGSecureScore
            $function:dataCollectionDiagnosticsMG = $using:funcDataCollectionDiagnosticsMG
            $function:dataCollectionPolicyComplianceStates = $using:funcDataCollectionPolicyComplianceStates
            $function:dataCollectionBluePrintDefinitionsMG = $using:funcDataCollectionBluePrintDefinitionsMG
            $function:dataCollectionPolicyExemptions = $using:funcDataCollectionPolicyExemptions
            $function:dataCollectionPolicyDefinitions = $using:funcDataCollectionPolicyDefinitions
            $function:dataCollectionPolicySetDefinitions = $using:funcDataCollectionPolicySetDefinitions
            $function:dataCollectionPolicyAssignmentsMG = $using:funcDataCollectionPolicyAssignmentsMG
            $function:dataCollectionRoleDefinitions = $using:funcDataCollectionRoleDefinitions
            $function:dataCollectionRoleAssignmentsMG = $using:funcDataCollectionRoleAssignmentsMG

            #endregion usingVARS
            $builtInPolicyDefinitionsCount = $using:builtInPolicyDefinitionsCount

            $addRowToTableDone = $false

            $MgDetailThis = $htManagementGroupsMgPath.($mgdetail.Name)
            $MgParentId = $MgDetailThis.Parent
            $hierarchyLevel = $MgDetailThis.ParentNameChainCount

            if ($MgParentId -eq '__TenantRoot__') {
                $MgParentId = 'TenantRoot'
                $MgParentName = $MgParentId
            }
            else {
                $MgParentName = $htManagementGroupsMgPath.($MgParentId).DisplayName
            }

            $rndom = Get-Random -Minimum 10 -Maximum 750
            start-sleep -Millisecond $rndom
            $startMgLoopThis = Get-Date

            if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {

                #namingValidation
                if (-not [string]::IsNullOrEmpty($mgdetail.properties.displayName)) {
                    $namingValidationResult = NamingValidation -toCheck $mgdetail.properties.displayName
                    if ($namingValidationResult.Count -gt 0) {
                        $script:htNamingValidation.ManagementGroup.($mgdetail.Name) = @{}
                        $script:htNamingValidation.ManagementGroup.($mgdetail.Name).nameInvalidChars = ($namingValidationResult -join '')
                        $script:htNamingValidation.ManagementGroup.($mgdetail.Name).name = $mgdetail.properties.displayName
                    }
                }

                $targetMgOrSub = 'MG'
                $baseParameters = @{
                    scopeId          = $mgdetail.Name
                    scopeDisplayName = $mgdetail.properties.displayName
                }

                #ManagementGroupASCSecureScore
                $mgAscSecureScoreResult = DataCollectionMGSecureScore -Id $mgdetail.Name

                $addRowToTableParameters = @{
                    hierarchyLevel         = $hierarchyLevel
                    mgParentId             = $mgParentId
                    mgParentName           = $mgParentName
                    mgAscSecureScoreResult = $mgAscSecureScoreResult
                }

                #mg diag
                DataCollectionDiagnosticsMG @baseParameters

                if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                    #MGPolicyCompliance
                    DataCollectionPolicyComplianceStates @baseParameters -TargetMgOrSub $targetMgOrSub
                }

                #MGBlueprintDefinitions
                $functionReturn = DataCollectionBluePrintDefinitionsMG @baseParameters @addRowToTableParameters
                if ($functionReturn.'addRowToTableDone') {
                    $addRowToTableDone = $true
                }

                #MGPolicyExemptions
                DataCollectionPolicyExemptions @baseParameters -TargetMgOrSub $targetMgOrSub

                #MGPolicyDefinitions
                $functionReturn = DataCollectionPolicyDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub
                $policyDefinitionsScopedCount = $functionReturn.'PolicyDefinitionsScopedCount'

                #MGPolicySetDefinitions
                $functionReturn = DataCollectionPolicySetDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub
                $policySetDefinitionsScopedCount = $functionReturn.'PolicySetDefinitionsScopedCount'

                if (-not $htMgAtScopePoliciesScoped.($mgdetail.Name)) {
                    $script:htMgAtScopePoliciesScoped.($mgdetail.Name) = @{}
                    $script:htMgAtScopePoliciesScoped.($mgdetail.Name).ScopedCount = $policyDefinitionsScopedCount + $policySetDefinitionsScopedCount
                }

                $scopedPolicyCounts = @{
                    policyDefinitionsScopedCount    = $policyDefinitionsScopedCount
                    policySetDefinitionsScopedCount = $policySetDefinitionsScopedCount
                }

                #MgPolicyAssignments
                $functionReturn = DataCollectionPolicyAssignmentsMG @baseParameters @addRowToTableParameters @scopedPolicyCounts
                if ($functionReturn.'addRowToTableDone') {
                    $addRowToTableDone = $true
                }

                #MGRoleDefinitions
                DataCollectionRoleDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub

                #MGRoleAssignments
                $functionReturn = DataCollectionRoleAssignmentsMG @baseParameters @addRowToTableParameters
                if ($functionReturn.'addRowToTableDone') {
                    $addRowToTableDone = $true
                }

                if ($addRowToTableDone -ne $true) {
                    addRowToTable `
                        -level $hierarchyLevel `
                        -mgName $mgdetail.properties.displayName `
                        -mgId $mgdetail.Name `
                        -mgParentId $mgParentId `
                        -mgParentName $mgParentName `
                        -mgASCSecureScore $mgAscSecureScoreResult
                }
            }
            else {
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $mgdetail.properties.displayName `
                    -mgId $mgdetail.Name `
                    -mgParentId $mgParentId `
                    -mgParentName $mgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult
            }


            $endMgLoopThis = Get-Date
            $null = $script:customDataCollectionDuration.Add([PSCustomObject]@{
                    Type        = 'Mg'
                    Id          = $mgdetail.Name
                    DurationSec = (NEW-TIMESPAN -Start $startMgLoopThis -End $endMgLoopThis).TotalSeconds
                })

            $null = $script:arrayDataCollectionProgressMg.Add($mgdetail.Name)
            $progressCount = ($arrayDataCollectionProgressMg).Count
            Write-Host "  $($progressCount)/$($allManagementGroupsFromEntitiesChildOfRequestedMgCount) Management Groups processed"

        } -ThrottleLimit $ThrottleLimit
        #[System.GC]::Collect()
    }

    $endMgLoop = Get-Date
    Write-Host " CustomDataCollection ManagementGroups processing duration: $((NEW-TIMESPAN -Start $startMgLoop -End $endMgLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startMgLoop -End $endMgLoop).TotalSeconds) seconds)"

    apiCallTracking -stage 'CustomDataCollection ManagementGroups' -spacing ' '

    #test
    if ($builtInPolicyDefinitionsCount -ne ($($htCacheDefinitionsPolicy).Values.where({ $_.Type -eq 'BuiltIn' }).Count) -or $builtInPolicyDefinitionsCount -ne ((($htCacheDefinitionsPolicy).Values.where( { $_.Type -eq 'BuiltIn' } )).Count)) {
        Write-Host "$builtInPolicyDefinitionsCount -ne $($($htCacheDefinitionsPolicy).Values.where({$_.Type -eq 'BuiltIn'}).Count) OR $builtInPolicyDefinitionsCount -ne $((($htCacheDefinitionsPolicy).Values.where( {$_.Type -eq 'BuiltIn'} )).Count)"
        Write-Host 'Listing all PolicyDefinitions:'
        foreach ($tmpPolicyDefinitionId in ($($htCacheDefinitionsPolicy).Keys | Sort-Object)) {
            Write-Host $tmpPolicyDefinitionId
        }
    }


    #region SUBSCRIPTION
    Write-Host ' CustomDataCollection Subscriptions'
    $subsExcludedStateCount = ($outOfScopeSubscriptions.where( { $_.outOfScopeReason -like 'State*' } )).Count
    $subsExcludedWhitelistCount = ($outOfScopeSubscriptions.where( { $_.outOfScopeReason -like 'QuotaId*' } )).Count
    if ($subsExcludedStateCount -gt 0) {
        Write-Host "  CustomDataCollection $($subsExcludedStateCount) Subscriptions excluded (State != enabled)"
    }
    if ($subsExcludedWhitelistCount -gt 0) {
        Write-Host "  CustomDataCollection $($subsExcludedWhitelistCount) Subscriptions excluded (not in quotaId whitelist: '$($SubscriptionQuotaIdWhitelist -join ', ')' OR is AAD_ quotaId)"
    }
    Write-Host " CustomDataCollection Subscriptions will process $subsToProcessInCustomDataCollectionCount of $childrenSubscriptionsCount"

    $startSubLoop = Get-Date
    if ($subsToProcessInCustomDataCollectionCount -gt 0) {

        $counterBatch = [PSCustomObject] @{ Value = 0 }
        $batchSize = 100
        if ($subsToProcessInCustomDataCollectionCount -gt 500) {
            $batchSize = 200
        }
        Write-Host " Subscriptions Batch size: $batchSize"

        $subscriptionsBatch = $subsToProcessInCustomDataCollection | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }
        $batchCnt = 0
        foreach ($batch in $subscriptionsBatch) {
            #[System.GC]::Collect()
            $startBatch = Get-Date
            $batchCnt++
            Write-Host " processing Batch #$batchCnt/$(($subscriptionsBatch | Measure-Object).Count) ($(($batch.Group | Measure-Object).Count) Subscriptions)"
            showMemoryUsage

            $batch.Group | ForEach-Object -Parallel {
                $startSubLoopThis = Get-Date
                $childMgSubDetail = $_
                #region UsingVARs
                #Parameters MG&Sub related
                $CsvDelimiter = $using:CsvDelimiter
                $CsvDelimiterOpposite = $using:CsvDelimiterOpposite
                #Parameters Sub related
                #fromOtherFunctions
                $azAPICallConf = $using:azAPICallConf
                $scriptPath = $using:ScriptPath
                #Array&HTs
                $newTable = $using:newTable
                $resourcesAll = $using:resourcesAll
                $resourcesIdsAll = $using:resourcesIdsAll
                $resourceGroupsAll = $using:resourceGroupsAll
                $customDataCollectionDuration = $using:customDataCollectionDuration
                $htSubscriptionsMgPath = $using:htSubscriptionsMgPath
                $htManagementGroupsMgPath = $using:htManagementGroupsMgPath
                $htResourceProvidersAll = $using:htResourceProvidersAll
                $arrayFeaturesAll = $using:arrayFeaturesAll
                $htSubscriptionTagList = $using:htSubscriptionTagList
                $htResourceTypesUniqueResource = $using:htResourceTypesUniqueResource
                $htAllTagList = $using:htAllTagList
                $htSubscriptionTags = $using:htSubscriptionTags
                $htCacheDefinitionsPolicy = $using:htCacheDefinitionsPolicy
                $htCacheDefinitionsPolicySet = $using:htCacheDefinitionsPolicySet
                $htCacheDefinitionsRole = $using:htCacheDefinitionsRole
                $htCacheDefinitionsBlueprint = $using:htCacheDefinitionsBlueprint
                $htRoleDefinitionIdsUsedInPolicy = $using:htRoleDefinitionIdsUsedInPolicy
                $htCachePolicyComplianceSUB = $using:htCachePolicyComplianceSUB
                $htCachePolicyComplianceResponseTooLargeSUB = $using:htCachePolicyComplianceResponseTooLargeSUB
                $htCacheAssignmentsRole = $using:htCacheAssignmentsRole
                $htCacheAssignmentsRBACOnResourceGroupsAndResources = $using:htCacheAssignmentsRBACOnResourceGroupsAndResources
                $htCacheAssignmentsBlueprint = $using:htCacheAssignmentsBlueprint
                $htCacheAssignmentsPolicyOnResourceGroupsAndResources = $using:htCacheAssignmentsPolicyOnResourceGroupsAndResources
                $htCacheAssignmentsPolicy = $using:htCacheAssignmentsPolicy
                $htPolicyAssignmentExemptions = $using:htPolicyAssignmentExemptions
                $htResourceLocks = $using:htResourceLocks
                $LimitPOLICYPolicyDefinitionsScopedSubscription = $using:LimitPOLICYPolicyDefinitionsScopedSubscription
                $LimitPOLICYPolicySetDefinitionsScopedSubscription = $using:LimitPOLICYPolicySetDefinitionsScopedSubscription
                $LimitPOLICYPolicyAssignmentsSubscription = $using:LimitPOLICYPolicyAssignmentsSubscription
                $LimitPOLICYPolicySetAssignmentsSubscription = $using:LimitPOLICYPolicySetAssignmentsSubscription
                $childrenSubscriptionsCount = $using:childrenSubscriptionsCount
                $subsToProcessInCustomDataCollectionCount = $using:subsToProcessInCustomDataCollectionCount
                $arrayDataCollectionProgressSub = $using:arrayDataCollectionProgressSub
                $arraySubResourcesAddArrayDuration = $using:arraySubResourcesAddArrayDuration
                $htAllSubscriptionsFromAPI = $using:htAllSubscriptionsFromAPI
                $arrayEntitiesFromAPI = $using:arrayEntitiesFromAPI
                $arrayDiagnosticSettingsMgSub = $using:arrayDiagnosticSettingsMgSub
                $htMgASCSecureScore = $using:htMgASCSecureScore
                $htRoleAssignmentsFromAPIInheritancePrevention = $using:htRoleAssignmentsFromAPIInheritancePrevention
                $htNamingValidation = $using:htNamingValidation
                $htPrincipals = $using:htPrincipals
                $htServicePrincipals = $using:htServicePrincipals
                $htUserTypesGuest = $using:htUserTypesGuest
                $arrayDefenderPlans = $using:arrayDefenderPlans
                $arrayDefenderPlansSubscriptionsSkipped = $using:arrayDefenderPlansSubscriptionsSkipped
                $arrayUserAssignedIdentities4Resources = $using:arrayUserAssignedIdentities4Resources
                $htSubscriptionsRoleAssignmentLimit = $using:htSubscriptionsRoleAssignmentLimit
                $arrayPsRule = $using:arrayPsRule
                $arrayPSRuleTracking = $using:arrayPSRuleTracking
                $htClassicAdministrators = $using:htClassicAdministrators
                #other
                $function:addRowToTable = $using:funcAddRowToTable
                $function:namingValidation = $using:funcNamingValidation
                $function:resolveObjectIds = $using:funcResolveObjectIds
                $function:dataCollectionMGSecureScore = $using:funcDataCollectionMGSecureScore
                $function:dataCollectionDefenderPlans = $using:funcDataCollectionDefenderPlans
                $function:dataCollectionDiagnosticsSub = $using:funcDataCollectionDiagnosticsSub
                $function:dataCollectionResources = $using:funcDataCollectionResources
                $function:dataCollectionResourceGroups = $using:funcDataCollectionResourceGroups
                $function:dataCollectionResourceProviders = $using:funcDataCollectionResourceProviders
                $function:dataCollectionFeatures = $using:funcDataCollectionFeatures
                $function:dataCollectionResourceLocks = $using:funcDataCollectionResourceLocks
                $function:dataCollectionTags = $using:funcDataCollectionTags
                $function:dataCollectionPolicyComplianceStates = $using:funcDataCollectionPolicyComplianceStates
                $function:dataCollectionASCSecureScoreSub = $using:funcDataCollectionASCSecureScoreSub
                $function:dataCollectionBluePrintDefinitionsSub = $using:funcDataCollectionBluePrintDefinitionsSub
                $function:dataCollectionBluePrintAssignmentsSub = $using:funcDataCollectionBluePrintAssignmentsSub
                $function:dataCollectionPolicyExemptions = $using:funcDataCollectionPolicyExemptions
                $function:dataCollectionPolicyDefinitions = $using:funcDataCollectionPolicyDefinitions
                $function:dataCollectionPolicySetDefinitions = $using:funcDataCollectionPolicySetDefinitions
                $function:dataCollectionPolicyAssignmentsSub = $using:funcDataCollectionPolicyAssignmentsSub
                $function:dataCollectionRoleDefinitions = $using:funcDataCollectionRoleDefinitions
                $function:dataCollectionRoleAssignmentsSub = $using:funcDataCollectionRoleAssignmentsSub
                $function:dataCollectionClassicAdministratorsSub = $using:funcDataCollectionClassicAdministratorsSub
                #endregion UsingVARs

                $addRowToTableDone = $false

                $childMgSubId = $childMgSubDetail.subscriptionId
                $childMgSubDisplayName = $childMgSubDetail.subscriptionName
                $hierarchyInfo = $htSubscriptionsMgPath.($childMgSubDetail.subscriptionId)
                $hierarchyLevel = $hierarchyInfo.level
                $childMgId = $hierarchyInfo.Parent
                $childMgDisplayName = $hierarchyInfo.ParentName
                $childMgMgPath = $hierarchyInfo.pathDelimited
                $childMgParentNameChain = $hierarchyInfo.ParentNameChain
                $childMgParentInfo = $htManagementGroupsMgPath.($childMgId)
                $childMgParentId = $childMgParentInfo.Parent
                $childMgParentName = $htManagementGroupsMgPath.($childMgParentInfo.Parent).DisplayName

                #namingValidation
                if (-not [string]::IsNullOrEmpty($childMgSubDisplayName)) {
                    $namingValidationResult = NamingValidation -toCheck $childMgSubDisplayName
                    if ($namingValidationResult.Count -gt 0) {

                        $script:htNamingValidation.Subscription.($childMgSubId) = @{}
                        $script:htNamingValidation.Subscription.($childMgSubId).displayNameInvalidChars = ($namingValidationResult -join '')
                        $script:htNamingValidation.Subscription.($childMgSubId).displayName = $childMgSubDisplayName
                    }
                }

                #$rndom = Get-Random -Minimum 10 -Maximum 750
                #start-sleep -Millisecond $rndom
                if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
                    $currentSubscription = $htAllSubscriptionsFromAPI.($childMgSubId).subDetails
                    $subscriptionQuotaId = $currentSubscription.subscriptionPolicies.quotaId
                    $subscriptionState = $currentSubscription.state

                    $targetMgOrSub = 'Sub'
                    $baseParameters = @{
                        scopeId             = $childMgSubId
                        scopeDisplayName    = $childMgSubDisplayName
                        subscriptionQuotaId = $subscriptionQuotaId
                    }

                    if (-not $azAPICallConf['htParameters'].ManagementGroupsOnly) {
                        #mgSecureScore
                        $mgAscSecureScoreResult = DataCollectionMGSecureScore -Id $childMgId

                        #defenderPlans
                        $dataCollectionDefenderPlansParameters = @{
                            ChildMgMgPath = $childMgMgPath
                        }
                        DataCollectionDefenderPlans @baseParameters @dataCollectionDefenderPlansParameters

                        #diagnostics
                        $dataCollectionDiagnosticsSubParameters = @{
                            ChildMgMgPath = $childMgMgPath
                            ChildMgId     = $childMgId
                        }
                        DataCollectionDiagnosticsSub @baseParameters @dataCollectionDiagnosticsSubParameters


                        if ($azAPICallConf['htParameters'].NoResources -eq $false) {
                            #resources
                            $dataCollectionResourcesParameters = @{
                                ChildMgMgPath = $childMgMgPath
                            }
                            DataCollectionResources @baseParameters @dataCollectionResourcesParameters
                        }

                        #resourceGroups
                        DataCollectionResourceGroups @baseParameters

                        #resourceProviders
                        DataCollectionResourceProviders @baseParameters

                        #features
                        DataCollectionFeatures @baseParameters -MgParentNameChain $childMgParentNameChain

                        #resourceLocks
                        DataCollectionResourceLocks @baseParameters

                        #tags
                        $subscriptionTagsReturn = DataCollectionTags @baseParameters
                        $subscriptionTags = $subscriptionTagsReturn.subscriptionTags
                        $subscriptionTagsCount = $subscriptionTagsReturn.subscriptionTagsCount

                        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                            #SubscriptionPolicyCompliance
                            DataCollectionPolicyComplianceStates @baseParameters -TargetMgOrSub $targetMgOrSub
                        }

                        #SubscriptionASCSecureScore
                        $subscriptionASCSecureScore = DataCollectionASCSecureScoreSub @baseParameters

                        $addRowToTableParameters = @{
                            hierarchyLevel             = $hierarchyLevel
                            childMgDisplayName         = $childMgDisplayName
                            childMgId                  = $childMgId
                            childMgParentId            = $childMgParentId
                            childMgParentName          = $childMgParentName
                            mgAscSecureScoreResult     = $mgAscSecureScoreResult
                            #subscriptionQuotaId        = $subscriptionQuotaId
                            subscriptionState          = $subscriptionState
                            subscriptionASCSecureScore = $subscriptionASCSecureScore
                            subscriptionTags           = $subscriptionTags
                            subscriptionTagsCount      = $subscriptionTagsCount
                        }

                        #SubscriptionBlueprintDefinitions
                        $functionReturn = DataCollectionBluePrintDefinitionsSub @baseParameters @addRowToTableParameters
                        if ($functionReturn.'addRowToTableDone') {
                            $addRowToTableDone = $true
                        }

                        #SubscriptionBlueprintAssignments
                        $functionReturn = DataCollectionBluePrintAssignmentsSub @baseParameters @addRowToTableParameters
                        if ($functionReturn.'addRowToTableDone') {
                            $addRowToTableDone = $true
                        }

                        #SubscriptionPolicyExemptions
                        DataCollectionPolicyExemptions @baseParameters -TargetMgOrSub $targetMgOrSub

                        #SubscriptionPolicyDefinitions
                        $functionReturn = DataCollectionPolicyDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub
                        $policyDefinitionsScopedCount = $functionReturn.'PolicyDefinitionsScopedCount'

                        #SubscriptionPolicySets
                        $functionReturn = DataCollectionPolicySetDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub
                        $policySetDefinitionsScopedCount = $functionReturn.'PolicySetDefinitionsScopedCount'

                        $scopedPolicyCounts = @{
                            policyDefinitionsScopedCount    = $policyDefinitionsScopedCount
                            policySetDefinitionsScopedCount = $policySetDefinitionsScopedCount
                        }

                        #SubscriptionPolicyAssignments
                        $functionReturn = DataCollectionPolicyAssignmentsSub @baseParameters @addRowToTableParameters @scopedPolicyCounts
                        if ($functionReturn.'addRowToTableDone') {
                            $addRowToTableDone = $true
                        }

                        #SubscriptionRoleDefinitions
                        DataCollectionRoleDefinitions @baseParameters -TargetMgOrSub $targetMgOrSub

                        #SubscriptionRoleAssignments
                        $functionReturn = DataCollectionRoleAssignmentsSub @baseParameters @addRowToTableParameters
                        if ($functionReturn.'addRowToTableDone') {
                            $addRowToTableDone = $true
                        }

                        #SubscriptionClassicAdministrators
                        dataCollectionClassicAdministratorsSub @baseParameters -SubscriptionMgPath $childMgMgPath
                    }

                    if ($addRowToTableDone -ne $true) {
                        addRowToTable `
                            -level $hierarchyLevel `
                            -mgName $childMgDisplayName `
                            -mgId $childMgId `
                            -mgParentId $childMgParentId `
                            -mgParentName $childMgParentName `
                            -mgASCSecureScore $mgAscSecureScoreResult `
                            -Subscription $childMgSubDisplayName `
                            -SubscriptionId $childMgSubId `
                            -SubscriptionASCSecureScore $subscriptionASCSecureScore
                    }
                }
                else {
                    addRowToTable `
                        -level $hierarchyLevel `
                        -mgName $childMgDisplayName `
                        -mgId $childMgId `
                        -mgParentId $childMgParentId `
                        -mgParentName $childMgParentName `
                        -mgASCSecureScore $mgAscSecureScoreResult `
                        -Subscription $childMgSubDisplayName `
                        -SubscriptionId $childMgSubId `
                        -SubscriptionASCSecureScore $subscriptionASCSecureScore
                }
                $endSubLoopThis = Get-Date
                $null = $script:customDataCollectionDuration.Add([PSCustomObject]@{
                        Type        = 'SUB'
                        Id          = $childMgSubId
                        DurationSec = (NEW-TIMESPAN -Start $startSubLoopThis -End $endSubLoopThis).TotalSeconds
                    })

                $null = $script:arrayDataCollectionProgressSub.Add($childMgSubId)
                $progressCount = ($arrayDataCollectionProgressSub).Count
                Write-Host "  $($progressCount)/$($subsToProcessInCustomDataCollectionCount) Subscriptions processed"

            } -ThrottleLimit $ThrottleLimit

            $endBatch = Get-Date
            Write-Host " Batch #$batchCnt processing duration: $((NEW-TIMESPAN -Start $startBatch -End $endBatch).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startBatch -End $endBatch).TotalSeconds) seconds)"
        }
        #[System.GC]::Collect()

        $endSubLoop = Get-Date
        Write-Host " CustomDataCollection Subscriptions processing duration: $((NEW-TIMESPAN -Start $startSubLoop -End $endSubLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSubLoop -End $endSubLoop).TotalSeconds) seconds)"
        if ($azAPICallConf['htParameters'].DoPSRule -eq $true) {
            if ($arrayPSRuleTracking.Count -gt 0) {
                $durationPSRuleTotalSeconds = (($arrayPSRuleTracking.duration | Measure-Object -Sum).Sum)
                Write-Host "  CustomDataCollection Subscriptions 'PSRule for Azure' processing duration (in sum): $($durationPSRuleTotalSeconds / 60) minutes ($($durationPSRuleTotalSeconds) seconds)"
            }
        }
        #test
        Write-Host " built-in PolicyDefinitions: $($($htCacheDefinitionsPolicy).Values.where({$_.Type -eq 'BuiltIn'}).Count)"
        Write-Host " custom PolicyDefinitions: $($($htCacheDefinitionsPolicy).Values.where({$_.Type -eq 'Custom'}).Count)"
        Write-Host " all PolicyDefinitions: $($($htCacheDefinitionsPolicy).Values.Count)"
    }
    #endregion SUBSCRIPTION

    $durationDataMG = $customDataCollectionDuration.where( { $_.Type -eq 'MG' } )
    $durationDataSUB = $customDataCollectionDuration.where( { $_.Type -eq 'SUB' } )
    $durationMGAverageMaxMin = ($durationDataMG.DurationSec | Measure-Object -Average -Maximum -Minimum)
    $durationSUBAverageMaxMin = ($durationDataSUB.DurationSec | Measure-Object -Average -Maximum -Minimum)
    Write-Host "Collecting custom data for $($arrayEntitiesFromAPIManagementGroupsCount) ManagementGroups Avg/Max/Min duration in seconds: Average: $([math]::Round($durationMGAverageMaxMin.Average,4)); Maximum: $([math]::Round($durationMGAverageMaxMin.Maximum,4)); Minimum: $([math]::Round($durationMGAverageMaxMin.Minimum,4))"
    Write-Host "Collecting custom data for $($arrayEntitiesFromAPISubscriptionsCount) Subscriptions Avg/Max/Min duration in seconds: Average: $([math]::Round($durationSUBAverageMaxMin.Average,4)); Maximum: $([math]::Round($durationSUBAverageMaxMin.Maximum,4)); Minimum: $([math]::Round($durationSUBAverageMaxMin.Minimum,4))"

    apiCallTracking -stage 'CustomDataCollection ManagementGroups and Subscriptions' -spacing ' '

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {

        $script:resourcesAllGroupedBySubcriptionId = $resourcesAll | Group-Object -property subscriptionId

        $totaldurationSubResourcesAddArray = ($arraySubResourcesAddArrayDuration.DurationSec | Measure-Object -sum).Sum
        Write-Host "Collecting custom data total duration writing the subResourcesArray: $totaldurationSubResourcesAddArray seconds"

        if (-not $azAPICallConf['htParameters'].HierarchyMapOnly -and -not $azAPICallConf['htParameters'].ManagementGroupsOnly) {
            if (-not $NoCsvExport) {

                #fluctuation
                Write-Host "Process Resource fluctuation"
                $start = get-date
                if (Test-Path -Filter "*$($ManagementGroupId)_ResourcesAll.csv" -LiteralPath "$($outputPath)") {
                    $startImportPrevious = get-date
                    $doResourceFluctuation = $true
                    
                    try {
                        $previous = Get-ChildItem -Path $outputPath -Filter "*$($ManagementGroupId)_ResourcesAll.csv" | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 -ErrorAction Stop
                        $importPrevious = Import-Csv -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($previous.Name)" -Encoding utf8 -Delimiter ";" | Select-Object -ExpandProperty id
                        Write-Host " Import previous ($($previous.Name)) duration: $((NEW-TIMESPAN -Start $startImportPrevious -End (get-date)).TotalSeconds)"
                    }
                    catch {
                        Write-Host " FAILED: Import-Csv '$($outputPath)$($DirectorySeparatorChar)$($previous.Name)'"
                        $doResourceFluctuation = $false

                    }

                    if ($doResourceFluctuation) {
                        #$importPrevious.Count

                        #https://gist.github.com/fatherjack/4c91cc6832b8b02d1b7319716a5fba52
                        function Compare-StringSet {
                            <#
                        .SYNOPSIS
                        Compare two sets of strings and see the matched and unmatched elements from each input
                        
                        .DESCRIPTION
                        Compares sets of 
                        
                        .PARAMETER Ref
                        The reference set of values to be compared
                        
                        .PARAMETER Diff
                        The difference set of values to be compared
                        
                        .PARAMETER CaseSensitive
                        Enables a case-sensitive comparison
                        
                        .EXAMPLE
                        $ref, $dif = @(
                            , @('a', 'b', 'c')
                            , @('b', 'c', 'd')
                        )
                        $Sets = Compare-StringSet $ref $dif
                        $Sets.RefOnly
                        
                        $Sets.DiffOnly
                        
                        $Sets.Both
                        
                        This example sets up two arrays with some similar values and then passes them both to the Compare-StringSet function. the results of this are stored in the variable $Sets.
                        $Sets is an object that has three properties - RefOnly, DiffOnly, and Both. These are sets of the incoming values where they intersect or not.
                        
                        .EXAMPLE
                        $ref, $dif = @(
                            , @('tree', 'house', 'football')
                            , @('dog', 'cat', 'tree', 'house', 'Football')
                        )
                        $Sets = Compare-StringSet $ref $dif -CaseSensitive
                        $Sets.RefOnly
                        $Sets.DiffOnly
                        $Sets.Both
                        
                        This example sets up two arrays with some similar values and then passes them both to the Compare-StringSet function using the -CaseSensitive switch. The results of this are stored in the variable $Sets.
                        $Sets is an object that has three properties - RefOnly, DiffOnly, and Both. 
                        
                        Because of the -CaseSensitive switch usage 'football' is shown as in RefOnly and 'Football' is shown as in DiffOnly.
                        
                        .NOTES
                        From https://gist.github.com/IISResetMe/57ce7b76e1001974a4f7170e10775875
                        #>
                        
                            param(
                                [string[]]$Ref,
                                [string[]]$Diff,

                                [switch]$CaseSensitive
                            )

                            $Comparer = if ($CaseSensitive) {
                                [System.StringComparer]::InvariantCulture
                            }
                            else {
                                [System.StringComparer]::InvariantCultureIgnoreCase
                            }

                            $Results = [ordered]@{
                                RefOnly  = @()
                                Both     = @()
                                DiffOnly = @()
                            }

                            $temp = [System.Collections.Generic.HashSet[string]]::new($Ref, $Comparer)
                            $temp.IntersectWith($Diff)
                            $Results['Both'] = $temp

                            #$temp = [System.Collections.Generic.HashSet[string]]::new($Ref, [System.StringComparer]::CurrentCultureIgnoreCase)
                            $temp = [System.Collections.Generic.HashSet[string]]::new($Ref, $Comparer)
                            $temp.ExceptWith($Diff)
                            $Results['RefOnly'] = $temp

                            #$temp = [System.Collections.Generic.HashSet[string]]::new($Diff, [System.StringComparer]::CurrentCultureIgnoreCase)
                            $temp = [System.Collections.Generic.HashSet[string]]::new($Diff, $Comparer)
                            $temp.ExceptWith($Ref)
                            $Results['DiffOnly'] = $temp

                            return [pscustomobject]$Results
                        }

                        Write-Host " Comparing previous ($($importPrevious.Count)) with latest ($($resourcesIdsAll.Count))"
                        $start = get-date
                        $x = Compare-StringSet $importPrevious $resourcesIdsAll.id
                        Write-Host " unique values in previous (deleted):" $x.RefOnly.Count
                        Write-Host " values that are contained in previous and latest: $($x.Both.Count)"
                        Write-Host " unique values in latest (added):" $x.DiffOnly.Count
                        $end = get-date
                        Write-Host " Compare previous with latest duration: $((NEW-TIMESPAN -Start $start -End $end).TotalMinutes) mins ($((NEW-TIMESPAN -Start $start -End $end).TotalSeconds) sec)"

                        $script:arrayResourceFluctuationFinal = [System.Collections.ArrayList]@()

                        #ADDED
                        $arrayAdded = [System.Collections.ArrayList]@()
                        foreach ($resource in $x.DiffOnly) {
                            $resourceSplitted = $resource.split('/')
                            #$resourceSplitted

                            $null = $arrayAdded.Add([PSCustomObject]@{
                                    subscriptionId = $resourceSplitted[2]
                                    resourceType0  = $resourceSplitted[6]
                                    resourceType1  = $resourceSplitted[7]
                                    resourceType2  = $resourceSplitted[9]
                                    resourceType3  = $resourceSplitted[11]
                                })
                            if ($resourceSplitted.Count -gt 13) {
                                Write-Host " Unforeseen Resource type!"
                                Write-Host " Please report this Resource type at $($GithubRepository): '$resource'"
                            }
                        }

                        if ($arrayAdded.Count -gt 0) {
                            $arrayGroupedByResourceType = $arrayAdded | group-object -Property resourceType0, resourceType1, resourceType2, resourceType3
                            foreach ($resourceType in $arrayGroupedByResourceType) {
                                $arrayGroupedBySubscription = $arrayGroupedByResourceType.where({ $_.Name -eq $resourceType.Name }).Group | Group-Object -Property subscriptionId | Select-Object -ExcludeProperty Group
                                $null = $arrayResourceFluctuationFinal.Add([PSCustomObject]@{
                                        Event                = 'Added'
                                        ResourceType         = $resourceType.Name
                                        'Resource count'     = $resourceType.Count
                                        'Subscription count' = ($arrayGroupedBySubscription | Measure-Object).Count
                                    })
                            }
                        }

                        #REMOVED
                        $arrayRemoved = [System.Collections.ArrayList]@()
                        foreach ($resource in $x.RefOnly) {
                            $resourceSplitted = $resource.split('/')
                            #$resourceSplitted

                            $null = $arrayRemoved.Add([PSCustomObject]@{
                                    subscriptionId = $resourceSplitted[2]
                                    resourceType0  = $resourceSplitted[6]
                                    resourceType1  = $resourceSplitted[7]
                                    resourceType2  = $resourceSplitted[9]
                                    resourceType3  = $resourceSplitted[11]
                                })
                            if ($resourceSplitted.Count -gt 13) {
                                Write-Host " Unforeseen Resource type!"
                                Write-Host " Please report this Resource type at $($GithubRepository): '$resource'"
                            }
                        }

                        if ($arrayRemoved.Count -gt 0) {
                            $arrayGroupedByResourceType = $arrayRemoved | group-object -Property resourceType0, resourceType1, resourceType2, resourceType3
                            foreach ($resourceType in $arrayGroupedByResourceType) {
                                $arrayGroupedBySubscription = $arrayGroupedByResourceType.where({ $_.Name -eq $resourceType.Name }).Group | Group-Object -Property subscriptionId | Select-Object -ExcludeProperty Group
                                $null = $arrayResourceFluctuationFinal.Add([PSCustomObject]@{
                                        Event                = 'Removed'
                                        ResourceType         = $resourceType.Name
                                        'Resource count'     = $resourceType.Count
                                        'Subscription count' = ($arrayGroupedBySubscription | Measure-Object).Count
                                    })
                            }
                        }
                    }
                }
                else {
                    Write-Host " Process Resource fluctuation skipped, no previous output (*$($ManagementGroupId)_ResourcesAll.csv) found"
                }

                if ($arrayResourceFluctuationFinal.Count -gt 0 -and $doResourceFluctuation) {
                    #DataCollection Export of Resource fluctuation
                    Write-Host "Exporting ResourceFluctuation CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourceFluctuation.csv'"
                    $arrayResourceFluctuationFinal | Sort-Object -Property ResourceType | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourceFluctuation.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
                }
                Write-Host "Process Resource fluctuation duration: $((NEW-TIMESPAN -Start $start -End (get-date)).TotalSeconds) seconds"

                #DataCollection Export of All Resources
                Write-Host "Exporting ResourcesAll CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourcesAll.csv'"
                $resourcesIdsAll | Sort-Object -Property id | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_ResourcesAll.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
            }
        }
    }

    if ($azAPICallConf['htParameters'].LargeTenant -eq $false -or $azAPICallConf['htParameters'].PolicyAtScopeOnly -eq $false -or $azAPICallConf['htParameters'].RBACAtScopeOnly -eq $false) {
        if (($azAPICallConf['checkContext']).Tenant.Id -ne $ManagementGroupId) {
            addRowToTable `
                -level (($htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain | Measure-Object).Count - 1) `
                -mgName $getMgParentName `
                -mgId $getMgParentId `
                -mgParentId "'upperScopes'" `
                -mgParentName 'upperScopes'
        }
    }

    if ($azAPICallConf['htParameters'].LargeTenant -eq $true -or $azAPICallConf['htParameters'].PolicyAtScopeOnly -eq $true) {
        if (($azAPICallConf['checkContext']).Tenant.Id -ne $ManagementGroupId) {
            $currentTask = "Policy assignments ('$($ManagementGroupId)')"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementgroups/$($ManagementGroupId)/providers/Microsoft.Authorization/policyAssignments?`$filter=atScope()&api-version=2021-06-01"
            $method = 'GET'
            $upperScopesPolicyAssignments = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

            $upperScopesPolicyAssignments = $upperScopesPolicyAssignments | where-object { $_.properties.scope -ne "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)" }
            $upperScopesPolicyAssignmentsPolicyCount = (($upperScopesPolicyAssignments | Where-Object { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' })).count
            $upperScopesPolicyAssignmentsPolicySetCount = (($upperScopesPolicyAssignments | Where-Object { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' })).count
            $upperScopesPolicyAssignmentsPolicyAtScopeCount = (($upperScopesPolicyAssignments | Where-Object { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -and $_.Id -match "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)" })).count
            $upperScopesPolicyAssignmentsPolicySetAtScopeCount = (($upperScopesPolicyAssignments | Where-Object { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' -and $_.Id -match "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)" })).count
            $upperScopesPolicyAssignmentsPolicyAndPolicySetAtScopeCount = ($upperScopesPolicyAssignmentsPolicyAtScopeCount + $upperScopesPolicyAssignmentsPolicySetAtScopeCount)
            foreach ($L0mgmtGroupPolicyAssignment in $upperScopesPolicyAssignments) {

                if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -OR $L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {
                    if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/') {
                        $PolicyVariant = 'Policy'
                        $Id = ($L0mgmtGroupPolicyAssignment.properties.policydefinitionid).ToLower()
                        $Def = ($htCacheDefinitionsPolicy).($Id)
                        $PolicyAssignmentScope = $L0mgmtGroupPolicyAssignment.Properties.Scope
                        #$PolicyAssignmentNotScopes = $L0mgmtGroupPolicyAssignment.Properties.NotScopes -join "$CsvDelimiterOpposite "
                        $PolicyAssignmentId = ($L0mgmtGroupPolicyAssignment.Id).ToLower()
                        $PolicyAssignmentName = $L0mgmtGroupPolicyAssignment.Name
                        $PolicyAssignmentDisplayName = $L0mgmtGroupPolicyAssignment.Properties.DisplayName
                        if (($L0mgmtGroupPolicyAssignment.Properties.Description).length -eq 0) {
                            $PolicyAssignmentDescription = 'no description given'
                        }
                        else {
                            $PolicyAssignmentDescription = $L0mgmtGroupPolicyAssignment.Properties.Description
                        }

                        if ($L0mgmtGroupPolicyAssignment.identity) {
                            $PolicyAssignmentIdentity = $L0mgmtGroupPolicyAssignment.identity.principalId
                        }
                        else {
                            $PolicyAssignmentIdentity = 'n/a'
                        }

                        if ($Def.Type -eq 'Custom') {
                            $policyDefintionScope = $Def.Scope
                            $policyDefintionScopeMgSub = $Def.ScopeMgSub
                            $policyDefintionScopeId = $Def.ScopeId
                        }
                        else {
                            $policyDefintionScope = 'n/a'
                            $policyDefintionScopeMgSub = 'n/a'
                            $policyDefintionScopeId = 'n/a'
                        }

                        $assignedBy = 'n/a'
                        $createdBy = ''
                        $createdOn = ''
                        $updatedBy = ''
                        $updatedOn = ''
                        if ($L0mgmtGroupPolicyAssignment.properties.metadata) {
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy) {
                                $assignedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdBy) {
                                $createdBy = $L0mgmtGroupPolicyAssignment.properties.metadata.createdBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdOn) {
                                $createdOn = $L0mgmtGroupPolicyAssignment.properties.metadata.createdOn
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy) {
                                $updatedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn) {
                                $updatedOn = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn
                            }
                        }

                        if (($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message) {
                            $nonComplianceMessage = ($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message
                        }
                        else {
                            $nonComplianceMessage = ''
                        }

                        $formatedPolicyAssignmentParameters = ''
                        $hlp = $L0mgmtGroupPolicyAssignment.Properties.Parameters
                        if (-not [string]::IsNullOrEmpty($hlp)) {
                            $arrayPolicyAssignmentParameters = @()
                            $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                                "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                            }
                            $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                        }

                        #mgSecureScore
                        $mgAscSecureScoreResult = ''

                        addRowToTable `
                            -level (($htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain).Count - 1) `
                            -mgName $getMgParentName `
                            -mgId $getMgParentId `
                            -mgParentId "'upperScopes'" `
                            -mgParentName 'upperScopes' `
                            -mgASCSecureScore $mgAscSecureScoreResult `
                            -Policy $Def.DisplayName `
                            -PolicyDescription $Def.Description `
                            -PolicyVariant $PolicyVariant `
                            -PolicyType $Def.Type `
                            -PolicyCategory $Def.Category `
                            -PolicyDefinitionIdGuid (($Def.Id) -replace '.*/') `
                            -PolicyDefinitionId $Def.PolicyDefinitionId `
                            -PolicyDefintionScope $policyDefintionScope `
                            -PolicyDefintionScopeMgSub $policyDefintionScopeMgSub `
                            -PolicyDefintionScopeId $policyDefintionScopeId `
                            -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedManagementGroup `
                            -PolicyDefinitionsScopedCount $PolicyDefinitionsScopedCount `
                            -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedManagementGroup `
                            -PolicySetDefinitionsScopedCount $PolicySetDefinitionsScopedCount `
                            -PolicyDefinitionEffectDefault ($htCacheDefinitionsPolicy).(($Def.PolicyDefinitionId)).effectDefaultValue `
                            -PolicyDefinitionEffectFixed ($htCacheDefinitionsPolicy).(($Def.PolicyDefinitionId)).effectFixedValue `
                            -PolicyAssignmentScope $PolicyAssignmentScope `
                            -PolicyAssignmentScopeMgSubRg 'Mg' `
                            -PolicyAssignmentScopeName ($PolicyAssignmentScope -replace '.*/', '') `
                            -PolicyAssignmentNotScopes $L0mgmtGroupPolicyAssignment.Properties.NotScopes `
                            -PolicyAssignmentId $PolicyAssignmentId `
                            -PolicyAssignmentName $PolicyAssignmentName `
                            -PolicyAssignmentDisplayName $PolicyAssignmentDisplayName `
                            -PolicyAssignmentDescription $PolicyAssignmentDescription `
                            -PolicyAssignmentEnforcementMode $L0mgmtGroupPolicyAssignment.Properties.EnforcementMode `
                            -PolicyAssignmentNonComplianceMessages $L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages `
                            -PolicyAssignmentIdentity $PolicyAssignmentIdentity `
                            -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsManagementGroup `
                            -PolicyAssignmentCount $upperScopesPolicyAssignmentsPolicyCount `
                            -PolicyAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicyAtScopeCount `
                            -PolicyAssignmentParameters $L0mgmtGroupPolicyAssignment.Properties.Parameters `
                            -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                            -PolicyAssignmentAssignedBy $assignedBy `
                            -PolicyAssignmentCreatedBy $createdBy `
                            -PolicyAssignmentCreatedOn $createdOn `
                            -PolicyAssignmentUpdatedBy $updatedBy `
                            -PolicyAssignmentUpdatedOn $updatedOn `
                            -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsManagementGroup `
                            -PolicySetAssignmentCount $upperScopesPolicyAssignmentsPolicySetCount `
                            -PolicySetAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicySetAtScopeCount `
                            -PolicyAndPolicySetAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicyAndPolicySetAtScopeCount
                    }

                    if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {
                        $PolicyVariant = 'PolicySet'
                        $Id = ($L0mgmtGroupPolicyAssignment.properties.policydefinitionid).ToLower()
                        $Def = ($htCacheDefinitionsPolicySet).($Id)
                        $PolicyAssignmentScope = $L0mgmtGroupPolicyAssignment.Properties.Scope
                        #$PolicyAssignmentNotScopes = $L0mgmtGroupPolicyAssignment.Properties.NotScopes -join "$CsvDelimiterOpposite "
                        $PolicyAssignmentId = ($L0mgmtGroupPolicyAssignment.Id).ToLower()
                        $PolicyAssignmentName = $L0mgmtGroupPolicyAssignment.Name
                        $PolicyAssignmentDisplayName = $L0mgmtGroupPolicyAssignment.Properties.DisplayName
                        if (($L0mgmtGroupPolicyAssignment.Properties.Description).length -eq 0) {
                            $PolicyAssignmentDescription = 'no description given'
                        }
                        else {
                            $PolicyAssignmentDescription = $L0mgmtGroupPolicyAssignment.Properties.Description
                        }

                        if ($L0mgmtGroupPolicyAssignment.identity) {
                            $PolicyAssignmentIdentity = $L0mgmtGroupPolicyAssignment.identity.principalId
                        }
                        else {
                            $PolicyAssignmentIdentity = 'n/a'
                        }

                        if ($Def.Type -eq 'Custom') {
                            $policyDefintionScope = $Def.Scope
                            $policyDefintionScopeMgSub = $Def.ScopeMgSub
                            $policyDefintionScopeId = $Def.ScopeId
                        }
                        else {
                            $policyDefintionScope = 'n/a'
                            $policyDefintionScopeMgSub = 'n/a'
                            $policyDefintionScopeId = 'n/a'
                        }

                        $assignedBy = 'n/a'
                        $createdBy = ''
                        $createdOn = ''
                        $updatedBy = ''
                        $updatedOn = ''
                        if ($L0mgmtGroupPolicyAssignment.properties.metadata) {
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy) {
                                $assignedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdBy) {
                                $createdBy = $L0mgmtGroupPolicyAssignment.properties.metadata.createdBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdOn) {
                                $createdOn = $L0mgmtGroupPolicyAssignment.properties.metadata.createdOn
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy) {
                                $updatedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy
                            }
                            if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn) {
                                $updatedOn = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn
                            }
                        }

                        if (($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message) {
                            $nonComplianceMessage = ($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message
                        }
                        else {
                            $nonComplianceMessage = ''
                        }

                        $formatedPolicyAssignmentParameters = ''
                        $hlp = $L0mgmtGroupPolicyAssignment.Properties.Parameters
                        if (-not [string]::IsNullOrEmpty($hlp)) {
                            $arrayPolicyAssignmentParameters = @()
                            $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                                "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                            }
                            $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                        }

                        addRowToTable `
                            -level (($htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain).Count - 1) `
                            -mgName $getMgParentName `
                            -mgId $getMgParentId `
                            -mgParentId "'upperScopes'" `
                            -mgParentName 'upperScopes' `
                            -mgASCSecureScore $mgAscSecureScoreResult `
                            -Policy $Def.DisplayName `
                            -PolicyDescription $Def.Description `
                            -PolicyVariant $PolicyVariant `
                            -PolicyType $Def.Type `
                            -PolicyCategory $Def.Category `
                            -PolicyDefinitionIdGuid (($Def.Id) -replace '.*/') `
                            -PolicyDefinitionId $Def.PolicyDefinitionId `
                            -PolicyDefintionScope $policyDefintionScope `
                            -PolicyDefintionScopeMgSub $policyDefintionScopeMgSub `
                            -PolicyDefintionScopeId $policyDefintionScopeId `
                            -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedManagementGroup `
                            -PolicyDefinitionsScopedCount $PolicyDefinitionsScopedCount `
                            -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedManagementGroup `
                            -PolicySetDefinitionsScopedCount $PolicySetDefinitionsScopedCount `
                            -PolicyAssignmentScope $PolicyAssignmentScope `
                            -PolicyAssignmentScopeMgSubRg 'Mg' `
                            -PolicyAssignmentScopeName ($PolicyAssignmentScope -replace '.*/', '') `
                            -PolicyAssignmentNotScopes $L0mgmtGroupPolicyAssignment.Properties.NotScopes `
                            -PolicyAssignmentId $PolicyAssignmentId `
                            -PolicyAssignmentName $PolicyAssignmentName `
                            -PolicyAssignmentDisplayName $PolicyAssignmentDisplayName `
                            -PolicyAssignmentDescription $PolicyAssignmentDescription `
                            -PolicyAssignmentEnforcementMode $L0mgmtGroupPolicyAssignment.Properties.EnforcementMode `
                            -PolicyAssignmentNonComplianceMessages $L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages `
                            -PolicyAssignmentIdentity $PolicyAssignmentIdentity `
                            -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsManagementGroup `
                            -PolicyAssignmentCount $upperScopesPolicyAssignmentsPolicyCount `
                            -PolicyAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicyAtScopeCount `
                            -PolicyAssignmentParameters $L0mgmtGroupPolicyAssignment.Properties.Parameters `
                            -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                            -PolicyAssignmentAssignedBy $assignedBy `
                            -PolicyAssignmentCreatedBy $createdBy `
                            -PolicyAssignmentCreatedOn $createdOn `
                            -PolicyAssignmentUpdatedBy $updatedBy `
                            -PolicyAssignmentUpdatedOn $updatedOn `
                            -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsManagementGroup `
                            -PolicySetAssignmentCount $upperScopesPolicyAssignmentsPolicySetCount `
                            -PolicySetAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicySetAtScopeCount `
                            -PolicyAndPolicySetAssignmentAtScopeCount $upperScopesPolicyAssignmentsPolicyAndPolicySetAtScopeCount
                    }
                }
            }
        }
    }

    if ($azAPICallConf['htParameters'].LargeTenant -eq $true -or $azAPICallConf['htParameters'].RBACAtScopeOnly -eq $true) {

        #RoleAssignment API (system metadata e.g. createdOn)
        $currentTask = "Role assignments API '$($ManagementGroupId)'"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)/providers/Microsoft.Authorization/roleAssignments?api-version=2015-07-01"
        $method = 'GET'
        $roleAssignmentsFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

        if ($roleAssignmentsFromAPI.Count -gt 0) {
            $principalsToResolve = @()
            $principalsToResolve = foreach ($ra in $roleAssignmentsFromAPI.properties | Sort-Object -Property principalId -Unique) {
                if (-not $htPrincipals.($ra.principalId)) {
                    $ra.principalId
                }
            }

            if ($principalsToResolve.Count -gt 0) {
                ResolveObjectIds -objectIds $principalsToResolve
            }
        }

        #$upperScopesRoleAssignments = GetRoleAssignments -Scope "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)" -scopeDetails "getRoleAssignments upperScopes (Mg)"
        $upperScopesRoleAssignments = $roleAssignmentsFromAPI

        $upperScopesRoleAssignmentsLimitUtilization = (($upperScopesRoleAssignments | Where-Object { $_.properties.scope -eq "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)" })).count
        #tenantLevelRoleAssignments
        if (-not $htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments') {
            $tenantLevelRoleAssignmentsCount = (($upperScopesRoleAssignments | Where-Object { $_.id -like '/providers/Microsoft.Authorization/roleAssignments/*' })).count
            $htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments' = @{}
            $htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments'.AssignmentsCount = $tenantLevelRoleAssignmentsCount
        }

        foreach ($upperScopesRoleAssignment in $upperScopesRoleAssignments) {

            $roleAssignmentId = ($upperScopesRoleAssignment.id).ToLower()

            if ($upperScopesRoleAssignment.properties.scope -ne "/providers/Microsoft.Management/managementGroups/$ManagementGroupId") {
                $roleDefinitionId = $upperScopesRoleAssignment.properties.roleDefinitionId
                $roleDefinitionIdGuid = $roleDefinitionId -replace '.*/'

                if (-not ($htCacheDefinitionsRole).($roleDefinitionIdGuid)) {
                    $roleDefinitionName = "'This roleDefinition likely was deleted although a roleAssignment existed'"
                }
                else {
                    $roleDefinitionName = ($htCacheDefinitionsRole).($roleDefinitionIdGuid).Name
                }

                if (($htPrincipals.($upperScopesRoleAssignment.properties.principalId).displayName).length -eq 0) {
                    $roleAssignmentIdentityDisplayname = 'n/a'
                }
                else {
                    if ($htPrincipals.($upperScopesRoleAssignment.properties.principalId).type -eq 'User') {
                        if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                            $roleAssignmentIdentityDisplayname = $htPrincipals.($upperScopesRoleAssignment.properties.principalId).displayName
                        }
                        else {
                            $roleAssignmentIdentityDisplayname = 'scrubbed'
                        }
                    }
                    else {
                        $roleAssignmentIdentityDisplayname = $htPrincipals.($upperScopesRoleAssignment.properties.principalId).displayName
                    }
                }
                if (-not $htPrincipals.($upperScopesRoleAssignment.properties.principalId).signInName) {
                    $roleAssignmentIdentitySignInName = 'n/a'
                }
                else {
                    if ($htPrincipals.($upperScopesRoleAssignment.properties.principalId).type -eq 'User') {
                        if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                            $roleAssignmentIdentitySignInName = $htPrincipals.($upperScopesRoleAssignment.properties.principalId).signInName
                        }
                        else {
                            $roleAssignmentIdentitySignInName = 'scrubbed'
                        }
                    }
                    else {
                        $roleAssignmentIdentitySignInName = $htPrincipals.($upperScopesRoleAssignment.properties.principalId).signInName
                    }
                }
                $roleAssignmentIdentityObjectId = $upperScopesRoleAssignment.properties.principalId
                $roleAssignmentIdentityObjectType = $htPrincipals.($upperScopesRoleAssignment.properties.principalId).type

                $roleAssignmentScope = $upperScopesRoleAssignment.properties.scope
                $roleAssignmentScopeName = $roleAssignmentScope -replace '.*/'
                $roleAssignmentScopeType = 'MG'

                $roleSecurityCustomRoleOwner = 0
                if (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Actions -eq '*' -and ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotActions)).length -eq 0 -and ($htCacheDefinitionsRole).$($roleDefinitionIdGuid).IsCustom -eq $True) {
                    $roleSecurityCustomRoleOwner = 1
                }
                $roleSecurityOwnerAssignmentSP = 0
                if ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Id -eq '8e3af657-a8ff-443c-a75c-2fe8c4bcb635' -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal') -or (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Actions -eq '*' -and ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotActions)).length -eq 0 -and ($htCacheDefinitionsRole).$($roleDefinitionIdGuid).IsCustom -eq $True -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal')) {
                    $roleSecurityOwnerAssignmentSP = 1
                }

                $createdBy = ''
                $createdOn = ''
                $createdOnUnformatted = $null
                $updatedBy = ''
                $updatedOn = ''

                if ($upperScopesRoleAssignment.properties.createdBy) {
                    $createdBy = $upperScopesRoleAssignment.properties.createdBy
                }
                if ($upperScopesRoleAssignment.properties.createdOn) {
                    $createdOn = $upperScopesRoleAssignment.properties.createdOn
                }
                if ($upperScopesRoleAssignment.properties.updatedBy) {
                    $updatedBy = $upperScopesRoleAssignment.properties.updatedBy
                }
                if ($upperScopesRoleAssignment.properties.updatedOn) {
                    $updatedOn = $upperScopesRoleAssignment.properties.updatedOn
                }
                $createdOnUnformatted = $upperScopesRoleAssignment.properties.createdOn

                if (($azAPICallConf['checkContext']).Tenant.Id -ne $ManagementGroupId) {
                    $levelToUse = (($htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain).Count - 1)
                    $toUseAsmgName = $getMgParentName
                    $toUseAsmgId = $getMgParentId
                    $toUseAsmgParentId = "'upperScopes'"
                    $toUseAsmgParentName = 'upperScopes'
                }
                else {
                    $levelToUse = (($htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain).Count)
                    $toUseAsmgName = $selectedManagementGroupId.DisplayName
                    $toUseAsmgId = $selectedManagementGroupId.Name
                    $toUseAsmgParentId = 'Tenant'
                    $toUseAsmgParentName = 'Tenant'
                }

                #mgSecureScore
                $mgAscSecureScoreResult = ''

                addRowToTable `
                    -level $levelToUse `
                    -mgName $toUseAsmgName `
                    -mgId $toUseAsmgId `
                    -mgParentId $toUseAsmgParentId `
                    -mgParentName $toUseAsmgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -RoleDefinitionId $roleDefinitionIdGuid `
                    -RoleDefinitionName $roleDefinitionName `
                    -RoleIsCustom ($htCacheDefinitionsRole).$($roleDefinitionIdGuid).IsCustom `
                    -RoleAssignableScopes (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).AssignableScopes -join "$CsvDelimiterOpposite ") `
                    -RoleActions (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Actions -join "$CsvDelimiterOpposite ") `
                    -RoleNotActions (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotActions -join "$CsvDelimiterOpposite ") `
                    -RoleDataActions (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).DataActions -join "$CsvDelimiterOpposite ") `
                    -RoleNotDataActions (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotDataActions -join "$CsvDelimiterOpposite ") `
                    -RoleAssignmentIdentityDisplayname $roleAssignmentIdentityDisplayname `
                    -RoleAssignmentIdentitySignInName $roleAssignmentIdentitySignInName `
                    -RoleAssignmentIdentityObjectId $roleAssignmentIdentityObjectId `
                    -RoleAssignmentIdentityObjectType $roleAssignmentIdentityObjectType `
                    -RoleAssignmentId $roleAssignmentId `
                    -RoleAssignmentScope $roleAssignmentScope `
                    -RoleAssignmentScopeName $roleAssignmentScopeName `
                    -RoleAssignmentScopeType $roleAssignmentScopeType `
                    -RoleAssignmentCreatedBy $createdBy `
                    -RoleAssignmentCreatedOn $createdOn `
                    -RoleAssignmentCreatedOnUnformatted $createdOnUnformatted `
                    -RoleAssignmentUpdatedBy $updatedBy `
                    -RoleAssignmentUpdatedOn $updatedOn `
                    -RoleAssignmentsLimit $LimitRBACRoleAssignmentsManagementGroup `
                    -RoleAssignmentsCount $upperScopesRoleAssignmentsLimitUtilization `
                    -RoleSecurityCustomRoleOwner $roleSecurityCustomRoleOwner `
                    -RoleSecurityOwnerAssignmentSP $roleSecurityOwnerAssignmentSP `
                    -RoleAssignmentPIM 'unknown'
            }
        }
    }
}
function processDefinitionInsights() {
    $startDefinitionInsights = Get-Date
    Write-Host ' Building DefinitionInsights'

    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
    $utf8 = New-Object -TypeName System.Text.UTF8Encoding

    #region definitionInsightsAzurePolicy
    $htmlDefinitionInsights = [System.Text.StringBuilder]::new()
    [void]$htmlDefinitionInsights.AppendLine( @'
    <button type="button" class="collapsible" id="definitionInsights_AzurePolicy"><hr class="hr-text-definitionInsightsPolicy" data-content="Policy" /></button>
    <div class="content contentDefinitionInsights">
'@)

    #policy/policySet preQuery
    #region preQuery
    $htPolicyWithAssignments = @{}
    $htPolicyWithAssignments.policy = @{}
    $htPolicyWithAssignments.policySet = @{}

    foreach ($policyOrPolicySet in $arrayPolicyAssignmentsEnriched | Sort-Object -Property PolicyAssignmentId -Unique | Group-Object -property PolicyId, PolicyVariant) {
        $policyOrPolicySetNameSplit = $policyOrPolicySet.name.split(', ')
        if ($policyOrPolicySetNameSplit[1] -eq 'Policy') {
            #policy
            if (-not ($htPolicyWithAssignments).policy.($policyOrPolicySetNameSplit[0])) {
                $pscustomObj = [System.Collections.ArrayList]@()
                foreach ($entry in $policyOrPolicySet.group) {
                    $null = $pscustomObj.Add([PSCustomObject]@{
                            PolicyAssignmentId          = $entry.PolicyAssignmentId
                            PolicyAssignmentDisplayName = $entry.PolicyAssignmentDisplayName
                        })
                }
                ($htPolicyWithAssignments).policy.($policyOrPolicySetNameSplit[0]) = @{}
                ($htPolicyWithAssignments).policy.($policyOrPolicySetNameSplit[0]).Assignments = [array]($pscustomObj)
            }
        }
        else {
            #policySet
            if (-not ($htPolicyWithAssignments).policySet.($policyOrPolicySetNameSplit[0])) {
                $pscustomObj = [System.Collections.ArrayList]@()
                foreach ($entry in $policyOrPolicySet.group) {
                    $null = $pscustomObj.Add([PSCustomObject]@{
                            PolicyAssignmentId          = $entry.PolicyAssignmentId
                            PolicyAssignmentDisplayName = $entry.PolicyAssignmentDisplayName
                        })
                }
                ($htPolicyWithAssignments).policySet.($policyOrPolicySetNameSplit[0]) = @{}
                ($htPolicyWithAssignments).policySet.($policyOrPolicySetNameSplit[0]).Assignments = [array]($pscustomObj)
            }
        }
    }

    foreach ($customPolicy in $tenantCustomPolicies) {
        if ($htPoliciesWithAssignmentOnRgRes.($customPolicy.PolicyDefinitionId)) {
            if (-not ($htPolicyWithAssignments).policy.($customPolicy.PolicyDefinitionId)) {
                ($htPolicyWithAssignments).policy.($customPolicy.PolicyDefinitionId) = @{}
                ($htPolicyWithAssignments).policy.($customPolicy.PolicyDefinitionId).Assignments = [array]($htPoliciesWithAssignmentOnRgRes.($customPolicy.PolicyDefinitionId).Assignments)
            }
            else {
                $array = @()
                $array += ($htPolicyWithAssignments).policy.($customPolicy.PolicyDefinitionId).Assignments
                $array += $htPoliciesWithAssignmentOnRgRes.($customPolicy.PolicyDefinitionId).Assignments
                ($htPolicyWithAssignments).policy.($customPolicy.PolicyDefinitionId).Assignments = $array
            }
        }
    }

    foreach ($customPolicySet in $tenantCustomPolicySets) {
        if ($htPoliciesWithAssignmentOnRgRes.($customPolicySet.PolicyDefinitionId)) {
            if (-not ($htPolicyWithAssignments).policySet.($customPolicySet.PolicyDefinitionId)) {
                ($htPolicyWithAssignments).policySet.($customPolicySet.PolicyDefinitionId) = @{}
                ($htPolicyWithAssignments).policySet.($customPolicySet.PolicyDefinitionId).Assignments = [array]($htPoliciesWithAssignmentOnRgRes.($customPolicySet.PolicyDefinitionId).Assignments)
            }
            else {
                $array = @()
                $array += ($htPolicyWithAssignments).policySet.($customPolicySet.PolicyDefinitionId).Assignments
                $array += $htPoliciesWithAssignmentOnRgRes.($customPolicySet.PolicyDefinitionId).Assignments
                ($htPolicyWithAssignments).policySet.($customPolicySet.PolicyDefinitionId).Assignments = $array
            }
        }
    }
    #endregion preQuery

    #region definitionInsightsPolicyDefinitions
    $startDefinitionInsightsPolicyDefinitions = Get-Date
    Write-Host '  processing DefinitionInsights Policy definitions'
    $tfCount = $tenantAllPoliciesCount
    $htmlTableId = 'definitionInsights_Policy'
    [void]$htmlDefinitionInsights.AppendLine( @"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="button_definitionInsights_Policy"><i class="fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$tenantAllPoliciesCount Policy definitions</span></button>
<div class="content contentDefinitionInsights">

<div id="extGridPolicy" class="panel panel-info pull-left" >
    <div class="panel-body bg-info">
        <div class="me">
            <label>Search JSON</label>
            <span id="polJson"></span>
        </div>

        <div class="me">
            <label>Builtin/Custom</label>
            <span id="polType"></span>
        </div>

        <div class="me">
            <label>Category</label>
            <span id="polCategory"></span>
        </div>

        <div class="me">
            <label>Deprecated</label>
            <span id="polDeprecated"></span>
        </div>

        <div class="me">
            <label>Preview</label>
            <span id="polPreview"></span>
        </div>

        <div class="me">
            <label>Scope Mg/Sub</label>
            <span id="polScope"></span>
        </div>

        <div class="me">
            <label>Scope Name/Id</label>
            <span id="polScopeNameId"></span>
        </div>

        <div class="me">
            <label>Effect default</label>
            <span id="polEffectDefaultValue"></span>
        </div>

        <div class="me">
            <label>hasAssignment</label>
            <span id="polHasAssignment"></span>
        </div>

        <div class="me" style="display: none;">
            <label>polPolAssignments</label>
            <span id="polPolAssignments"></span>
        </div>

        <div class="me" style="display: none;">
            <label>polhid1</label>
            <span id="polhid1"></span>
        </div>

        <div class="me">
            <label>usedInPolicySet</label>
            <span id="polUsedInPolicySet"></span>
        </div>

        <div class="me" style="display: none;">
            <label>polUsedInPolicySetCount</label>
            <span id="polUsedInPolicySetCount"></span>
        </div>

        <div class="me" style="display: none;">
            <label>polUsedInPolicySets</label>
            <span id="polUsedInPolicySets"></span>
        </div>

        <div class="me">
            <label>Roles</label>
            <span id="polRoledefs"></span>
        </div>

    </div>
</div>

<div class="pull-left" style="margin-left: 0.5em;">

<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>JSON</th>
<th>PolicyType</th>
<th>Category</th>
<th>Deprecated</th>
<th>Preview</th>
<th>Scope Mg/Sub</th>
<th>Scope Name/Id</th>
<th>effectDefaultValue</th>
<th>hasAssignments</th>
<th>Assignments Count</th>
<th>Assignments</th>
<th>UsedInPolicySet</th>
<th>PolicySetsCount</th>
<th>PolicySets</th>
<th>Roles</th>
</tr>
</thead>
<tbody>
"@)

    $cnter = 0
    $htmlDefinitionInsightshlp = $null
    $htmlDefinitionInsightshlp = foreach ($policy in (($htCacheDefinitionsPolicy).Values | Sort-Object @{Expression = { $_.DisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {

        $cnter++
        if ($cnter % 1000 -eq 0) {
            Write-Host "   $cnter Policy definitions processed"
        }

        $hasAssignments = 'false'
        $assignmentsCount = 0
        $assignmentsDetailed = 'n/a'

        if (($htPolicyWithAssignments).policy.($policy.PolicyDefinitionId)) {
            $hasAssignments = 'true'
            $assignments = ($htPolicyWithAssignments).policy.($policy.PolicyDefinitionId).Assignments
            $assignmentsCount = $assignments.Count

            if ($assignmentsCount -gt 0) {
                $arrayAssignmentDetails = @()
                $arrayAssignmentDetails = foreach ($assignment in $assignments) {
                    if ($assignment.PolicyAssignmentDisplayName -eq '') {
                        $polAssDisplayName = '<i>#no AssignmentName given</i>'
                    }
                    else {
                        $polAssDisplayName = $assignment.PolicyAssignmentDisplayName
                    }
                    "$($assignment.PolicyAssignmentId) (<b>$($polAssDisplayName)</b>)"
                }
                $assignmentsDetailed = $arrayAssignmentDetails -join "$CsvDelimiterOpposite "
            }

        }

        $roleDefinitionIds = 'n/a'
        if ($policy.RoleDefinitionIds -ne 'n/a') {
            $arrayRoleDefDetails = @()
            $arrayRoleDefDetails = foreach ($roleDef in $policy.RoleDefinitionIds) {
                $roleDefIdOnly = $roleDef -replace '.*/'
                if (($roleDefIdOnly).Length -ne 36) {
                    "'INVALID RoleDefId!' ($($roleDefIdOnly))"
                }
                else {
                    $roleDefHlp = ($htCacheDefinitionsRole).($roleDefIdOnly)
                    "'$($roleDefHlp.Name)' ($($roleDefHlp.Id))"
                }
            }
            $roleDefinitionIds = $arrayRoleDefDetails -join "$CsvDelimiterOpposite "
        }

        $scopeDetails = 'n/a'
        if ($policy.ScopeId -ne 'n/a') {
            if ([string]::IsNullOrEmpty($policy.ScopeId)) {
                Write-Host "unexpected IsNullOrEmpty - processing: $($policy | ConvertTo-Json -depth 99)"
            }
            $scopeDetails = "$($policy.ScopeId) ($($htEntities.($policy.ScopeId).DisplayName))"
        }

        $usedInPolicySet = 'false'
        $usedInPolicySetCount = 0
        $usedInPolicySets = 'n/a'

        if ($htPoliciesUsedInPolicySets.($policy.PolicyDefinitionId)) {
            $usedInPolicySet = 'true'
            $usedInPolicySetCount = ($htPoliciesUsedInPolicySets.($policy.PolicyDefinitionId).policySet).Count
            $usedInPolicySets = ($htPoliciesUsedInPolicySets.($policy.PolicyDefinitionId).policySet | Sort-Object) -join "$CsvDelimiterOpposite "
        }

        $json = $($policy.Json | convertto-json -depth 99)
        $guid = ([System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($policy.PolicyDefinitionId)))) -replace '-'
        @"
<tr>
<td class="definitionInsightsjsontd">

    <div class="defCopy">
        <button class= "defCopyButton" onclick="copyDef('json$($guid)')">Copy definition</button>
            <script>
            function copyDef(elementId) {
                var copyOfTheDefinition = document.getElementById(elementId).innerText;
                navigator.clipboard.writeText(copyOfTheDefinition);
            }
        </script>
    </div>

    <div class="definitioninsightsjsondiv" id="json$($guid)"></div>

    <script>
        var jsonObj$($guid) = {};
        var jsonViewer$($guid) = new JSONViewer();
        document.querySelector("#json$($guid)").appendChild(jsonViewer$($guid).getContainer());
        var setJSON$($guid) = function() {
            try {
                jsonObj$($guid) = JSON.parse(JSON.stringify($($json)));
            }
            catch (err) {
                alert(err);
            }
        };
        setJSON$($guid)();
        jsonViewer$($guid).showJSON(jsonObj$($guid))
    </script>

</td>
<td>$($policy.Type)</td>
<td>$($policy.Category -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policy.Deprecated)</td>
<td>$($policy.Preview)</td>
<td>$($policy.ScopeMgSub)</td>
<td>$($scopeDetails -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policy.effectDefaultValue)</td>
<td>$hasAssignments</td>
<td>$assignmentsCount</td>
<td class="breakwordall">$assignmentsDetailed</td>
<td class="breakwordall">$usedInPolicySet</td>
<td class="breakwordall">$usedInPolicySetCount</td>
<td class="breakwordall">$usedInPolicySets</td>
<td class="breakwordall">$($roleDefinitionIds -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
    }
    [void]$htmlDefinitionInsights.AppendLine($htmlDefinitionInsightshlp)
    $htmlDefinitionInsights | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $htmlDefinitionInsights = [System.Text.StringBuilder]::new()
    [void]$htmlDefinitionInsights.AppendLine( @"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
    if ($tfCount -gt 10) {
        $spectrum = "10, $tfCount"
        if ($tfCount -gt 50) {
            $spectrum = "10, 25, 50, $tfCount"
        }
        if ($tfCount -gt 100) {
            $spectrum = "10, 30, 50, 100, $tfCount"
        }
        if ($tfCount -gt 500) {
            $spectrum = "10, 30, 50, 100, 250, $tfCount"
        }
        if ($tfCount -gt 1000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
        }
        if ($tfCount -gt 2000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
        }
        if ($tfCount -gt 3000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
        }
        [void]$htmlDefinitionInsights.AppendLine( @"
        paging: {
            results_per_page: [
                'Records: ',
                [$spectrum]
            ]
        },
        /*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
    }
    [void]$htmlDefinitionInsights.AppendLine( @"
    btn_reset: true,
    highlight_keywords: true,
    alternate_rows: true,
    auto_filter: {
        delay: 1100
    },
    linked_filters: true,
    no_results_message: true,
    rows_counter: {
        text: 'results: '
    },
    col_1: 'select',
    col_2: 'select',
    col_3: 'select',
    col_4: 'select',
    col_5: 'select',
    col_7: 'select',
    col_8: 'select',
    col_11: 'select',
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'caseinsensitivestring',
        'number',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring'
    ],
    external_flt_ids: [
        'polJson',
        'polType',
        'polCategory',
        'polDeprecated',
        'polPreview',
        'polScope',
        'polScopeNameId',
        'polEffectDefaultValue',
        'polHasAssignment',
        'polPolAssignments',
        'polhid1',
        'polUsedInPolicySet',
        'polUsedInPolicySetCount',
        'polUsedInPolicySets',
        'polRoledefs'
    ],
    watermark: ['', '','', '', '', '', '', '', '', '','','','','', 'try: \'Contributor\''],
    extensions: [
        {
            name: 'sort'
        },
        {
            name: 'colsVisibility',
            at_start: [1,2,3,4,5,6,7,8,9,10,11,12,13,14],
            text: 'Columns: ',
            enable_tick_all: true
        }
    ]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
</div>
"@)
    $endDefinitionInsightsPolicyDefinitions = Get-Date
    Write-Host "   DefinitionInsights Policy definitions duration: $((NEW-TIMESPAN -Start $startDefinitionInsightsPolicyDefinitions -End $endDefinitionInsightsPolicyDefinitions).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefinitionInsightsPolicyDefinitions -End $endDefinitionInsightsPolicyDefinitions).TotalSeconds) seconds)"
    showMemoryUsage
    #endregion definitionInsightsPolicyDefinitions

    #region definitionInsightsPolicySetDefinitions
    $startDefinitionInsightsPolicySetDefinitions = Get-Date
    Write-Host '  processing DefinitionInsights PolicySet definitions'
    $tfCount = $tenantAllPolicySetsCount
    $htmlTableId = 'definitionInsights_PolicySet'
    [void]$htmlDefinitionInsights.AppendLine( @"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="button_definitionInsights_PolicySet"><i class="fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$tenantAllPolicySetsCount PolicySet definitions</span></button>
<div class="content contentDefinitionInsights">

<div id="extGridPolicySet" class="panel panel-info pull-left" >
    <div class="panel-body bg-info">
        <div class="me">
            <label>Search JSON</label>
            <span id="polsetJson"></span>
        </div>

        <div class="me">
            <label>Builtin/Custom</label>
            <span id="polsetType"></span>
        </div>

        <div class="me">
            <label>Category</label>
            <span id="polsetCategory"></span>
        </div>

        <div class="me">
            <label>Deprecated</label>
            <span id="polsetDeprecated"></span>
        </div>

        <div class="me">
            <label>Preview</label>
            <span id="polsetPreview"></span>
        </div>

        <div class="me">
            <label>Scope Mg/Sub</label>
            <span id="polSetScope"></span>
        </div>

        <div class="me">
            <label>Scope Name/Id</label>
            <span id="polSetScopeNameId"></span>
        </div>

        <div class="me">
            <label>hasAssignment</label>
            <span id="polSetHasAssignment"></span>
        </div>

    </div>
</div>


<div class="pull-left" style="margin-left: 0.5em;">

<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>JSON</th>
<th>PolicySet Type</th>
<th>Category</th>
<th>Deprecated</th>
<th>Preview</th>
<th>Scope Mg/Sub</th>
<th>Scope Name/Id</th>
<th>hasAssignments</th>
<th>Assignments Count</th>
<th>Assignments</th>
</tr>
</thead>
<tbody>
"@)
    $htmlDefinitionInsightshlp = $null
    $htmlDefinitionInsightshlp = foreach ($policySet in ($tenantAllPolicySets | Sort-Object @{Expression = { $_.DisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {
        $hasAssignments = 'false'
        $assignmentsCount = 0
        $assignmentsDetailed = 'n/a'

        if (($htPolicyWithAssignments).policySet.($policySet.PolicyDefinitionId)) {
            $hasAssignments = 'true'
            $assignments = ($htPolicyWithAssignments).policySet.($policySet.PolicyDefinitionId).Assignments
            $assignmentsCount = ($assignments | Measure-Object).Count

            if ($assignmentsCount -gt 0) {
                $arrayAssignmentDetails = @()
                $arrayAssignmentDetails = foreach ($assignment in $assignments) {
                    if ($assignment.PolicyAssignmentDisplayName -eq '') {
                        $polAssDisplayName = '<i>#no AssignmentName given</i>'
                    }
                    else {
                        $polAssDisplayName = $assignment.PolicyAssignmentDisplayName
                    }
                    "$($assignment.PolicyAssignmentId) (<b>$($polAssDisplayName)</b>)"
                }
                $assignmentsDetailed = $arrayAssignmentDetails -join "$CsvDelimiterOpposite "
            }
        }

        $scopeDetails = 'n/a'
        if ($policySet.ScopeId -ne 'n/a') {
            $scopeDetails = "$($policySet.ScopeId) ($($htEntities.($policySet.ScopeId).DisplayName))"
        }
        $json = $($policySet.Json | convertto-json -depth 99)
        $guid = ([System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($policySet.PolicyDefinitionId)))) -replace '-'
        @"
<tr>
<td class="definitionInsightsjsontd">

    <div class="defCopy">
        <button class= "defCopyButton" onclick="copyDef('json$($guid)')">Copy definition</button>
            <script>
            function copyDef(elementId) {
                var copyOfTheDefinition = document.getElementById(elementId).innerText;
                navigator.clipboard.writeText(copyOfTheDefinition);
            }
        </script>
    </div>

    <div class="definitioninsightsjsondiv" id="json$($guid)"></div>

    <script>
        var jsonObj$($guid) = {};
        var jsonViewer$($guid) = new JSONViewer();
        document.querySelector("#json$($guid)").appendChild(jsonViewer$($guid).getContainer());
        var setJSON$($guid) = function() {
            try {
                jsonObj$($guid) = JSON.parse(JSON.stringify($($json)));
            }
            catch (err) {
                alert(err);
            }
        };
        setJSON$($guid)();
        jsonViewer$($guid).showJSON(jsonObj$($guid))
    </script>

</td>
<td>$($policySet.Type)</td>
<td>$($policySet.Category -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policySet.Deprecated)</td>
<td>$($policySet.Preview)</td>
<td>$($policySet.ScopeMgSub)</td>
<td>$($scopeDetails -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$hasAssignments</td>
<td>$assignmentsCount</td>
<td class="breakwordall">$assignmentsDetailed</td>
</tr>
"@
    }
    [void]$htmlDefinitionInsights.AppendLine($htmlDefinitionInsightshlp)
    $htmlDefinitionInsights | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $htmlDefinitionInsights = [System.Text.StringBuilder]::new()
    [void]$htmlDefinitionInsights.AppendLine( @"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
    if ($tfCount -gt 10) {
        $spectrum = "10, $tfCount"
        if ($tfCount -gt 50) {
            $spectrum = "10, 25, 50, $tfCount"
        }
        if ($tfCount -gt 100) {
            $spectrum = "10, 30, 50, 100, $tfCount"
        }
        if ($tfCount -gt 500) {
            $spectrum = "10, 30, 50, 100, 250, $tfCount"
        }
        if ($tfCount -gt 1000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
        }
        if ($tfCount -gt 2000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
        }
        if ($tfCount -gt 3000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
        }
        [void]$htmlDefinitionInsights.AppendLine( @"
        paging: {
            results_per_page: [
                'Records: ',
                [$spectrum]
            ]
        },
        /*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
    }
    [void]$htmlDefinitionInsights.AppendLine( @"
    btn_reset: true,
    highlight_keywords: true,
    alternate_rows: true,
    auto_filter: {
        delay: 1100
    },
    linked_filters: true,
    no_results_message: true,
    rows_counter: {
        text: 'results: '
    },
    col_1: 'select',
    col_2: 'select',
    col_3: 'select',
    col_4: 'select',
    col_5: 'select',
    col_7: 'select',
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'caseinsensitivestring'

    ],
    external_flt_ids: [
        'polsetJson',
        'polsetType',
        'polsetCategory',
        'polsetDeprecated',
        'polsetPreview',
        'polSetScope',
        'polSetScopeNameId',
        'polSetHasAssignment'
    ],
    extensions: [
        {
            name: 'sort'
        },
        {
            name: 'colsVisibility',
            at_start: [1,2,3,4,5,6,7,8,9],
            text: 'Columns: ',
            enable_tick_all: true
        }
    ]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
</div>
"@)
    $endDefinitionInsightsPolicySetDefinitions = Get-Date
    Write-Host "   DefinitionInsights PolicySet definitions duration: $((NEW-TIMESPAN -Start $startDefinitionInsightsPolicySetDefinitions -End $endDefinitionInsightsPolicySetDefinitions).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefinitionInsightsPolicySetDefinitions -End $endDefinitionInsightsPolicySetDefinitions).TotalSeconds) seconds)"
    showMemoryUsage
    #endregion definitionInsightsPolicySetDefinitions

    [void]$htmlDefinitionInsights.AppendLine( @'
    </div>
'@)
    #endregion definitionInsightsAzurePolicy

    #region definitionInsightsAzureRBAC
    [void]$htmlDefinitionInsights.AppendLine( @'
    <button type="button" class="collapsible" id="definitionInsights_AzureRBAC"><hr class="hr-text-definitionInsightsRBAC" data-content="RBAC" /></button>
    <div class="content contentDefinitionInsights">
'@)

    #RBAC preQuery
    $htRoleWithAssignments = @{}
    foreach ($roleDef in $rbacAll | Sort-Object -Property RoleAssignmentId -Unique | Group-Object -property RoleId) {
        if (-not ($htRoleWithAssignments).($roleDef.Name)) {
            ($htRoleWithAssignments).($roleDef.Name) = @{}
            ($htRoleWithAssignments).($roleDef.Name).Assignments = $roleDef.group
        }
    }

    #region definitionInsightsRoleDefinitions
    $startDefinitionInsightsRoleDefinitions = Get-Date
    Write-Host '  processing DefinitionInsights Role definitions'
    $tfCount = $tenantAllRolesCount
    $htmlTableId = 'definitionInsights_Roles'
    [void]$htmlDefinitionInsights.AppendLine( @"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="button_definitionInsights_Roles"><i class="fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$tenantAllRolesCount Role definitions</span></button>
<div class="content contentDefinitionInsights">

<div id="extGridRole" class="panel panel-info pull-left" >
    <div class="panel-body bg-info">
        <div class="me">
            <label>Search JSON</label>
            <span id="roleJson"></span>
        </div>

        <div class="me">
            <label>Builtin/Custom</label>
            <span id="roleType"></span>
        </div>

        <div class="me">
            <label>Data</label>
            <span id="roleDataRelated"></span>
        </div>

        <div class="me">
            <label>canDoRoleAssignments</label>
            <span id="roleCanDoRoleAssignments"></span>
        </div>

        <div class="me">
            <label>hasAssignment</label>
            <span id="roleHasAssignment"></span>
        </div>

    </div>
</div>


<div class="pull-left" style="margin-left: 0.5em;">

<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>JSON</th>
<th>Role Type</th>
<th>Data</th>
<th>canDoRoleAssignments</th>
<th>hasAssignments</th>
<th>Assignments Count</th>
<th>Assignments</th>
</tr>
</thead>
<tbody>
"@)
    $arrayRoleDefinitionsForCSVExport = [System.Collections.ArrayList]@()
    $htmlDefinitionInsightshlp = $null
    $htmlDefinitionInsightshlp = foreach ($role in ($tenantAllRoles | Sort-Object @{Expression = { $_.Name } })) {
        if ($role.IsCustom -eq $true) {
            $roleType = 'Custom'
            $AssignableScopesCount = $role.AssignableScopes.Count
            if ($role.AssignableScopes -like '*/providers/microsoft.management/managementgroups/*') {
                $AssignableScopesMG = $true
            }
            else {
                $AssignableScopesMG = $false
            }

        }
        else {
            $roleType = 'Builtin'
            $AssignableScopesCount = ''
            $AssignableScopesMG = ''
        }
        if (-not [string]::IsNullOrEmpty($role.DataActions) -or -not [string]::IsNullOrEmpty($role.NotDataActions)) {
            $roleManageData = 'true'
        }
        else {
            $roleManageData = 'false'
        }

        $hasAssignments = 'false'
        $assignmentsCount = 0
        $assignmentsDetailed = 'n/a'
        if (($htRoleWithAssignments).($role.Id)) {
            $hasAssignments = 'true'
            $assignments = ($htRoleWithAssignments).($role.Id).Assignments
            $assignmentsCount = ($assignments).Count
            if ($assignmentsCount -gt 0) {
                $arrayAssignmentDetails = @()
                $arrayAssignmentDetails = foreach ($assignment in $assignments) {
                    "$($assignment.RoleAssignmentId)"
                }
                $assignmentsDetailed = $arrayAssignmentDetails -join "$CsvDelimiterOpposite "
            }
        }

        #array for exportCSV
        if (-not $NoCsvExport) {
            $null = $arrayRoleDefinitionsForCSVExport.Add([PSCustomObject]@{
                    Name                  = $role.Name
                    Id                    = $role.Id
                    Description           = $role.Json.description
                    Type                  = $roleType
                    AssignmentsCount      = $assignmentsCount
                    AssignableScopesCount = $AssignableScopesCount
                    AssignableScopesMG    = $AssignableScopesMG
                    AssignableScopes      = ($role.AssignableScopes | Sort-Object) -join "$CsvDelimiterOpposite "
                    DataRelated           = $roleManageData
                    RoleAssWriteCapable   = $role.RoleCanDoRoleAssignments
                    Actions               = $role.Actions -join "$CsvDelimiterOpposite "
                    NotActions            = $role.NotActions -join "$CsvDelimiterOpposite "
                    DataActions           = $role.DataActions -join "$CsvDelimiterOpposite "
                    NotDataActions        = $role.NotDataActions -join "$CsvDelimiterOpposite "
                })
        }

        $json = $role.Json | convertto-json -depth 99
        $guid = $role.Id -replace '-'
        @"
<tr>
<td class="definitionInsightsjsontd">

    <div class="defCopy">
        <button class= "defCopyButton" onclick="copyDef('json$($guid)')">Copy definition</button>
            <script>
            function copyDef(elementId) {
                var copyOfTheDefinition = document.getElementById(elementId).innerText;
                navigator.clipboard.writeText(copyOfTheDefinition);
            }
        </script>
    </div>

    <div class="definitioninsightsjsonrbacdiv" id="json$($guid)"></div>

    <script>
        var jsonObj$($guid) = {};
        var jsonViewer$($guid) = new JSONViewer();
        document.querySelector("#json$($guid)").appendChild(jsonViewer$($guid).getContainer());
        var setJSON$($guid) = function() {
            try {
                jsonObj$($guid) = JSON.parse(JSON.stringify($($json)));
            }
            catch (err) {
                alert(err);
            }
        };
        setJSON$($guid)();
        jsonViewer$($guid).showJSON(jsonObj$($guid))
    </script>

</td>
<td>$($roleType)</td>
<td>$($roleManageData)</td>
<td>$($role.RoleCanDoRoleAssignments)</td>
<td>$hasAssignments</td>
<td>$assignmentsCount</td>
<td class="breakwordall">$assignmentsDetailed</td>
</tr>
"@
    }

    #region exportCSV
    if (-not $NoCsvExport) {
        $csvFilename = "$($filename)_RoleDefinitions"
        Write-Host "   Exporting RoleDefinitions CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
        $arrayRoleDefinitionsForCSVExport | Sort-Object -Property Type, Name, Id | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
        $arrayRoleDefinitionsForCSVExport = $null
    }
    #endregion exportCSV

    [void]$htmlDefinitionInsights.AppendLine($htmlDefinitionInsightshlp)
    $htmlDefinitionInsights | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $htmlDefinitionInsights = [System.Text.StringBuilder]::new()
    [void]$htmlDefinitionInsights.AppendLine( @"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
    if ($tfCount -gt 10) {
        $spectrum = "10, $tfCount"
        if ($tfCount -gt 50) {
            $spectrum = "10, 25, 50, $tfCount"
        }
        if ($tfCount -gt 100) {
            $spectrum = "10, 30, 50, 100, $tfCount"
        }
        if ($tfCount -gt 500) {
            $spectrum = "10, 30, 50, 100, 250, $tfCount"
        }
        if ($tfCount -gt 1000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
        }
        if ($tfCount -gt 2000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
        }
        if ($tfCount -gt 3000) {
            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
        }
        [void]$htmlDefinitionInsights.AppendLine( @"
        paging: {
            results_per_page: [
                'Records: ',
                [$spectrum]
            ]
        },
        /*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
    }
    [void]$htmlDefinitionInsights.AppendLine( @"
    btn_reset: true,
    highlight_keywords: true,
    alternate_rows: true,
    auto_filter: {
        delay: 1100
    },
    linked_filters: true,
    no_results_message: true,
    rows_counter: {
        text: 'results: '
    },
    col_1: 'select',
    col_2: 'select',
    col_3: 'select',
    col_4: 'select',
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'caseinsensitivestring'
    ],
    external_flt_ids: [
        'roleJson',
        'roleType',
        'roleDataRelated',
        'roleCanDoRoleAssignments',
        'roleHasAssignment'
    ],
    extensions: [
        {
            name: 'sort'
        },
        {
            name: 'colsVisibility',
            at_start: [1,2,3,4,5,6],
            text: 'Columns: ',
            enable_tick_all: true
        }
    ]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
</div>
"@)
    $endDefinitionInsightsRoleDefinitions = Get-Date
    Write-Host "   DefinitionInsights Role definitions duration: $((NEW-TIMESPAN -Start $startDefinitionInsightsRoleDefinitions -End $endDefinitionInsightsRoleDefinitions).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefinitionInsightsRoleDefinitions -End $endDefinitionInsightsRoleDefinitions).TotalSeconds) seconds)"
    showMemoryUsage
    #endregion definitionInsightsRoleDefinitions

    [void]$htmlDefinitionInsights.AppendLine( @'
    </div>
'@)
    #endregion definitionInsightsAzureRBAC

    $script:html += $htmlDefinitionInsights
    $htmlDefinitionInsights = $null
    $script:html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $script:html = $null

    $endDefinitionInsights = Get-Date
    Write-Host "  DefinitionInsights processing duration: $((NEW-TIMESPAN -Start $startDefinitionInsights -End $endDefinitionInsights).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefinitionInsights -End $endDefinitionInsights).TotalSeconds) seconds)"
}
function processDiagramMermaid() {
    if ($ManagementGroupId -ne $azAPICallConf['checkContext'].Tenant.Id) {
        $optimizedTableForPathQueryMg = $optimizedTableForPathQueryMg.where({ $_.mgParentId -ne "'upperScopes'" })
    }
    $mgLevels = ($optimizedTableForPathQueryMg | Sort-Object -Property Level -Unique).Level

    foreach ($mgLevel in $mgLevels) {
        $mgsInLevel = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel } )).MgId | Get-Unique
        foreach ($mgInLevel in $mgsInLevel) {
            $mgDetails = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel } ))
            $mgName = $mgDetails.MgName | Get-Unique
            $mgParentId = $mgDetails.mgParentId | Get-Unique
            $mgParentName = $mgDetails.mgParentName | Get-Unique
            if ($mgInLevel -ne $getMgParentId) {
                $null = $script:arrayMgs.Add($mgInLevel)
            }

            if ($mgParentName -eq $mgParentId) {
                $mgParentNameId = $mgParentName
            }
            else {
                $mgParentNameId = "$mgParentName<br/>$mgParentId"
            }

            if ($mgName -eq $mgInLevel) {
                $mgNameId = $mgName
            }
            else {
                $mgNameId = "$mgName<br/>$mgInLevel"
            }
            $script:markdownhierarchyMgs += @"
$mgParentId(`"$mgParentNameId`") --> $mgInLevel(`"$mgNameId`")`n
"@
            $subsUnderMg = ($optimizedTableForPathQueryMgAndSub.where( { -not [string]::IsNullOrEmpty($_.SubscriptionId) -and $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel } )).SubscriptionId
            if (($subsUnderMg | measure-object).count -gt 0) {
                foreach ($subUnderMg in $subsUnderMg) {
                    $null = $script:arraySubs.Add("SubsOf$mgInLevel")
                    $mgDetalsN = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel } ))
                    $mgName = $mgDetalsN.MgName | Get-Unique
                    $mgParentId = $mgDetalsN.MgParentId | Get-Unique
                    $mgParentName = $mgDetalsN.MgParentName | Get-Unique
                    $subName = ($optimizedTableForPathQuery.where( { $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel -and $_.SubscriptionId -eq $subUnderMg } )).Subscription | Get-Unique
                    $script:markdownTable += @"
| $mgLevel | $mgName | $mgInLevel | $mgParentName | $mgParentId | $subName | $($subUnderMg -replace '.*/') |`n
"@
                }
                $mgName = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel } )).MgName | Get-Unique
                if ($mgName -eq $mgInLevel) {
                    $mgNameId = $mgName
                }
                else {
                    $mgNameId = "$mgName<br/>$mgInLevel"
                }
                $script:markdownhierarchySubs += @"
$mgInLevel(`"$mgNameId`") --> SubsOf$mgInLevel(`"$(($subsUnderMg | measure-object).count)`")`n
"@
            }
            else {
                $mgDetailsM = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel -and $_.MgId -eq $mgInLevel } ))
                $mgName = $mgDetailsM.MgName | Get-Unique
                $mgParentId = $mgDetailsM.MgParentId | Get-Unique
                $mgParentName = $mgDetailsM.MgParentName | Get-Unique
                $script:markdownTable += @"
| $mgLevel | $mgName | $mgInLevel | $mgParentName | $mgParentId | none | none |`n
"@
            }

            if (($script:outOfScopeSubscriptions | Measure-Object).count -gt 0) {
                $subsoosUnderMg = ($outOfScopeSubscriptions | Where-Object { $_.Level -eq $mgLevel -and $_.ManagementGroupId -eq $mgInLevel }).SubscriptionId | Get-Unique
                if (($subsoosUnderMg | measure-object).count -gt 0) {
                    foreach ($subUnderMg in $subsoosUnderMg) {
                        $null = $script:arraySubsOos.Add("SubsoosOf$mgInLevel")
                        $mgDetalsN = ($optimizedTableForPathQueryMg.where( { $_.Level -eq $mgLevel -and $_.ManagementGroupId -eq $mgInLevel } ))
                        $mgName = $mgDetalsN.MgName | Get-Unique
                    }
                    $mgName = ($outOfScopeSubscriptions | Where-Object { $_.Level -eq $mgLevel -and $_.ManagementGroupId -eq $mgInLevel }).ManagementGroupName | Get-Unique
                    if ($mgName -eq $mgInLevel) {
                        $mgNameId = $mgName
                    }
                    else {
                        $mgNameId = "$mgName<br/>$mgInLevel"
                    }
                    $script:markdownhierarchySubs += @"
$mgInLevel(`"$mgNameId`") --> SubsoosOf$mgInLevel(`"$(($subsoosUnderMg | measure-object).count)`")`n
"@
                }
            }
        }
    }
}
function processHierarchyMapOnly {
    foreach ($entity in $arrayEntitiesFromAPI) {
        if ($entity.properties.parentNameChain -contains $ManagementGroupID -or $entity.Name -eq $ManagementGroupId) {
            if ($entity.type -eq '/subscriptions') {
                addRowToTable `
                    -level (($htEntities.($entity.name).ParentNameChain).Count - 1) `
                    -mgName $htEntities.(($entity.properties.parent.Id) -replace '.*/').displayName `
                    -mgId (($entity.properties.parent.Id) -replace '.*/') `
                    -mgParentId $htEntities.(($entity.properties.parent.Id) -replace '.*/').Parent `
                    -mgParentName $htEntities.(($entity.properties.parent.Id) -replace '.*/').ParentDisplayName `
                    -Subscription $htEntities.($entity.name).DisplayName `
                    -SubscriptionId $htEntities.($entity.name).Id
            }
            if ($entity.type -eq 'Microsoft.Management/managementGroups') {
                addRowToTable `
                    -level ($htEntities.($entity.name).ParentNameChain).Count `
                    -mgName $entity.properties.displayname `
                    -mgId $entity.Name `
                    -mgParentId $htEntities.($entity.name).Parent `
                    -mgParentName $htEntities.($entity.name).ParentDisplayName
            }
        }
    }
}
function processManagedIdentities {
    Write-Host 'Processing Service Principals - Managed Identities'
    $startSPMI = Get-Date
    $script:servicePrincipalsOfTypeManagedIdentity = $htServicePrincipals.Keys.where( { $htServicePrincipals.($_).servicePrincipalType -eq 'ManagedIdentity' } )
    $script:servicePrincipalsOfTypeManagedIdentityCount = $servicePrincipalsOfTypeManagedIdentity.Count
    if ($servicePrincipalsOfTypeManagedIdentityCount -gt 0) {
        foreach ($sp in $servicePrincipalsOfTypeManagedIdentity) {
            $hlpSp = $htServicePrincipals.($sp)
            if ($hlpSp.alternativeNames -gt 0) {
                foreach ($usageentry in $hlpSp.alternativeNames) {
                    if ($usageentry -like '*/providers/Microsoft.Authorization/policyAssignments/*') {
                        $script:htManagedIdentityForPolicyAssignment.($hlpSp.Id) = @{}
                        $script:htManagedIdentityForPolicyAssignment.($hlpSp.Id).policyAssignmentId = $usageentry.ToLower()
                        $script:htPolicyAssignmentManagedIdentity.($usageentry.ToLower()) = @{}
                        $script:htPolicyAssignmentManagedIdentity.($usageentry.ToLower()).miObjectId = $hlpSp.id
                        if (-not $htManagedIdentityDisplayName.($hlpSp.displayName)) {
                            $script:htManagedIdentityDisplayName.("$($hlpSp.displayName)_$($usageentry.ToLower())") = $hlpSp
                        }
                    }
                }
            }
        }
    }
    $endSPMI = Get-Date
    Write-Host "Processing Service Principals - Managed Identities duration: $((NEW-TIMESPAN -Start $startSPMI -End $endSPMI).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSPMI -End $endSPMI).TotalSeconds) seconds)"
}
function processScopeInsightsMgOrSub($mgOrSub, $mgChild, $subscriptionId, $subscriptionsMgId) {
    $script:scopescnter++
    $htmlScopeInsights = $null
    $htmlScopeInsights = [System.Text.StringBuilder]::new()
    #region ScopeInsightsBaseCollection
    if ($mgOrSub -eq 'mg') {
        #$startScopeInsightsPreQueryMg = Get-Date
        #BLUEPRINT
        $blueprintReleatedQuery = $blueprintBaseQuery.where( { $_.MgId -eq $mgChild -and [String]::IsNullOrEmpty($_.SubscriptionId) -and [String]::IsNullOrEmpty($_.BlueprintAssignmentId) } )
        $blueprintsScoped = $blueprintReleatedQuery
        $blueprintsScopedCount = ($blueprintsScoped).count
        #Resources
        $mgAllChildSubscriptions = [System.Collections.ArrayList]@()
        $mgAllChildSubscriptions = foreach ($entry in $htSubscriptionsMgPath.keys) {
            if (($htSubscriptionsMgPath.($entry).ParentNameChain) -contains $mgchild) {
                $entry
            }
        }
        if ($azAPICallConf['htParameters'].NoResources -eq $false) {
            $resourcesAllChildSubscriptions = [System.Collections.ArrayList]@()
            foreach ($mgAllChildSubscription in $mgAllChildSubscriptions) {
                foreach ($resource in ($resourcesAllGroupedBySubcriptionId.where( { $_.name -eq $mgAllChildSubscription } )).group | Sort-Object -Property type, location) {
                    $null = $resourcesAllChildSubscriptions.Add($resource)
                }

            }
            $resourcesAllChildSubscriptionsArray = [System.Collections.ArrayList]@()
            $grp = $resourcesAllChildSubscriptions | Group-Object -Property type, location
            foreach ($resLoc in $grp) {
                $cnt = 0
                $ResoureTypeAndLocation = $resLoc.Name.split(',')
                $resLoc.Group.count_ | ForEach-Object { $cnt += $_ }
                $null = $resourcesAllChildSubscriptionsArray.Add([PSCustomObject]@{
                        ResourceType  = $ResoureTypeAndLocation[0]
                        Location      = $ResoureTypeAndLocation[1]
                        ResourceCount = $cnt
                    })
            }
            $resourcesAllChildSubscriptions.count_ | ForEach-Object { $resourcesAllChildSubscriptionTotal += $_ }
            $resourcesAllChildSubscriptionResourceTypeCount = (($resourcesAllChildSubscriptions | Sort-Object -Property type -Unique) | measure-object).count
            $resourcesAllChildSubscriptionLocationCount = (($resourcesAllChildSubscriptions | Sort-Object -Property location -Unique) | measure-object).count
        }
        #childrenMgInfo
        $mgAllChildMgs = [System.Collections.ArrayList]@()
        $mgAllChildMgs = foreach ($entry in $htManagementGroupsMgPath.keys) {
            if (($htManagementGroupsMgPath.($entry).path) -contains $mgchild) {
                $entry
            }
        }

        $arrayPolicyAssignmentsEnrichedForThisManagementGroup = ($arrayPolicyAssignmentsEnrichedGroupedByManagementGroup.where( { $_.name -eq $mgChild } )).group
        $arrayPolicyAssignmentsEnrichedForThisManagementGroupGroupedByPolicyVariant = $arrayPolicyAssignmentsEnrichedForThisManagementGroup | Group-Object -Property PolicyVariant
        $arrayPolicyAssignmentsEnrichedForThisManagementGroupVariantPolicy = ($arrayPolicyAssignmentsEnrichedForThisManagementGroupGroupedByPolicyVariant.where( { $_.name -eq 'Policy' } )).group
        $arrayPolicyAssignmentsEnrichedForThisManagementGroupVariantPolicySet = ($arrayPolicyAssignmentsEnrichedForThisManagementGroupGroupedByPolicyVariant.where( { $_.name -eq 'PolicySet' } )).group

        if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
            if ([string]::IsNullOrEmpty(($htMgASCSecureScore).($mgChild).SecureScore) -or [string]::IsNullOrWhiteSpace(($htMgASCSecureScore).($mgChild).SecureScore)) {
                $managementGroupASCPoints = 'n/a'
            }
            else {
                $managementGroupASCPoints = ($htMgASCSecureScore).($mgChild).SecureScore
            }
        }
        else {
            $managementGroupASCPoints = "excluded (-NoMDfCSecureScore $($azAPICallConf['htParameters'].NoMDfCSecureScore))"
        }

        $cssClass = 'mgDetailsTable'

        #$endScopeInsightsPreQueryMg = Get-Date
        #Write-Host "   ScopeInsights MG PreQuery processing duration: $((NEW-TIMESPAN -Start $startScopeInsightsPreQueryMg -End $endScopeInsightsPreQueryMg).TotalSeconds) seconds"
    }
    if ($mgOrSub -eq 'sub') {
        #$startScopeInsightsPreQuerySub = Get-Date
        #BLUEPRINT
        $blueprintReleatedQuery = $blueprintBaseQuery.where( { $_.SubscriptionId -eq $subscriptionId -and -not [String]::IsNullOrEmpty($_.BlueprintName) } )
        $blueprintsAssigned = $blueprintReleatedQuery.where( { -not [String]::IsNullOrEmpty($_.BlueprintAssignmentId) } )
        $blueprintsAssignedCount = ($blueprintsAssigned).count
        $blueprintsScoped = $blueprintReleatedQuery.where( { $_.BlueprintScoped -eq "/subscriptions/$subscriptionId" -and [String]::IsNullOrEmpty($_.BlueprintAssignmentId) } )
        $blueprintsScopedCount = ($blueprintsScoped).count
        #SubscriptionDetails
        $subPath = $htSubscriptionsMgPath.($subscriptionId).pathDelimited
        $subscriptionDetailsReleatedQuery = $htSubDetails.($subscriptionId).details
        $subscriptionState = ($subscriptionDetailsReleatedQuery).SubscriptionState
        $subscriptionQuotaId = ($subscriptionDetailsReleatedQuery).SubscriptionQuotaId
        $subscriptionResourceGroupsCount = ($resourceGroupsAll.where( { $_.subscriptionId -eq $subscriptionId } )).count_
        if (-not $subscriptionResourceGroupsCount) {
            $subscriptionResourceGroupsCount = 0
        }
        $subscriptionASCPoints = ($subscriptionDetailsReleatedQuery).SubscriptionASCSecureScore

        if ($azAPICallConf['htParameters'].NoResources -eq $false) {
            #Resources
            $resourcesSubscription = [System.Collections.ArrayList]@()
            foreach ($resource in ($resourcesAllGroupedBySubcriptionId.where( { $_.name -eq $subscriptionId } )).group | Sort-Object -Property type, location) {
                $null = $resourcesSubscription.Add($resource)
            }

            $resourcesSubscriptionTotal = 0
            $resourcesSubscription.count_ | ForEach-Object { $resourcesSubscriptionTotal += $_ }
            $resourcesSubscriptionResourceTypeCount = (($resourcesSubscription | Sort-Object -Property type -Unique)).count
            $resourcesSubscriptionLocationCount = (($resourcesSubscription | Sort-Object -Property location -Unique)).count
        }

        $arrayPolicyAssignmentsEnrichedForThisSubscription = ($arrayPolicyAssignmentsEnrichedGroupedBySubscription.where( { $_.name -eq $subscriptionId } )).group
        $arrayPolicyAssignmentsEnrichedForThisSubscriptionGroupedByPolicyVariant = $arrayPolicyAssignmentsEnrichedForThisSubscription | Group-Object -Property PolicyVariant
        $arrayPolicyAssignmentsEnrichedForThisSubscriptionVariantPolicy = ($arrayPolicyAssignmentsEnrichedForThisSubscriptionGroupedByPolicyVariant.where( { $_.name -eq 'Policy' } )).group
        $arrayPolicyAssignmentsEnrichedForThisSubscriptionVariantPolicySet = ($arrayPolicyAssignmentsEnrichedForThisSubscriptionGroupedByPolicyVariant.where( { $_.name -eq 'PolicySet' } )).group

        $arrayDefenderPlansSubscription = $defenderPlansGroupedBySub.where( { $_.Name -like "*$($subscriptionId)*" } )

        $arrayUserAssignedIdentities4ResourcesSubscription = $arrayUserAssignedIdentities4Resources.where( { $_.resourceSubscriptionId -eq $subscriptionId -or $_.miSubscriptionId -eq $subscriptionId } )
        $arrayUserAssignedIdentities4ResourcesSubscriptionCount = $arrayUserAssignedIdentities4ResourcesSubscription.Count

        if ($subFeaturesGroupedBySubscription) {
            $subscriptionFeatures = $subFeaturesGroupedBySubscription.where({ $_.name -eq $subscriptionId })
        }
        
        $cssClass = 'subDetailsTable'

        #$endScopeInsightsPreQuerySub = Get-Date
        #Write-Host "   ScopeInsights SUB PreQuery processing duration: $((NEW-TIMESPAN -Start $startScopeInsightsPreQuerySub -End $endScopeInsightsPreQuerySub).TotalSeconds) seconds"
    }
    #endregion ScopeInsightsBaseCollection

    if ($mgOrSub -eq 'sub') {
        [void]$htmlScopeInsights.AppendLine(@"
<tr><td class="detailstd"><p>Subscription Name: <b>$($subscriptionDetailsReleatedQuery.subscription -replace '<', '&lt;' -replace '>', '&gt;')</b></p></td></tr>
<tr><td class="detailstd"><p>Subscription Id: <b>$($subscriptionDetailsReleatedQuery.subscriptionId)</b></p></td></tr>
<tr><td class="detailstd"><p>Subscription Path: $subPath</p></td></tr>
<tr><td class="detailstd"><p>State: $subscriptionState</p></td></tr>
<tr><td class="detailstd"><p>QuotaId: $subscriptionQuotaId</p></td></tr>
<tr><td class="detailstd"><p><i class="fa fa-shield" aria-hidden="true"></i> Microsoft Defender for Cloud Secure Score: $subscriptionASCPoints <a class="externallink" href="https://www.youtube.com/watch?v=2EMnzxdqDhA" target="_blank" rel="noopener" rel="noopener">Video <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://techcommunity.microsoft.com/t5/azure-security-center/security-controls-in-azure-security-center-enable-endpoint/ba-p/1624653" target="_blank" rel="noopener" rel="noopener">Blog <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://docs.microsoft.com/en-us/azure/security-center/secure-score-security-controls#how-your-secure-score-is-calculated" target="_blank" rel="noopener" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p></td></tr>
<tr><td class="detailstd">
"@)

        #region ScopeInsightsDefenderPlans
        if ($arrayDefenderPlansSubscription) {

            $defenderPlanSubscriptionDeprecatedContainerRegistry = $false
            $defenderPlanSubscriptionDeprecatedKubernetesService = $false

            $containerRegistryStandardCount = ($arrayDefenderPlansSubscription.Group.where( { $_.defenderPlan -eq 'ContainerRegistry' -and $_.defenderPlanTier -eq 'Standard' } )).Count
            $kubernetesServiceStandardCount = ($arrayDefenderPlansSubscription.Group.where( { $_.defenderPlan -eq 'KubernetesService' -and $_.defenderPlanTier -eq 'Standard' } )).Count
            if ($containerRegistryStandardCount -gt 0) {
                $defenderPlanSubscriptionDeprecatedContainerRegistry = $true
            }
            if ($kubernetesServiceStandardCount -gt 0) {
                $defenderPlanSubscriptionDeprecatedKubernetesService = $true
            }

            $defenderCapabilitiesSubscription = ($arrayDefenderPlansSubscription.group.defenderPlan | Sort-Object -Unique)
            $tfCount = 1
            $htmlTableId = "ScopeInsights_DefenderPlans_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-shield" aria-hidden="true"></i> Microsoft Defender for Cloud plans <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/enhanced-security-features-overview" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p></button>
<div class="content contentSISub">
"@)

            if ($defenderPlanSubscriptionDeprecatedContainerRegistry) {
                [void]$htmlScopeInsights.AppendLine(@'
        &nbsp;&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Using deprecated plan 'Container registries' <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
            }
            if ($defenderPlanSubscriptionDeprecatedKubernetesService) {
                [void]$htmlScopeInsights.AppendLine(@'
        &nbsp;&nbsp;<i class="fa fa-exclamation-triangle" aria-hidden="true"></i>  Using deprecated plan 'Kubernetes' <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
            }

            [void]$htmlScopeInsights.AppendLine(@"
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Plan</th>
<th>Tier</th>
</tr>
</thead>
<tbody>

"@)

            foreach ($plan in $arrayDefenderPlansSubscription.Group | Sort-Object -Property defenderPlan) {
                if (($plan.defenderPlan -eq 'ContainerRegistry' -and $plan.defenderPlanTier -eq 'Standard') -or ($plan.defenderPlan -eq 'KubernetesService' -and $plan.defenderPlanTier -eq 'Standard')) {
                    $thisDefenderPlan = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i> $($plan.defenderPlan)"
                }
                else {
                    $thisDefenderPlan = $plan.defenderPlan
                }
                [void]$htmlScopeInsights.AppendLine(@"
                    <tr>
                    <td>$($thisDefenderPlan)</td>
                    <td>$($plan.defenderPlanTier)</td>
                    </tr>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"

</tbody>
</table>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
col_1: 'select',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
'@)
            $cnt = 0
            foreach ($defenderCapability in $defenderCapabilitiesSubscription) {
                $cnt++
                if ($defenderCapabilitiesSubscription.Count -eq $cnt) {
                    [void]$htmlScopeInsights.AppendLine(@'
    'caseinsensitivestring'
'@)
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
    'caseinsensitivestring',
'@)
                }
            }
            [void]$htmlScopeInsights.AppendLine(@"
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
</div>
"@)
        }
        else {
            $subscriptionSkippedMDfC = $arrayDefenderPlansSubscriptionsSkipped.where( { $_.subscriptionId -eq $subscriptionId } )
            if ($subscriptionSkippedMDfC.Count -gt 0) {
                if ($subscriptionSkippedMDfC.reason -eq 'SubScriptionNotRegistered') {
                    [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class=`"fa fa-shield`" aria-hidden=`"true`"></i> Microsoft Defender for Cloud plans - Subscription skipped ($($subscriptionSkippedMDfC.reason)) (ResourceProvider: Microsoft.Security) <a class=`"externallink`" href=`"https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-providers-and-types#register-resource-provider`" target=`"_blank`" rel=`"noopener`">docs <i class=`"fa fa-external-link`" aria-hidden=`"true`"></i></a></p>
"@)
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class=`"fa fa-shield`" aria-hidden=`"true`"></i> Microsoft Defender for Cloud plans - Subscription skipped ($($subscriptionSkippedMDfC.reason))</p>
"@)   
                }

            }
            else {
                [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-shield" aria-hidden="true"></i> No Microsoft Defender for Cloud plans <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/enhanced-security-features-overview" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
            }
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsDefenderPlans

        #region ScopeInsightsDiganosticsSubscription
        if (($htDiagnosticSettingsMgSub).sub.($subscriptionId)) {
            $diagnosticsSubCount = (($htDiagnosticSettingsMgSub).sub.($subscriptionId).Values.Count)
            $tfCount = $diagnosticsSubCount
            $htmlTableId = "ScopeInsights_DiagnosticsSub_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $diagnosticsSubCount Subscription Diagnostic settings</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Diagnostic setting</th>
<th>Target</th>
<th>Target Id</th>
"@)
            foreach ($logCategory in $diagnosticSettingsSubCategories) {
                [void]$htmlScopeInsights.AppendLine(@"
<th>$logCategory</th>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</tr>
</thead>
<tbody>
'@)
            $htmlScopeInsightsDiagnosticsSub = $null
            $htmlScopeInsightsDiagnosticsSub = foreach ($entry in ($htDiagnosticSettingsMgSub).sub.($subscriptionId).keys | Sort-Object) {
                foreach ($diagset in ($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.keys | Sort-Object) {
                    @"
<tr>
<td>$(($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.$diagset.DiagnosticSettingName)</td>
<td>$(($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.$diagset.DiagnosticTargetType)</td>
<td>$(($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.$diagset.DiagnosticTargetId)</td>
"@
                    foreach ($logCategory in $diagnosticSettingsSubCategories) {
                        if (($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.$diagset.DiagnosticCategoriesHt.($logCategory)) {
                            @"
<td>$(($htDiagnosticSettingsMgSub).sub.($subscriptionId).$entry.$diagset.DiagnosticCategoriesHt.($logCategory))</td>
"@
                        }
                        else {
                            @'
<td>n/a</td>
'@
                        }
                    }
                    @'
</tr>
'@
                }
            }

            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsDiagnosticsSub)
            [void]$htmlScopeInsights.AppendLine(@"
</tbody>
</table>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_1: 'select',
'@)
            $cnt = 2
            foreach ($logCategory in $diagnosticSettingsSubCategories) {
                $cnt++
                [void]$htmlScopeInsights.AppendLine(@"
                col_$($cnt): 'select',
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
'@)
            $cnt = 0
            foreach ($logCategory in $diagnosticSettingsSubCategories) {
                $cnt++
                if ($diagnosticSettingsSubCategories.Count -eq $cnt) {
                    [void]$htmlScopeInsights.AppendLine(@'
    'caseinsensitivestring'
'@)
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
    'caseinsensitivestring',
'@)
                }
            }
            [void]$htmlScopeInsights.AppendLine(@"
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
</div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-ban" aria-hidden="true"></i> No Subscription Diagnostic settings <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/quick-collect-activity-log-portal#create-diagnostic-setting" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsDiganosticsSubscription

        #Tags
        #region ScopeInsightsTags
        $tagsSubscriptionCount = ($htSubscriptionTags.$subscriptionId.Keys).count
        if ($tagsSubscriptionCount -gt 0) {
            $tfCount = $tagsSubscriptionCount
            $htmlTableId = "ScopeInsights_Tags_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $tagsSubscriptionCount Subscription Tags | Limit: ($tagsSubscriptionCount/$LimitTagsSubscription)</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">Tag Name</th>
<th>Tag Value</th>
</tr>
</thead>
<tbody>
"@)
            $htmlScopeInsightsTags = $null
            $htmlScopeInsightsTags = foreach ($tag in (($htSubscriptionTags).($subscriptionId)).keys | Sort-Object) {
                @"
<tr>
<td>$tag</td>
<td>$($htSubscriptionTags.$subscriptionId[$tag])</td>
</tr>
"@
            }
            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsTags)
            [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> $tagsSubscriptionCount Subscription Tags</p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsTags

        #TagNameUsage
        #region ScopeInsightsTagNameUsage
        $arrayTagListSubscription = [System.Collections.ArrayList]@()
        foreach ($tagScope in $htSubscriptionTagList.($subscriptionId).keys) {
            foreach ($tagScopeTagName in $htSubscriptionTagList.($subscriptionId).$tagScope.keys) {
                $null = $arrayTagListSubscription.Add([PSCustomObject]@{
                        Scope    = $tagScope
                        TagName  = ($tagScopeTagName)
                        TagCount = $htSubscriptionTagList.($subscriptionId).($tagScope).($tagScopeTagName)
                    })
            }
        }
        $tagsUsageCount = ($arrayTagListSubscription).Count

        if ($tagsUsageCount -gt 0) {
            $tagNamesUniqueCount = ($arrayTagListSubscription | Sort-Object -Property TagName -Unique).Count
            $tagNamesUsedInScopes = ($arrayTagListSubscription | Sort-Object -Property Scope -Unique).scope -join "$($CsvDelimiterOpposite) "
            $tfCount = $tagsUsageCount
            $htmlTableId = "ScopeInsights_TagNameUsage_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-check-circle blue" aria-hidden="true"></i> Tag Name Usage ($tagNamesUniqueCount unique Tag Names applied at $($tagNamesUsedInScopes)</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Resource naming and tagging decision guide</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/resource-tagging" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Scope</th>
<th>TagName</th>
<th>Count</th>
</tr>
</thead>
<tbody>
"@)
            $htmlScopeInsightsTagsUsage = $null
            $htmlScopeInsightsTagsUsage = foreach ($tagEntry in $arrayTagListSubscription | Sort-Object Scope, TagName -CaseSensitive) {
                @"
<tr>
<td>$($tagEntry.Scope)</td>
<td>$($tagEntry.TagName)</td>
<td>$($tagEntry.TagCount)</td>
</tr>
"@
            }
            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsTagsUsage)
            [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
            paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
            btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'multiple',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number'
                ],
            extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> Tag Name Usage ($tagsUsageCount Tags) <a class="externallink" href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/resource-tagging" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsTagNameUsage

        #Consumption
        #$startScopeInsightsConsumptionSub = Get-Date
        #region ScopeInsightsConsumptionSub
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {

            if ($htAzureConsumptionSubscriptions.($subscriptionId).ConsumptionData) {
                $consumptionData = $htAzureConsumptionSubscriptions.($subscriptionId).ConsumptionData

                $arrayTotalCostSummarySub = @()
                $arrayConsumptionData = [System.Collections.ArrayList]@()

                $totalCost = 0

                $currency = $htAzureConsumptionSubscriptions.($subscriptionId).Currency
                $consumedServiceCount = ($consumptionData.ResourceType | Sort-Object -Unique | Measure-Object).Count
                $resourceCount = ($consumptionData.ResourceId | Sort-Object -Unique | Measure-Object).Count
                $subConsumptionDataGrouped = $consumptionData | Group-Object -property ResourceType, ChargeType, MeterCategory

                foreach ($consumptionline in $subConsumptionDataGrouped) {

                    $costConsumptionLine = ($consumptionline.group.PreTaxCost | Measure-Object -Sum).Sum
                    if ([math]::Round($costConsumptionLine, 2) -eq 0) {
                        $cost = $costConsumptionLine.ToString('0.0000')
                    }
                    else {
                        $cost = [math]::Round($costConsumptionLine, 2).ToString('0.00')
                    }

                    $null = $arrayConsumptionData.Add([PSCustomObject]@{
                            ResourceType                 = ($consumptionline.name).split(', ')[0]
                            ConsumedServiceChargeType    = ($consumptionline.name).split(', ')[1]
                            ConsumedServiceCategory      = ($consumptionline.name).split(', ')[2]
                            ConsumedServiceInstanceCount = $consumptionline.Count
                            ConsumedServiceCost          = $cost #[decimal]$cost
                            ConsumedServiceCurrency      = $currency
                        })

                    $totalCost = $htAzureConsumptionSubscriptions.($subscriptionId).TotalCost

                }
                if ([math]::Round($totalCost, 2) -eq 0) {
                    $totalCost = $totalCost
                }
                else {
                    $totalCost = [math]::Round($totalCost, 2).ToString('0.00')
                }
                $arrayTotalCostSummarySub += "$($totalCost) $($currency) generated by $($resourceCount) Resources ($($consumedServiceCount) ResourceTypes)"

                $tfCount = ($arrayConsumptionData | Measure-Object).Count
                $htmlTableId = "ScopeInsights_Consumption_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><i class="fa fa-credit-card blue" aria-hidden="true"></i> Total cost $($arrayTotalCostSummarySub -join ', ') last $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)</button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>ChargeType</th>
<th>ResourceType</th>
<th>Category</th>
<th>ResourceCount</th>
<th>Cost ($($AzureConsumptionPeriod)d)</th>
<th>Currency</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsConsumptionSub = $null
                $htmlScopeInsightsConsumptionSub = foreach ($consumptionLine in $arrayConsumptionData) {
                    @"
<tr>
<td>$($consumptionLine.ConsumedServiceChargeType)</td>
<td>$($consumptionLine.ResourceType)</td>
<td>$($consumptionLine.ConsumedServiceCategory)</td>
<td>$($consumptionLine.ConsumedServiceInstanceCount)</td>
<td>$($consumptionLine.ConsumedServiceCost)</td>
<td>$($currency)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsConsumptionSub)
                [void]$htmlScopeInsights.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId=1;
var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'number',
        'caseinsensitivestring'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-credit-card" aria-hidden="true"></i> <span class="valignMiddle">No Consumption data available</span></p>
'@)
            }
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-credit-card" aria-hidden="true"></i> <span class="valignMiddle">No Consumption data available as switch parameter -DoAzureConsumption was not applied</span></p>
'@)
        }

        [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><td class="detailstd">
'@)
        #endregion ScopeInsightsConsumptionSub
        #$endScopeInsightsConsumptionSub = Get-Date
        #Write-Host "  **ScopeInsightsConsumptionSub data duration: $((NEW-TIMESPAN -Start $startScopeInsightsConsumptionSub -End $endScopeInsightsConsumptionSub).TotalSeconds) seconds"

        #ResourceGroups
        #region ScopeInsightsResourceGroups
        if ($subscriptionResourceGroupsCount -gt 0) {
            [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-check-circle" aria-hidden="true"></i> $subscriptionResourceGroupsCount Resource Groups | Limit: ($subscriptionResourceGroupsCount/$LimitResourceGroups)</p>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-ban" aria-hidden="true"></i> $subscriptionResourceGroupsCount Resource Groups</p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        #endregion ScopeInsightsResourceGroups

        #ResourceProvider
        #region ScopeInsightsResourceProvidersDetailed
        if ($azAPICallConf['htParameters'].NoResourceProvidersDetailed -eq $false) {
            if (($htResourceProvidersAll).($subscriptionId)) {
                $tfCount = ($htResourceProvidersAll).($subscriptionId).Providers.Count
                $htmlTableId = "ScopeInsights_ResourceProvider_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><i class="fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resource Providers Detailed</span></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Provider</th>
<th>State</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsResourceProvidersDetailed = $null
                $htmlScopeInsightsResourceProvidersDetailed = foreach ($provider in ($htResourceProvidersAll).($subscriptionId).Providers) {
                    @"
<tr>
<td>$($provider.namespace)</td>
<td>$($provider.registrationState)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsResourceProvidersDetailed)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId=1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_1: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($htResourceProvidersAll.Keys).count) Resource Providers</span></p>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }
        #endregion ScopeInsightsResourceProvidersDetailed

        #region ScopeInsightsSubscriptionFeatures
        if ($subscriptionFeatures) {
            $subscriptionFeaturesCount = $subscriptionFeatures.Group.Count

            $tfCount = $subscriptionFeaturesCount
            $htmlTableId = "ScopeInsights_SubscriptionFeatures_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"

            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-cube" aria-hidden="true"></i> $tfCount enabled Subscription Features</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Set up preview features in Azure subscription</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/preview-features" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Feature</th>
</tr>
</thead>
<tbody>
"@)

            foreach ($feature in $subscriptionFeatures.Group | Sort-Object -Property feature) {
                [void]$htmlScopeInsights.AppendLine(@"
    <tr><td>$($feature.feature)</td></tr>
"@)
            }


            [void]$htmlScopeInsights.AppendLine(@"
</tbody>
</table>
<script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_types: [
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
</div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
            <p><i class="fa fa-ban" aria-hidden="true"></i> 0 enabled Subscription Features <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/preview-features" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsSubscriptionFeatures

        #ResourceLocks
        #region ScopeInsightsResourceLocks
        if ($htResourceLocks.($subscriptionId)) {
            $tfCount = 6
            $htmlTableId = "ScopeInsights_ResourceLocks_$($subscriptionId -replace '-','_')"
            $randomFunctionName = "func_$htmlTableId"

            $subscriptionLocksCannotDeleteCount = $htResourceLocks.($subscriptionId).SubscriptionLocksCannotDeleteCount
            $subscriptionLocksReadOnlyCount = $htResourceLocks.($subscriptionId).SubscriptionLocksReadOnlyCount
            $resourceGroupsLocksCannotDeleteCount = $htResourceLocks.($subscriptionId).ResourceGroupsLocksCannotDeleteCount
            $resourceGroupsLocksReadOnlyCount = $htResourceLocks.($subscriptionId).ResourceGroupsLocksReadOnlyCount
            $resourcesLocksCannotDeleteCount = $htResourceLocks.($subscriptionId).ResourcesLocksCannotDeleteCount
            $resourcesLocksReadOnlyCount = $htResourceLocks.($subscriptionId).ResourcesLocksReadOnlyCount

            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-check-circle blue" aria-hidden="true"></i> Resource Locks</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Considerations before applying locks</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/lock-resources#considerations-before-applying-locks" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Lock scope</th>
<th>Lock type</th>
<th>presence</th>
</tr>
</thead>
<tbody>
<tr><td>Subscription</td><td>CannotDelete</td><td>$($subscriptionLocksCannotDeleteCount)</td></tr>
<tr><td>Subscription</td><td>ReadOnly</td><td>$($subscriptionLocksReadOnlyCount)</td></tr>
<tr><td>ResourceGroup</td><td>CannotDelete</td><td>$($resourceGroupsLocksCannotDeleteCount)</td></tr>
<tr><td>ResourceGroup</td><td>ReadOnly</td><td>$($resourceGroupsLocksReadOnlyCount)</td></tr>
<tr><td>Resource</td><td>CannotDelete</td><td>$($resourcesLocksCannotDeleteCount)</td></tr>
<tr><td>Resource</td><td>ReadOnly</td><td>$($resourcesLocksReadOnlyCount)</td></tr>
</tbody>
</table>
<script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_0: 'select',
            col_1: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number'
            ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
</div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
            <p><i class="fa fa-ban" aria-hidden="true"></i> 0 Resource Locks <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/lock-resources#considerations-before-applying-locks" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
        #endregion ScopeInsightsResourceLocks

    }

    #MgChildInfo
    #region ScopeInsightsManagementGroups
    if ($mgOrSub -eq 'mg') {

        [void]$htmlScopeInsights.AppendLine(@"
<tr><td class="detailstd"><p>$(($mgAllChildMgs).count -1) ManagementGroups below this scope</p></td></tr>
<tr><td class="detailstd"><p>$(($mgAllChildSubscriptions).count) Subscriptions below this scope</p></td></tr>
<tr><td class="detailstd"><p><i class="fa fa-shield" aria-hidden="true"></i> Microsoft Defender for Cloud Secure Score: $managementGroupASCPoints <a class="externallink" href="https://www.youtube.com/watch?v=2EMnzxdqDhA" target="_blank" rel="noopener">Video <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://techcommunity.microsoft.com/t5/azure-security-center/security-controls-in-azure-security-center-enable-endpoint/ba-p/1624653" target="_blank" rel="noopener">Blog <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://docs.microsoft.com/en-us/azure/security-center/secure-score-security-controls#how-your-secure-score-is-calculated" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p></td></tr>
<tr><td class="detailstd">
"@)

        #region ScopeInsightsDiagnosticsMg
        if (($htDiagnosticSettingsMgSub).mg.($mgChild)) {
            $diagnosticsMgCount = (($htDiagnosticSettingsMgSub).mg.($mgChild).Values.Count)
            $tfCount = $diagnosticsMgCount
            $htmlTableId = "ScopeInsights_DiagnosticsMg_$($mgChild -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $diagnosticsMgCount Management Group Diagnostic settings</p></button>
<div class="content contentSIMG">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Diagnostic setting</th>
<th>Target</th>
<th>Target Id</th>
"@)
            foreach ($logCategory in $diagnosticSettingsMgCategories) {
                [void]$htmlScopeInsights.AppendLine(@"
<th>$logCategory</th>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</tr>
</thead>
<tbody>
'@)
            $htmlScopeInsightsDiagnosticsMg = $null
            $htmlScopeInsightsDiagnosticsMg = foreach ($entry in ($htDiagnosticSettingsMgSub).mg.($mgChild).keys | Sort-Object) {
                foreach ($diagset in ($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.keys | Sort-Object) {
                    @"
<tr>
<td>$(($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.$diagset.DiagnosticSettingName)</td>
<td>$(($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.$diagset.DiagnosticTargetType)</td>
<td>$(($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.$diagset.DiagnosticTargetId)</td>
"@
                    foreach ($logCategory in $diagnosticSettingsMgCategories) {
                        if (($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.$diagset.DiagnosticCategoriesHt.($logCategory)) {
                            @"
<td>$(($htDiagnosticSettingsMgSub).mg.($mgChild).$entry.$diagset.DiagnosticCategoriesHt.($logCategory))</td>
"@
                        }
                        else {
                            @'
<td>n/a</td>
'@
                        }
                    }
                    @'
</tr>
'@
                }
            }

            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsDiagnosticsMg)
            [void]$htmlScopeInsights.AppendLine(@"
    </tbody>
</table>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_1: 'select',
'@)
            $cnt = 2
            foreach ($logCategory in $diagnosticSettingsMgCategories) {
                $cnt++
                [void]$htmlScopeInsights.AppendLine(@"
                col_$($cnt): 'select',
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
'@)
            $cnt = 0
            foreach ($logCategory in $diagnosticSettingsMgCategories) {
                $cnt++
                if ($diagnosticSettingsMgCategories.Count -eq $cnt) {
                    [void]$htmlScopeInsights.AppendLine(@'
            'caseinsensitivestring'
'@)
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
            'caseinsensitivestring',
'@)
                }
            }
            [void]$htmlScopeInsights.AppendLine(@"
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
</div>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
    <p><i class="fa fa-ban" aria-hidden="true"></i> No Management Group Diagnostic settings <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
        }
        #endregion ScopeInsightsDiagnosticsMg

        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)

        #$startScopeInsightsConsumptionMg = Get-Date
        #region ScopeInsightsConsumptionMg
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            if ($allConsumptionDataCount -gt 0) {

                $consumptionData = $htManagementGroupsCost.($mgchild).consumptionDataSubscriptions
                if (($consumptionData | Measure-Object).Count -gt 0) {
                    $arrayTotalCostSummaryMg = @()
                    $arrayConsumptionData = [System.Collections.ArrayList]@()
                    $consumptionDataGroupedByCurrency = $consumptionData | Group-Object -property Currency
                    foreach ($currency in $consumptionDataGroupedByCurrency) {
                        $totalCost = 0
                        $tenantSummaryConsumptionDataGrouped = $currency.group | Group-Object -property ResourceType, ChargeType, MeterCategory
                        $subsCount = ($tenantSummaryConsumptionDataGrouped.group.subscriptionId | Sort-Object -Unique).Count
                        $consumedServiceCount = ($tenantSummaryConsumptionDataGrouped.group.ResourceType | Sort-Object -Unique).Count
                        $resourceCount = ($tenantSummaryConsumptionDataGrouped.group.ResourceId | Sort-Object -Unique).Count
                        foreach ($consumptionline in $tenantSummaryConsumptionDataGrouped) {

                            $costConsumptionLine = ($consumptionline.group.PreTaxCost | Measure-Object -Sum).Sum
                            if ([math]::Round($costConsumptionLine, 2) -eq 0) {
                                $cost = $costConsumptionLine.ToString('0.0000')
                            }
                            else {
                                $cost = [math]::Round($costConsumptionLine, 2).ToString('0.00')
                            }

                            $null = $arrayConsumptionData.Add([PSCustomObject]@{
                                    ResourceType                 = ($consumptionline.name).split(', ')[0]
                                    ConsumedServiceChargeType    = ($consumptionline.name).split(', ')[1]
                                    ConsumedServiceCategory      = ($consumptionline.name).split(', ')[2]
                                    ConsumedServiceInstanceCount = $consumptionline.Count
                                    ConsumedServiceCost          = $cost #[decimal]$cost
                                    ConsumedServiceSubscriptions = ($consumptionline.group.SubscriptionId | Sort-Object -Unique).Count
                                    ConsumedServiceCurrency      = $currency.Name
                                })

                            $totalCost = $totalCost + $costConsumptionLine
                        }
                        if ([math]::Round($totalCost, 2) -eq 0) {
                            $totalCost = $totalCost.ToString('0.0000')
                        }
                        else {
                            $totalCost = [math]::Round($totalCost, 2).ToString('0.00')
                        }
                        $arrayTotalCostSummaryMg += "$($totalCost) $($currency.Name) generated by $($resourceCount) Resources ($($consumedServiceCount) ResourceTypes) in $($subsCount) Subscriptions"
                    }

                    $tfCount = ($arrayConsumptionData).Count
                    $htmlTableId = "ScopeInsights_Consumption_$($mgChild -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
                    $randomFunctionName = "func_$htmlTableId"
                    [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><i class="fa fa-credit-card blue" aria-hidden="true"></i> Total cost $($arrayTotalCostSummaryMg -join "$CsvDelimiterOpposite ") last $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)</button>
<div class="content contentSIMG">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV
<a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> |
<a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>ChargeType</th>
<th>ResourceType</th>
<th>Category</th>
<th>ResourceCount</th>
<th>Cost ($($AzureConsumptionPeriod)d)</th>
<th>Currency</th>
<th>Subscriptions</th>
</tr>
</thead>
<tbody>
"@)
                    $htmlScopeInsightsConsumptionMg = $null
                    $htmlScopeInsightsConsumptionMg = foreach ($consumptionLine in $arrayConsumptionData) {
                        @"
<tr>
<td>$($consumptionLine.ConsumedServiceChargeType)</td>
<td>$($consumptionLine.ResourceType)</td>
<td>$($consumptionLine.ConsumedServiceCategory)</td>
<td>$($consumptionLine.ConsumedServiceInstanceCount)</td>
<td>$($consumptionLine.ConsumedServiceCost)</td>
<td>$($consumptionLine.ConsumedServiceCurrency)</td>
<td>$($consumptionLine.ConsumedServiceSubscriptions)</td>
</tr>
"@
                    }
                    [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsConsumptionMg)
                    [void]$htmlScopeInsights.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId=1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                    if ($tfCount -gt 10) {
                        $spectrum = "10, $tfCount"
                        if ($tfCount -gt 50) {
                            $spectrum = "10, 25, 50, $tfCount"
                        }
                        if ($tfCount -gt 100) {
                            $spectrum = "10, 30, 50, 100, $tfCount"
                        }
                        if ($tfCount -gt 500) {
                            $spectrum = "10, 30, 50, 100, 250, $tfCount"
                        }
                        if ($tfCount -gt 1000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                        }
                        if ($tfCount -gt 2000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                        }
                        if ($tfCount -gt 3000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                        }
                        [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
col_types: [
'caseinsensitivestring',
'caseinsensitivestring',
'caseinsensitivestring',
'number',
'number',
'caseinsensitivestring',
'number'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-credit-card" aria-hidden="true"></i> <span class="valignMiddle">No Consumption data available for Subscriptions under this ManagementGroup</span></p>
'@)
                }
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-credit-card" aria-hidden="true"></i> <span class="valignMiddle">No Consumption data available</span></p>
'@)
            }

            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@'
<p><i class="fa fa-credit-card" aria-hidden="true"></i> <span class="valignMiddle">No Consumption data available as switch parameter -DoAzureConsumption was not applied</span></p>
'@)
        }
        #endregion ScopeInsightsConsumptionMg
        #$endScopeInsightsConsumptionMg = Get-Date
        #Write-Host "   ++ScopeInsightsConsumptionMg duration:  ($((NEW-TIMESPAN -Start $startScopeInsightsConsumptionMg -End $endScopeInsightsConsumptionMg).TotalSeconds) seconds)"


    }
    #endregion ScopeInsightsManagementGroups

    #ScopeInsightsResources
    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #resources
        #region ScopeInsightsResources
        if ($mgOrSub -eq 'mg') {
            if ($resourcesAllChildSubscriptionLocationCount -gt 0) {
                $tfCount = ($resourcesAllChildSubscriptionsArray).count
                $htmlTableId = "ScopeInsights_Resources_$($mgChild -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $resourcesAllChildSubscriptionResourceTypeCount ResourceTypes ($resourcesAllChildSubscriptionTotal Resources) in $resourcesAllChildSubscriptionLocationCount Locations (all Subscriptions below this scope)</p></button>
<div class="content contentSIMG">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">ResourceType</th>
<th>Location</th>
<th>Count</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsResources = $null
                $htmlScopeInsightsResources = foreach ($resourceAllChildSubscriptionResourceTypePerLocation in $resourcesAllChildSubscriptionsArray | Sort-Object @{Expression = { $_.ResourceType } }, @{Expression = { $_.location } }) {
                    @"
<tr>
<td>$($resourceAllChildSubscriptionResourceTypePerLocation.ResourceType)</td>
<td>$($resourceAllChildSubscriptionResourceTypePerLocation.location)</td>
<td>$($resourceAllChildSubscriptionResourceTypePerLocation.ResourceCount)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsResources)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'number'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> $resourcesAllChildSubscriptionResourceTypeCount ResourceTypes (all Subscriptions below this scope)</p>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }

        if ($mgOrSub -eq 'sub') {
            if ($resourcesSubscriptionResourceTypeCount -gt 0) {
                $tfCount = ($resourcesSubscription).Count
                $htmlTableId = "ScopeInsights_Resources_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $resourcesSubscriptionResourceTypeCount ResourceTypes ($resourcesSubscriptionTotal Resources) in $resourcesSubscriptionLocationCount Locations</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">ResourceType</th>
<th>Location</th>
<th>Count</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsResources = $null
                $htmlScopeInsightsResources = foreach ($resourceSubscriptionResourceTypePerLocation in $resourcesSubscription | Sort-Object @{Expression = { $_.type } }, @{Expression = { $_.location } }, @{Expression = { $_.count_ } }) {
                    @"
<tr>
<td>$($resourceSubscriptionResourceTypePerLocation.type)</td>
<td>$($resourceSubscriptionResourceTypePerLocation.location)</td>
<td>$($resourceSubscriptionResourceTypePerLocation.count_)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsResources)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'number'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> $resourcesSubscriptionResourceTypeCount ResourceTypes</p>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }
        #endregion ScopeInsightsResources
    }

    #region ScopeInsightsOrphanedResources
    if ($mgOrSub -eq 'sub') {
        if ($arrayOrphanedResourcesGroupedBySubscription) {
            $orphanedResourcesThisSubscription = $arrayOrphanedResourcesGroupedBySubscription.where({ $_.Name -eq $subscriptionId })
            if ($orphanedResourcesThisSubscription) {
                $orphanedResourcesThisSubscriptionCount = $orphanedResourcesThisSubscription.Group.count
                $orphanedResourcesThisSubscriptionGroupedByType = $orphanedResourcesThisSubscription.Group | Group-Object -Property type
                $orphanedResourcesThisSubscriptionGroupedByTypeCount = ($orphanedResourcesThisSubscriptionGroupedByType | Measure-Object).Count
                $tfCount = $orphanedResourcesThisSubscriptionGroupedByTypeCount
                $htmlTableId = "ScopeInsights_OrphanedResources_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-trash-o" aria-hidden="true"></i> Resources orphaned $orphanedResourcesThisSubscriptionCount ($orphanedResourcesThisSubscriptionGroupedByTypeCount ResourceTypes)</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">'Azure Orphan Resources' ARG queries and workbooks</span> <a class="externallink" href="https://github.com/dolevshor/azure-orphan-resources" target="_blank" rel="noopener">GitHub <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> Resource details can be found in the CSV output *_ResourcesOrphaned.csv<br>
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>ResourceType</th>
<th>Resource count</th>
<th>Intent</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsOrphanedResources = $null
                $htmlScopeInsightsOrphanedResources = foreach ($resourceType in $orphanedResourcesThisSubscriptionGroupedByType | Sort-Object -Property Name) {
                    @"
<tr>
<td>$($resourceType.Name)</td>
<td>$($resourceType.Group.Count)</td>
<td>$($resourceType.Group[0].Intent)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsOrphanedResources)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_2: 'select',                
                col_types: [
                    'caseinsensitivestring',
                    'number',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
                <p><i class="fa fa-ban" aria-hidden="true"></i> No Resources orphaned</p>
"@)
            }
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> No Resources orphaned</p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    }
    #endregion ScopeInsightsOrphanedResources

    #ScopeInsightsDiagnosticsCapable
    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #resourcesDiagnosticsCapable
        #region ScopeInsightsDiagnosticsCapable
        if ($mgOrSub -eq 'mg') {
            $resourceTypesUnique = ($resourcesAllChildSubscriptions | select-object type -Unique).type
            $resourceTypesSummarizedArray = [System.Collections.ArrayList]@()
            foreach ($resourceTypeUnique in $resourceTypesUnique) {
                $resourcesTypeCountTotal = 0
                ($resourcesAllChildSubscriptions.where( { $_.type -eq $resourceTypeUnique } )).count_ | ForEach-Object { $resourcesTypeCountTotal += $_ }
                $dataFromResourceTypesDiagnosticsArray = $resourceTypesDiagnosticsArray.where( { $_.ResourceType -eq $resourceTypeUnique } )
                if ($dataFromResourceTypesDiagnosticsArray.Metrics -eq $true -or $dataFromResourceTypesDiagnosticsArray.Logs -eq $true) {
                    $resourceDiagnosticscapable = $true
                }
                else {
                    $resourceDiagnosticscapable = $false
                }
                $null = $resourceTypesSummarizedArray.Add([PSCustomObject]@{
                        ResourceType       = $resourceTypeUnique
                        ResourceCount      = $resourcesTypeCountTotal
                        DiagnosticsCapable = $resourceDiagnosticscapable
                        Metrics            = $dataFromResourceTypesDiagnosticsArray.Metrics
                        Logs               = $dataFromResourceTypesDiagnosticsArray.Logs
                        LogCategories      = ($dataFromResourceTypesDiagnosticsArray.LogCategories -join "$CsvDelimiterOpposite ")
                    })
            }
            $subscriptionResourceTypesDiagnosticsCapableMetricsCount = ($resourceTypesSummarizedArray.where( { $_.Metrics -eq $true } )).count
            $subscriptionResourceTypesDiagnosticsCapableLogsCount = ($resourceTypesSummarizedArray.where( { $_.Logs -eq $true } )).count
            $subscriptionResourceTypesDiagnosticsCapableMetricsLogsCount = ($resourceTypesSummarizedArray.where( { $_.Metrics -eq $true -or $_.Logs -eq $true } )).count

            if ($resourcesAllChildSubscriptionResourceTypeCount -gt 0) {
                $tfCount = $resourcesAllChildSubscriptionResourceTypeCount
                $htmlTableId = "ScopeInsights_resourcesDiagnosticsCapable_$($mgchild -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $subscriptionResourceTypesDiagnosticsCapableMetricsLogsCount/$resourcesAllChildSubscriptionResourceTypeCount ResourceTypes (1st party) Diagnostics capable ($subscriptionResourceTypesDiagnosticsCapableMetricsCount Metrics, $subscriptionResourceTypesDiagnosticsCapableLogsCount Logs) (all Subscriptions below this scope)</p></button>
<div class="content contentSIMG">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">ResourceType</th>
<th>Resource Count</th>
<th>Diagnostics capable</th>
<th>Metrics</th>
<th>Logs</th>
<th>LogCategories</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsDiagnosticsCapable = $null
                $htmlScopeInsightsDiagnosticsCapable = foreach ($resourceSubscriptionResourceType in $resourceTypesSummarizedArray | Sort-Object @{Expression = { $_.ResourceType } }) {
                    @"
<tr>
<td>$($resourceSubscriptionResourceType.ResourceType)</td>
<td>$($resourceSubscriptionResourceType.ResourceCount)</td>
<td>$($resourceSubscriptionResourceType.DiagnosticsCapable)</td>
<td>$($resourceSubscriptionResourceType.Metrics)</td>
<td>$($resourceSubscriptionResourceType.Logs)</td>
<td>$($resourceSubscriptionResourceType.LogCategories)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsDiagnosticsCapable)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                linked_filters: true,
                col_2: 'select',
                col_3: 'select',
                col_4: 'select',
                col_types: [
                    'caseinsensitivestring',
                    'number',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> $resourcesAllChildSubscriptionResourceTypeCount ResourceTypes (1st party) Diagnostics capable (all Subscriptions below this scope)</p>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }

        if ($mgOrSub -eq 'sub') {
            $resourceTypesUnique = ($resourcesSubscription | select-object type -Unique).type
            $resourceTypesSummarizedArray = [System.Collections.ArrayList]@()
            foreach ($resourceTypeUnique in $resourceTypesUnique) {
                $resourcesTypeCountTotal = 0
                ($resourcesSubscription.where( { $_.type -eq $resourceTypeUnique } )).count_ | ForEach-Object { $resourcesTypeCountTotal += $_ }
                $dataFromResourceTypesDiagnosticsArray = $resourceTypesDiagnosticsArray.where( { $_.ResourceType -eq $resourceTypeUnique } )
                if ($dataFromResourceTypesDiagnosticsArray.Metrics -eq $true -or $dataFromResourceTypesDiagnosticsArray.Logs -eq $true) {
                    $resourceDiagnosticscapable = $true
                }
                else {
                    $resourceDiagnosticscapable = $false
                }
                $null = $resourceTypesSummarizedArray.Add([PSCustomObject]@{
                        ResourceType       = $resourceTypeUnique
                        ResourceCount      = $resourcesTypeCountTotal
                        DiagnosticsCapable = $resourceDiagnosticscapable
                        Metrics            = $dataFromResourceTypesDiagnosticsArray.Metrics
                        Logs               = $dataFromResourceTypesDiagnosticsArray.Logs
                        LogCategories      = ($dataFromResourceTypesDiagnosticsArray.LogCategories -join "$CsvDelimiterOpposite ")
                    })
            }

            $subscriptionResourceTypesDiagnosticsCapableMetricsCount = ($resourceTypesSummarizedArray.where( { $_.Metrics -eq $true } )).count
            $subscriptionResourceTypesDiagnosticsCapableLogsCount = ($resourceTypesSummarizedArray.where( { $_.Logs -eq $true } )).count
            $subscriptionResourceTypesDiagnosticsCapableMetricsLogsCount = ($resourceTypesSummarizedArray.where( { $_.Metrics -eq $true -or $_.Logs -eq $true } )).count

            if ($resourcesSubscriptionResourceTypeCount -gt 0) {
                $tfCount = $resourcesSubscriptionResourceTypeCount
                $htmlTableId = "ScopeInsights_resourcesDiagnosticsCapable_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $subscriptionResourceTypesDiagnosticsCapableMetricsLogsCount/$resourcesSubscriptionResourceTypeCount ResourceTypes (1st party) Diagnostics capable ($subscriptionResourceTypesDiagnosticsCapableMetricsCount Metrics, $subscriptionResourceTypesDiagnosticsCapableLogsCount Logs)</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">ResourceType</th>
<th>Resource Count</th>
<th>Diagnostics capable</th>
<th>Metrics</th>
<th>Logs</th>
<th>LogCategories</th>
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsDiagnosticsCapable = $null
                $htmlScopeInsightsDiagnosticsCapable = foreach ($resourceSubscriptionResourceType in $resourceTypesSummarizedArray | Sort-Object @{Expression = { $_.ResourceType } }) {
                    @"
<tr>
<td>$($resourceSubscriptionResourceType.ResourceType)</td>
<td>$($resourceSubscriptionResourceType.ResourceCount)</td>
<td>$($resourceSubscriptionResourceType.DiagnosticsCapable)</td>
<td>$($resourceSubscriptionResourceType.Metrics)</td>
<td>$($resourceSubscriptionResourceType.Logs)</td>
<td>$($resourceSubscriptionResourceType.LogCategories)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsDiagnosticsCapable)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                linked_filters: true,
                col_2: 'select',
                col_3: 'select',
                col_4: 'select',
                col_types: [
                    'caseinsensitivestring',
                    'number',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@"
            <p><i class="fa fa-ban" aria-hidden="true"></i> $resourcesSubscriptionResourceTypeCount ResourceTypes (1st party) Diagnostics capable</p>
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        }
        #endregion ScopeInsightsDiagnosticsCapable
    }

    #ScopeInsightsUserAssignedIdentities4Resources
    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        if ($mgOrSub -eq 'sub') {
            #region ScopeInsightsUserAssignedIdentities4Resources
            if ($arrayUserAssignedIdentities4ResourcesSubscriptionCount -gt 0) {
                $tfCount = $arrayUserAssignedIdentities4ResourcesSubscriptionCount
                $htmlTableId = "ScopeInsights_UserAssignedIdentities4Resources_$($subscriptionId -replace '-','_')"
                $randomFunctionName = "func_$htmlTableId"
                [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-user-circle-o" aria-hidden="true"></i> UserAssigned Managed Identities assigned to Resources / vice versa</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Managed identity 'user-assigned' vs 'system-assigned'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview#managed-identity-types" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>MI Name</th>
<th>MI MgPath</th>
<th>MI Subscription Name</th>
<th>MI Subscription Id</th>
<th>MI ResourceGroup</th>
<th>MI ResourceId</th>
<th>MI AAD SP objectId</th>
<th>MI AAD SP applicationId</th>
<th>MI count Res assignments
<th class="uamiresaltbgc">Res Name</th>
<th class="uamiresaltbgc">Res Type</th>
<th class="uamiresaltbgc">Res MgPath</th>
<th class="uamiresaltbgc">Res Subscription Name</th>
<th class="uamiresaltbgc">Res Subscription Id</th>
<th class="uamiresaltbgc">Res ResourceGroup</th>
<th class="uamiresaltbgc">Res Id</th>
<th class="uamiresaltbgc">Res count assigned MIs
</tr>
</thead>
<tbody>
"@)
                $htmlScopeInsightsUserAssignedIdentities4Resource = $null
                $htmlScopeInsightsUserAssignedIdentities4Resource = foreach ($miResEntry in $arrayUserAssignedIdentities4ResourcesSubscription | Sort-Object -Property miResourceId, resourceId) {
                    @"
<tr>
    <td>$($miResEntry.miResourceName)</td>
    <td class="breakwordall">$($miResEntry.miMgPath)</td>
    <td>$($miResEntry.miSubscriptionName)</td>
    <td>$($miResEntry.miSubscriptionId)</td>
    <td>$($miResEntry.miResourceGroupName)</td>
    <td class="breakwordall">$($miResEntry.miResourceId)</td>
    <td>$($miResEntry.miPrincipalId)</td>
    <td>$($miResEntry.miClientId)</td>
    <td>$($htUserAssignedIdentitiesAssignedResources.($miResEntry.miPrincipalId).ResourcesCount)</td>
    <td>$($miResEntry.resourceName)</td>
    <td class="breakwordall">$($miResEntry.resourceType)</td>
    <td>$($miResEntry.resourceMgPath)</td>
    <td>$($miResEntry.resourceSubscriptionName)</td>
    <td>$($miResEntry.resourceSubscriptionId)</td>
    <td>$($miResEntry.resourceResourceGroupName)</td>
    <td class="breakwordall">$($miResEntry.resourceId)</td>
    <td>$($htResourcesAssignedUserAssignedIdentities.(($miResEntry.resourceId).tolower()).UserAssignedIdentitiesCount)</td>
</tr>
"@
                }
                [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsUserAssignedIdentities4Resource)
                [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlScopeInsights.AppendLine(@"
                btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                linked_filters: true,
                col_10: 'select',
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'number',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'number'
                ],
                extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
            }
            else {
                [void]$htmlScopeInsights.AppendLine(@'
            <p><i class="fa fa-ban" aria-hidden="true"></i> No UserAssigned Managed Identities assigned to Resources / vice versa - at all</p>
'@)
            }
            [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
            #endregion ScopeInsightsUserAssignedIdentities4Resources
        }
    }

    #ScopeInsightsPSRule
    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        if ($azAPICallConf['htParameters'].DoPSRule -eq $true) {
            #region ScopeInsightsPSRule

            if ($mgOrSub -eq 'mg') {

                $allPSRuleResultsUnderThisMg = [system.collections.ArrayList]@()
                foreach ($mg in $grpPSRuleManagementGroups) {
                    if ($htManagementGroupsMgPath.($mg.name -replace '.*/').path -contains $mgchild) {
                        $allPSRuleResultsUnderThisMg.AddRange($mg.Group)
                    }
                }

                $grpThisManagementGroup = $allPSRuleResultsUnderThisMg | group-object -Property resourceType, pillar, category, severity, ruleId, result

                if ($grpThisManagementGroup) {
                    $grpThisManagementGroupCount = $grpThisManagementGroup.Count
                    $tfCount = $grpThisManagementGroupCount
                    $htmlTableId = "ScopeInsights_PSRule_$($mgchild -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
                    $randomFunctionName = "func_$htmlTableId"
                    [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-check-square-o" aria-hidden="true"></i> $grpThisManagementGroupCount 'PSRule for Azure' results</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Learn about</span> <a class="externallink" href="https://azure.github.io/PSRule.Rules.Azure" target="_blank" rel="noopener">PSRule for Azure <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Resource Type</th>
<th>Resource Count</th>
<th>Subscription Count</th>
<th>Pillar</th>
<th>Category</th>
<th>Severity</th>
<th>Rule</th>
<th>Recommendation</th>
<th>lnk</th>
<th>State</th>
</tr>
</thead>
<tbody>
"@)
                    $htmlScopeInsightsPSRuleMG = $null
                    $htmlScopeInsightsPSRuleMG = foreach ($result in $grpThisManagementGroup) {
                        $resultNameSplit = $result.Name.split(', ')
                        @"
                        <tr>
                            <td>$($resultNameSplit[0])</td>
                            <td>$($result.Group.Count)</td>
                            <td>$(($result.Group.subscriptionId | Sort-Object -Unique).Count)</td>
                            <td>$($resultNameSplit[1])</td>
                            <td>$($resultNameSplit[2])</td>
                            <td>$($resultNameSplit[3])</td>
                            <td>$(($result.Group[0].rule))</td>
                            <td>$(($result.Group[0].recommendation))</td>
                            <td><a href=`"$(($result.Group[0].link))`" target=`"_blank`"><i class="fa fa-external-link" aria-hidden="true"></i></a></td>
                            <td>$($resultNameSplit[5])</td>
                        </tr>
"@
                    }
                    [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsPSRuleMG)
                    [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                    if ($tfCount -gt 10) {
                        $spectrum = "10, $tfCount"
                        if ($tfCount -gt 50) {
                            $spectrum = "10, 25, 50, $tfCount"
                        }
                        if ($tfCount -gt 100) {
                            $spectrum = "10, 30, 50, 100, $tfCount"
                        }
                        if ($tfCount -gt 500) {
                            $spectrum = "10, 30, 50, 100, 250, $tfCount"
                        }
                        if ($tfCount -gt 1000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                        }
                        if ($tfCount -gt 2000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                        }
                        if ($tfCount -gt 3000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                        }
                        [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
                btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                linked_filters: true,
                col_3: 'select',
                col_4: 'select',
                col_5: 'select',
                col_9: 'select',
                col_types: [
                    'caseinsensitivestring',
                    'number',
                    'number',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
                extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
                    
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
                    <p><i class="fa fa-ban" aria-hidden="true"></i> No PSRule for Azure results</p>
'@)
                }
                [void]$htmlScopeInsights.AppendLine(@'
                </td></tr>
                <tr><!--y--><td class="detailstd"><!--y-->
'@)
            }

            if ($mgOrSub -eq 'sub') {
                $grpThisSubscription = $grpPSRuleSubscriptions.where({ $_.Name -eq $subscriptionId })
                $grpThisSubscriptionGrouped = $grpThisSubscription.Group | group-object -Property resourceType, pillar, category, severity, ruleId, result

                if ($grpThisSubscriptionGrouped) {
                    $grpThisSubscriptionGroupedCount = $grpThisSubscriptionGrouped.Count
                    $tfCount = $grpThisSubscriptionGroupedCount
                    $htmlTableId = "ScopeInsights_PSRule_$($subscriptionId -replace '-','_')"
                    $randomFunctionName = "func_$htmlTableId"
                    [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible">
<p><i class="fa fa-check-square-o" aria-hidden="true"></i> $grpThisSubscriptionGroupedCount PSRule for Azure results</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Learn about</span> <a class="externallink" href="https://azure.github.io/PSRule.Rules.Azure" target="_blank" rel="noopener">PSRule for Azure <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Resource Type</th>
<th>Resource Count</th>
<th>Pillar</th>
<th>Category</th>
<th>Severity</th>
<th>Rule</th>
<th>Recommendation</th>
<th>lnk</th>
<th>State</th>
</tr>
</thead>
<tbody>
"@)
                    $htmlScopeInsightsPSRuleSub = $null
                    $htmlScopeInsightsPSRuleSub = foreach ($result in $grpThisSubscriptionGrouped) {
                        $resultNameSplit = $result.Name.split(', ')
                        @"
                        <tr>
                            <td>$($resultNameSplit[0])</td>
                            <td>$($result.Group.Count)</td>
                            <td>$($resultNameSplit[1])</td>
                            <td>$($resultNameSplit[2])</td>
                            <td>$($resultNameSplit[3])</td>
                            <td>$(($result.Group[0].rule))</td>
                            <td>$(($result.Group[0].recommendation))</td>
                            <td><a href=`"$(($result.Group[0].link))`" target=`"_blank`"><i class="fa fa-external-link" aria-hidden="true"></i></a></td>
                            <td>$($resultNameSplit[5])</td>
                        </tr>
"@
                    }
                    [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsPSRuleSub)
                    [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                    if ($tfCount -gt 10) {
                        $spectrum = "10, $tfCount"
                        if ($tfCount -gt 50) {
                            $spectrum = "10, 25, 50, $tfCount"
                        }
                        if ($tfCount -gt 100) {
                            $spectrum = "10, 30, 50, 100, $tfCount"
                        }
                        if ($tfCount -gt 500) {
                            $spectrum = "10, 30, 50, 100, 250, $tfCount"
                        }
                        if ($tfCount -gt 1000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                        }
                        if ($tfCount -gt 2000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                        }
                        if ($tfCount -gt 3000) {
                            $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                        }
                        [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                    }
                    [void]$htmlScopeInsights.AppendLine(@"
                btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                linked_filters: true,
                col_2: 'select',
                col_3: 'select',
                col_4: 'select',
                col_8: 'select',
                col_types: [
                    'caseinsensitivestring',
                    'number',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
                extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
    </div>
"@)
                    
                }
                else {
                    [void]$htmlScopeInsights.AppendLine(@'
                    <p><i class="fa fa-ban" aria-hidden="true"></i> No PSRule results</p>
'@)
                }
                [void]$htmlScopeInsights.AppendLine(@'
                </td></tr>
                <tr><!--y--><td class="detailstd"><!--y-->
'@)
            }
            #endregion ScopeInsightsPSRule
        }
    }

    #PolicyAssignments
    #region ScopeInsightsPolicyAssignments
    if ($mgOrSub -eq 'mg') {
        $SIDivContentClass = 'contentSIMG'
        $htmlTableIdentifier = $mgChild

        $policiesAssigned = [System.Collections.ArrayList]@()
        $policiesCount = 0
        $policiesCountBuiltin = 0
        $policiesCountCustom = 0
        $policiesAssignedAtScope = 0
        $policiesInherited = 0
        foreach ($policyAssignment in $arrayPolicyAssignmentsEnrichedForThisManagementGroupVariantPolicy) {
            if ([String]::IsNullOrEmpty($policyAssignment.subscriptionId)) {
                $null = $policiesAssigned.Add($policyAssignment)
                $policiesCount++
                if ($policyAssignment.PolicyType -eq 'BuiltIn') {
                    $policiesCountBuiltin++
                }
                if ($policyAssignment.PolicyType -eq 'Custom') {
                    $policiesCountCustom++
                }
                if ($policyAssignment.Inheritance -like 'this*') {
                    $policiesAssignedAtScope++
                }
                if ($policyAssignment.Inheritance -notlike 'this*') {
                    $policiesInherited++
                }
            }
        }
    }
    if ($mgOrSub -eq 'sub') {
        $SIDivContentClass = 'contentSISub'
        $htmlTableIdentifier = $subscriptionId

        $policiesAssigned = [System.Collections.ArrayList]@()
        $policiesCount = 0
        $policiesCountBuiltin = 0
        $policiesCountCustom = 0
        $policiesAssignedAtScope = 0
        $policiesInherited = 0
        foreach ($policyAssignment in $arrayPolicyAssignmentsEnrichedForThisSubscriptionVariantPolicy) {
            $null = $policiesAssigned.Add($policyAssignment)
            $policiesCount++
            if ($policyAssignment.PolicyType -eq 'BuiltIn') {
                $policiesCountBuiltin++
            }
            if ($policyAssignment.PolicyType -eq 'Custom') {
                $policiesCountCustom++
            }
            if ($policyAssignment.Inheritance -like 'this*') {
                $policiesAssignedAtScope++
            }
            if ($policyAssignment.Inheritance -notlike 'this*') {
                $policiesInherited++
            }
        }
    }

    if (($policiesAssigned).count -gt 0) {
        $tfCount = ($policiesAssigned).count
        $htmlTableId = "ScopeInsights_PolicyAssignments_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        $noteOrNot = ''
        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $policiesCount Policy assignments ($policiesAssignedAtScope at scope, $policiesInherited inherited) (Builtin: $policiesCountBuiltin | Custom: $policiesCountCustom)</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a><br>
&nbsp;&nbsp;<span class="hintTableSize">*Depending on the number of rows and your computerÂ´s performance the table may respond with delay, download the csv for better filtering experience</span>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Inheritance</th>
<th>ScopeExcluded</th>
<th>Exemption applies</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Type</th>
<th>Category</th>
<th>Effect</th>
<th>Parameters</th>
<th>Enforcement</th>
<th>NonCompliance Message</th>
"@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {

            [void]$htmlScopeInsights.AppendLine(@'
<th>Policies NonCmplnt</th>
<th>Policies Compliant</th>
<th>Resources NonCmplnt</th>
<th>Resources Compliant</th>
<th>Resources Conflicting</th>
'@)
        }

        [void]$htmlScopeInsights.AppendLine(@"
<th>Role/Assignment $noteOrNot</th>
<th>Managed Identity</th>
<th>Assignment DisplayName</th>
<th>AssignmentId</th>
<th>AssignedBy</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsPolicyAssignments = $null
        $htmlScopeInsightsPolicyAssignments = foreach ($policyAssignment in $policiesAssigned | Sort-Object @{Expression = { $_.Level } }, @{Expression = { $_.MgName } }, @{Expression = { $_.MgId } }, @{Expression = { $_.SubscriptionName } }, @{Expression = { $_.SubscriptionId } }, @{Expression = { $_.PolicyAssignmentId } }) {

            if ($policyAssignment.PolicyType -eq 'Custom') {
                $policyName = ($policyAssignment.PolicyName -replace '<', '&lt;' -replace '>', '&gt;')
            }
            else {
                $policyName = $policyAssignment.PolicyName
            }
            @"
<tr>
<td>$($policyAssignment.Inheritance)</td>
<td>$($policyAssignment.ExcludedScope)</td>
<td>$($policyAssignment.ExemptionScope)</td>
<td class="breakwordall">$($policyName)</td>
<td class="breakwordall">$($policyAssignment.PolicyId)</td>
<td>$($policyAssignment.PolicyType)</td>
<td>$($policyAssignment.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.Effect)</td>
<td>$($policyAssignment.PolicyAssignmentParameters)</td>
<td>$($policyAssignment.PolicyAssignmentEnforcementMode)</td>
<td>$($policyAssignment.PolicyAssignmentNonComplianceMessages)</td>
"@

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                @"
<td>$($policyAssignment.NonCompliantPolicies)</td>
<td>$($policyAssignment.CompliantPolicies)</td>
<td>$($policyAssignment.NonCompliantResources)</td>
<td>$($policyAssignment.CompliantResources)</td>
<td>$($policyAssignment.ConflictingResources)</td>
"@
            }

            @"
<td class="breakwordall">$($policyAssignment.RelatedRoleAssignments)</td>
<td>$($policyAssignment.PolicyAssignmentMI)</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.AssignedBy)</td>
<td>$($policyAssignment.CreatedOn)</td>
<td>$($policyAssignment.CreatedBy)</td>
<td>$($policyAssignment.UpdatedOn)</td>
<td>$($policyAssignment.UpdatedBy)</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsPolicyAssignments)
        [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_1: 'select',
            col_2: 'select',
            col_5: 'select',
            col_7: 'select',
            col_9: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
'@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {

            [void]$htmlScopeInsights.AppendLine(@'

                'number',
                'number',
                'number',
                'number',
                'number',
'@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
            watermark: ['try: thisScope'],
            extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($policiesAssigned).count) Policy assignments</span></p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
    #endregion ScopeInsightsPolicyAssignments

    #PolicySetAssignments
    #region ScopeInsightsPolicySetAssignments
    if ($mgOrSub -eq 'mg') {
        $SIDivContentClass = 'contentSIMG'
        $htmlTableIdentifier = $mgChild

        $policySetsAssigned = [System.Collections.ArrayList]@()
        $policySetsCount = 0
        $policySetsCountBuiltin = 0
        $policySetsCountCustom = 0
        $policySetsAssignedAtScope = 0
        $policySetsInherited = 0
        foreach ($policySetAssignment in $arrayPolicyAssignmentsEnrichedForThisManagementGroupVariantPolicySet) {
            if ([String]::IsNullOrEmpty($policySetAssignment.subscriptionId)) {
                $null = $policySetsAssigned.Add($policySetAssignment)
                $policySetsCount++
                if ($policySetAssignment.PolicyType -eq 'BuiltIn') {
                    $policySetsCountBuiltin++
                }
                if ($policySetAssignment.PolicyType -eq 'Custom') {
                    $policySetsCountCustom++
                }
                if ($policySetAssignment.Inheritance -like 'this*') {
                    $policySetsAssignedAtScope++
                }
                if ($policySetAssignment.Inheritance -notlike 'this*') {
                    $policySetsInherited++
                }
            }
        }
    }
    if ($mgOrSub -eq 'sub') {
        $SIDivContentClass = 'contentSISub'
        $htmlTableIdentifier = $subscriptionId

        $policySetsAssigned = [System.Collections.ArrayList]@()
        $policySetsCount = 0
        $policySetsCountBuiltin = 0
        $policySetsCountCustom = 0
        $policySetsAssignedAtScope = 0
        $policySetsInherited = 0
        foreach ($policySetAssignment in $arrayPolicyAssignmentsEnrichedForThisSubscriptionVariantPolicySet) {
            $null = $policySetsAssigned.Add($policySetAssignment)
            $policySetsCount++
            if ($policySetAssignment.PolicyType -eq 'BuiltIn') {
                $policySetsCountBuiltin++
            }
            if ($policySetAssignment.PolicyType -eq 'Custom') {
                $policySetsCountCustom++
            }
            if ($policySetAssignment.Inheritance -like 'this*') {
                $policySetsAssignedAtScope++
            }
            if ($policySetAssignment.Inheritance -notlike 'this*') {
                $policySetsInherited++
            }
        }
    }

    if (($policySetsAssigned).count -gt 0) {
        $tfCount = ($policiesAssigned).count
        $htmlTableId = "ScopeInsights_PolicySetAssignments_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        $noteOrNot = ''
        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $policySetsCount PolicySet assignments ($policySetsAssignedAtScope at scope, $policySetsInherited inherited) (Builtin: $policySetsCountBuiltin | Custom: $policySetsCountCustom)</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Inheritance</th>
<th>ScopeExcluded</th>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Type</th>
<th>Category</th>
<th>Parameters</th>
<th>Enforcement</th>
<th>NonCompliance Message</th>
"@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {

            [void]$htmlScopeInsights.AppendLine(@'
<th>Policies NonCmplnt</th>
<th>Policies Compliant</th>
<th>Resources NonCmplnt</th>
<th>Resources Compliant</th>
<th>Resources Conflicting</th>
'@)
        }

        [void]$htmlScopeInsights.AppendLine(@"
<th>Role/Assignment $noteOrNot</th>
<th>Managed Identity</th>
<th>Assignment DisplayName</th>
<th>AssignmentId</th>
<th>AssignedBy</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsPolicySetAssignments = $null
        $htmlScopeInsightsPolicySetAssignments = foreach ($policyAssignment in $policySetsAssigned | Sort-Object -Property Level, PolicyAssignmentId) {
            if ($policyAssignment.PolicyType -eq 'Custom') {
                $policyName = ($policyAssignment.PolicyName -replace '<', '&lt;' -replace '>', '&gt;')
            }
            else {
                $policyName = $policyAssignment.PolicyName
            }
            @"
<tr>
<td>$($policyAssignment.Inheritance)</td>
<td>$($policyAssignment.ExcludedScope)</td>
<td class="breakwordall">$($policyName)</td>
<td class="breakwordall">$($policyAssignment.PolicyId)</td>
<td>$($policyAssignment.PolicyType)</td>
<td>$($policyAssignment.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.PolicyAssignmentParameters)</td>
<td>$($policyAssignment.PolicyAssignmentEnforcementMode)</td>
<td>$($policyAssignment.PolicyAssignmentNonComplianceMessages)</td>
"@
            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                @"
<td>$($policyAssignment.NonCompliantPolicies)</td>
<td>$($policyAssignment.CompliantPolicies)</td>
<td>$($policyAssignment.NonCompliantResources)</td>
<td>$($policyAssignment.CompliantResources)</td>
<td>$($policyAssignment.ConflictingResources)</td>
"@
            }
            @"
<td class="breakwordall">$($policyAssignment.RelatedRoleAssignments)</td>
<td>$($policyAssignment.PolicyAssignmentMI)</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.AssignedBy)</td>
<td>$($policyAssignment.CreatedOn)</td>
<td>$($policyAssignment.CreatedBy)</td>
<td>$($policyAssignment.UpdatedOn)</td>
<td>$($policyAssignment.UpdatedBy)</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsPolicySetAssignments)
        [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_1: 'select',
            col_4: 'select',
            col_7: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
'@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlScopeInsights.AppendLine(@'
                'number',
                'number',
                'number',
                'number',
                'number',
'@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
            watermark: ['try: thisScope'],
            extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($policySetsAssigned).count) PolicySet assignments</span></p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
        </td></tr>
        <tr><!--y--><td class="detailstd"><!--y-->
'@)
    #endregion ScopeInsightsPolicySetAssignments

    #PolicyAssignmentsLimit (Policy+PolicySet)
    #region ScopeInsightsPolicyAssignmentsLimit
    if ($mgOrSub -eq 'mg') {
        $limit = $LimitPOLICYPolicyAssignmentsManagementGroup
    }
    if ($mgOrSub -eq 'sub') {
        $limit = $LimitPOLICYPolicyAssignmentsSubscription
    }

    if ($policiesAssignedAtScope -eq 0 -and $policySetsAssignedAtScope -eq 0) {
        $faimage = "<i class=`"fa fa-ban`" aria-hidden=`"true`"></i>"

        [void]$htmlScopeInsights.AppendLine(@"
            <p>$faImage Policy Assignment Limit: 0/$limit</p>
"@)
    }
    else {
        if ($mgOrSub -eq 'mg') {
            $scopePolicyAssignmentsLimit = $policyPolicyBaseQueryScopeInsights.where( { [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.MgId -eq $mgChild } )
        }
        if ($mgOrSub -eq 'sub') {
            $scopePolicyAssignmentsLimit = $policyPolicyBaseQueryScopeInsights.where( { $_.SubscriptionId -eq $subscriptionId } )
        }

        if ($scopePolicyAssignmentsLimit.PolicyAndPolicySetAssignmentAtScopeCount -gt (($limit) * $LimitCriticalPercentage / 100)) {
            $faImage = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
        }
        else {
            $faimage = "<i class=`"fa fa-check-circle`" aria-hidden=`"true`"></i>"
        }
        [void]$htmlScopeInsights.AppendLine(@"
            <p>$faImage Policy Assignment Limit: $($scopePolicyAssignmentsLimit.PolicyAndPolicySetAssignmentAtScopeCount)/$($limit)</p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    #endregion ScopeInsightsPolicyAssignmentsLimit

    #ScopedPolicies
    #region ScopeInsightsScopedPolicies
    if ($mgOrSub -eq 'mg') {
        $SIDivContentClass = 'contentSIMG'
        $htmlTableIdentifier = $mgChild
        $scopePolicies = $customPoliciesDetailed.where( { $_.PolicyDefinitionId -like "*/providers/Microsoft.Management/managementGroups/$mgChild/*" } )
        $scopePoliciesCount = ($scopePolicies).count
    }
    if ($mgOrSub -eq 'sub') {
        $SIDivContentClass = 'contentSISub'
        $htmlTableIdentifier = $subscriptionId
        $scopePolicies = $customPoliciesDetailed.where( { $_.PolicyDefinitionId -like "*/subscriptions/$subscriptionId/*" } )
        $scopePoliciesCount = ($scopePolicies).count
    }

    if ($scopePoliciesCount -gt 0) {
        $tfCount = $scopePoliciesCount
        $htmlTableId = "ScopeInsights_ScopedPolicies_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        if ($mgOrSub -eq 'mg') {
            $LimitPOLICYPolicyScoped = $LimitPOLICYPolicyDefinitionsScopedManagementGroup
            if ($scopePoliciesCount -gt (($LimitPOLICYPolicyScoped * $LimitCriticalPercentage) / 100)) {
                $faIcon = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
            }
            else {
                $faIcon = "<i class=`"fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
            }
        }
        if ($mgOrSub -eq 'sub') {
            $LimitPOLICYPolicyScoped = $LimitPOLICYPolicyDefinitionsScopedSubscription
            if ($scopePoliciesCount -gt (($LimitPOLICYPolicyScoped * $LimitCriticalPercentage) / 100)) {
                $faIcon = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
            }
            else {
                $faIcon = "<i class=`"fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
            }
        }

        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p>$faIcon $scopePoliciesCount Custom Policy definitions scoped | Limit: ($scopePoliciesCount/$LimitPOLICYPolicyScoped)</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">Policy DisplayName</th>
<th>PolicyId</th>
<th>Category</th>
<th>Policy effect</th>
<th>Role definitions</th>
<th>Unique assignments</th>
<th>Used in PolicySets</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsScopedPolicies = $null
        $htmlScopeInsightsScopedPolicies = foreach ($custompolicy in $scopePolicies | Sort-Object @{Expression = { $_.PolicyDisplayName } }, @{Expression = { $_.PolicyDefinitionId } }) {
            if ($custompolicy.UsedInPolicySetsCount -gt 0) {
                $customPolicyUsedInPolicySets = "$($customPolicy.UsedInPolicySetsCount) ($($customPolicy.UsedInPolicySets))"
            }
            else {
                $customPolicyUsedInPolicySets = $($customPolicy.UsedInPolicySetsCount)
            }
            @"
<tr>
<td>$($customPolicy.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicy.PolicyDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customPolicy.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customPolicy.PolicyEffect)</td>
<td>$($customPolicy.RoleDefinitions)</td>
<td class="breakwordall">$($customPolicy.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicyUsedInPolicySets)</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsScopedPolicies)
        [void]$htmlScopeInsights.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class="fa fa-ban" aria-hidden="true"></i> $scopePoliciesCount Custom Policy definitions scoped</p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    #endregion ScopeInsightsScopedPolicies

    #ScopedPolicySets
    #region ScopeInsightsScopedPolicySets
    if ($mgOrSub -eq 'mg') {
        $SIDivContentClass = 'contentSIMG'
        $htmlTableIdentifier = $mgChild
        $scopePolicySets = $customPolicySetsDetailed.where( { $_.PolicySetDefinitionId -like "*/providers/Microsoft.Management/managementGroups/$mgChild/*" } )
        $scopePolicySetsCount = ($scopePolicySets).count
    }
    if ($mgOrSub -eq 'sub') {
        $SIDivContentClass = 'contentSISub'
        $htmlTableIdentifier = $subscriptionId
        $scopePolicySets = $customPolicySetsDetailed.where( { $_.PolicySetDefinitionId -like "*/subscriptions/$subscriptionId/*" } )
        $scopePolicySetsCount = ($scopePolicySets).count
    }

    if ($scopePolicySetsCount -gt 0) {
        $tfCount = $scopePolicySetsCount
        $htmlTableId = "ScopeInsights_ScopedPolicySets_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        if ($mgOrSub -eq 'mg') {
            $LimitPOLICYPolicySetScoped = $LimitPOLICYPolicySetDefinitionsScopedManagementGroup
            if ($scopePolicySetsCount -gt (($LimitPOLICYPolicySetScoped * $LimitCriticalPercentage) / 100)) {
                $faIcon = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
            }
            else {
                $faIcon = "<i class=`"fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
            }
        }
        if ($mgOrSub -eq 'sub') {
            $LimitPOLICYPolicySetScoped = $LimitPOLICYPolicySetDefinitionsScopedSubscription
            if ($scopePolicySetsCount -gt (($LimitPOLICYPolicySetScoped * $LimitCriticalPercentage) / 100)) {
                $faIcon = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
            }
            else {
                $faIcon = "<i class=`"fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
            }
        }
        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p>$faIcon $scopePolicySetsCount Custom PolicySet definitions scoped | Limit: ($scopePolicySetsCount/$LimitPOLICYPolicySetScoped)</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Category</th>
<th>Unique assignments</th>
<th>Policies Used</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsScopedPolicySets = $null
        $htmlScopeInsightsScopedPolicySets = foreach ($custompolicySet in $scopePolicySets | Sort-Object @{Expression = { $_.PolicySetDisplayName } }, @{Expression = { $_.PolicySetDefinitionId } }) {
            @"
<tr>
<td>$($custompolicySet.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($custompolicySet.PolicySetDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($custompolicySet.PolicySetCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($custompolicySet.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($custompolicySet.PoliciesUsed)</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsScopedPolicySets)
        [void]$htmlScopeInsights.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class="fa fa-ban" aria-hidden="true"></i> $scopePolicySetsCount Custom PolicySet definitions scoped</p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    #endregion ScopeInsightsScopedPolicySets

    #BlueprintAssignments
    #region ScopeInsightsBlueprintAssignments
    if ($mgOrSub -eq 'sub') {
        if ($blueprintsAssignedCount -gt 0) {

            if ($mgOrSub -eq 'mg') {
                $htmlTableIdentifier = $mgChild
            }
            if ($mgOrSub -eq 'sub') {
                $htmlTableIdentifier = $subscriptionId
            }
            $htmlTableId = "ScopeInsights_BlueprintAssignment_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $blueprintsAssignedCount Blueprints assigned</p></button>
<div class="content contentSISub">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">Blueprint Name</th>
<th>Blueprint DisplayName</th>
<th>Blueprint Description</th>
<th>BlueprintId</th>
<th>Blueprint Version</th>
<th>Blueprint AssignmentId</th>
</tr>
</thead>
<tbody>
"@)
            $htmlScopeInsightsBlueprintAssignments = $null
            $htmlScopeInsightsBlueprintAssignments = foreach ($blueprintAssigned in $blueprintsAssigned) {
                @"
<tr>
<td>$($blueprintAssigned.BlueprintName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssigned.BlueprintDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssigned.BlueprintDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssigned.BlueprintId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssigned.BlueprintAssignmentVersion -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssigned.BlueprintAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
            }
            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsBlueprintAssignments)
            [void]$htmlScopeInsights.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class="fa fa-ban" aria-hidden="true"></i> $blueprintsAssignedCount Blueprints assigned</p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    }
    #endregion ScopeInsightsBlueprintAssignments

    #BlueprintsScoped
    #region ScopeInsightsBlueprintsScoped
    if ($blueprintsScopedCount -gt 0) {
        $tfCount = $blueprintsScopedCount
        if ($mgOrSub -eq 'mg') {
            $SIDivContentClass = 'contentSIMG'
            $htmlTableIdentifier = $mgChild
        }
        if ($mgOrSub -eq 'sub') {
            $SIDivContentClass = 'contentSISub'
            $htmlTableIdentifier = $subscriptionId
        }
        $htmlTableId = "ScopeInsights_BlueprintScoped_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $blueprintsScopedCount Blueprints scoped</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th class="widthCustom">Blueprint Name</th>
<th>Blueprint DisplayName</th>
<th>Blueprint Description</th>
<th>BlueprintId</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsBlueprintsScoped = $null
        $htmlScopeInsightsBlueprintsScoped = foreach ($blueprintScoped in $blueprintsScoped) {
            @"
<tr>
<td>$($blueprintScoped.BlueprintName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintScoped.BlueprintDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintScoped.BlueprintDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintScoped.BlueprintId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsBlueprintsScoped)
        [void]$htmlScopeInsights.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class="fa fa-ban" aria-hidden="true"></i> $blueprintsScopedCount Blueprints scoped</p>
"@)
    }
    [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
    #endregion ScopeInsightsBlueprintsScoped

    if ($mgOrSub -eq 'sub') {
        #region ScopeInsightsClassicAdministrators
        if ($htClassicAdministrators.($subscriptionId).ClassicAdministrators.Count -gt 0) {
            $tfCount = $htClassicAdministrators.($subscriptionId).ClassicAdministrators.Count
            $htmlTableId = "ScopeInsights_ClassicAdministrators_$($subscriptionId -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
            $randomFunctionName = "func_$htmlTableId"
            [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $tfCount Classic Administrators</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Role</th>
<th>Identity</th>
</tr>
</thead>
<tbody>
"@)
            $htmlScopeInsightsClassicAdministrators = $null
            $htmlScopeInsightsClassicAdministrators = foreach ($classicAdministrator in $htClassicAdministrators.($subscriptionId).ClassicAdministrators | Sort-Object -Property Role, Identity) {
                @"
<tr>
<td>$($classicAdministrator.Role)</td>
<td>$($classicAdministrator.Identity)</td>
</tr>
"@
            }
            [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsClassicAdministrators)
            [void]$htmlScopeInsights.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlScopeInsights.AppendLine(@"
                btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
                extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
        }
        else {
            [void]$htmlScopeInsights.AppendLine(@"
                    <p><i class="fa fa-ban" aria-hidden="true"></i> No Classic Administrators</p>
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@'
</td></tr>
<tr><td class="detailstd">
'@)
        #endregion ScopeInsightsClassicAdministrators
    }

    #RoleAssignments
    #region ScopeInsightsRoleAssignments
    if ($mgOrSub -eq 'mg') {
        $SIDivContentClass = 'contentSIMG'
        $htmlTableIdentifier = $mgChild
        $LimitRoleAssignmentsScope = $LimitRBACRoleAssignmentsManagementGroup

        $rolesAssigned = [System.Collections.ArrayList]@()
        $rolesAssignedCount = 0
        $rolesAssignedInheritedCount = 0
        $rolesAssignedUser = 0
        $rolesAssignedGroup = 0
        $rolesAssignedServicePrincipal = 0
        $rolesAssignedUnknown = 0
        $roleAssignmentsRelatedToPolicyCount = 0
        $roleSecurityFindingCustomRoleOwner = 0
        $roleSecurityFindingOwnerAssignmentSP = 0
        $rbacForThisManagementGroup = ($rbacAllGroupedByManagementGroup.where( { $_.name -eq $mgChild } )).group
        foreach ($roleAssignment in $rbacForThisManagementGroup) {
            if ([String]::IsNullOrEmpty($roleAssignment.subscriptionId)) {
                $null = $rolesAssigned.Add($roleAssignment)
                $rolesAssignedCount++
                if ($roleAssignment.Scope -notlike 'this*') {
                    $rolesAssignedInheritedCount++
                }
                if ($roleAssignment.ObjectType -like 'User*') {
                    $rolesAssignedUser++
                }
                if ($roleAssignment.ObjectType -eq 'Group') {
                    $rolesAssignedGroup++
                }
                if ($roleAssignment.ObjectType -like 'SP*') {
                    $rolesAssignedServicePrincipal++
                }
                if ($roleAssignment.ObjectType -eq 'Unknown') {
                    $rolesAssignedUnknown++
                }
                if ($roleAssignment.RbacRelatedPolicyAssignment -ne 'none') {
                    $roleAssignmentsRelatedToPolicyCount++
                }
                if ($roleAssignment.RoleSecurityCustomRoleOwner -eq 1) {
                    $roleSecurityFindingCustomRoleOwner++
                }
                if ($roleAssignment.RoleSecurityOwnerAssignmentSP -eq 1) {
                    $roleSecurityFindingOwnerAssignmentSP++
                }
            }
        }
    }
    if ($mgOrSub -eq 'sub') {
        $SIDivContentClass = 'contentSISub'
        $htmlTableIdentifier = $subscriptionId
        $LimitRoleAssignmentsScope = $htSubscriptionsRoleAssignmentLimit.($subscriptionId)

        $rolesAssigned = [System.Collections.ArrayList]@()
        $rolesAssignedCount = 0
        $rolesAssignedInheritedCount = 0
        $rolesAssignedUser = 0
        $rolesAssignedGroup = 0
        $rolesAssignedServicePrincipal = 0
        $rolesAssignedUnknown = 0
        $roleAssignmentsRelatedToPolicyCount = 0
        $roleSecurityFindingCustomRoleOwner = 0
        $roleSecurityFindingOwnerAssignmentSP = 0
        $rbacForThisSubscription = ($rbacAllGroupedBySubscription.where( { $_.name -eq $subscriptionId } )).group
        $rolesAssigned = foreach ($roleAssignment in $rbacForThisSubscription) {

            $roleAssignment
            $rolesAssignedCount++
            if ($roleAssignment.Scope -notlike 'this*') {
                $rolesAssignedInheritedCount++
            }
            if ($roleAssignment.ObjectType -like 'User*') {
                $rolesAssignedUser++
            }
            if ($roleAssignment.ObjectType -eq 'Group') {
                $rolesAssignedGroup++
            }
            if ($roleAssignment.ObjectType -like 'SP*') {
                $rolesAssignedServicePrincipal++
            }
            if ($roleAssignment.ObjectType -eq 'Unknown') {
                $rolesAssignedUnknown++
            }
            if ($roleAssignment.RbacRelatedPolicyAssignment -ne 'none') {
                $roleAssignmentsRelatedToPolicyCount++
            }
            if ($roleAssignment.RoleSecurityCustomRoleOwner -eq 1) {
                $roleSecurityFindingCustomRoleOwner++
            }
            if ($roleAssignment.RoleSecurityOwnerAssignmentSP -eq 1) {
                $roleSecurityFindingOwnerAssignmentSP++
            }
        }
    }

    $rolesAssignedAtScopeCount = $rolesAssignedCount - $rolesAssignedInheritedCount

    if (($rolesAssigned).count -gt 0) {
        $tfCount = ($rolesAssigned).count
        $htmlTableId = "ScopeInsights_RoleAssignments_$($htmlTableIdentifier -replace '\(','_' -replace '\)','_' -replace '-','_' -replace '\.','_')"
        $randomFunctionName = "func_$htmlTableId"
        $noteOrNot = ''
        [void]$htmlScopeInsights.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $rolesAssignedCount Role assignments ($rolesAssignedInheritedCount inherited) (User: $rolesAssignedUser | Group: $rolesAssignedGroup | ServicePrincipal: $rolesAssignedServicePrincipal | Orphaned: $rolesAssignedUnknown) ($($roleSecurityFindingCustomRoleOwnerImg)CustomRoleOwner: $roleSecurityFindingCustomRoleOwner, $($RoleSecurityFindingOwnerAssignmentSPImg)OwnerAssignmentSP: $roleSecurityFindingOwnerAssignmentSP) (Policy related: $roleAssignmentsRelatedToPolicyCount) | Limit: ($rolesAssignedAtScopeCount/$LimitRoleAssignmentsScope)</p></button>
<div class="content $SIDivContentClass">
&nbsp;&nbsp;<i class="fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a><br>
&nbsp;&nbsp;<span class="hintTableSize">*Depending on the number of rows and your computerÂ´s performance the table may respond with delay, download the csv for better filtering experience</span>
<table id="$htmlTableId" class="$cssClass">
<thead>
<tr>
<th>Scope</th>
<th>Role</th>
<th>RoleId</th>
<th>Role Type</th>
<th>Data</th>
<th>Can do Role assignment</th>
<th>Identity Displayname</th>
<th>Identity SignInName</th>
<th>Identity ObjectId</th>
<th>Identity Type</th>
<th>Applicability</th>
<th>Applies through membership <abbr title="Note: the identity might not be a direct member of the group it could also be member of a nested group"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></th>
<th>Group Details</th>
<th>Role AssignmentId</th>
<th>Related Policy Assignment $noteOrNot</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlScopeInsightsRoleAssignments = $null
        $htmlScopeInsightsRoleAssignments = foreach ($roleAssignment in ($rolesAssigned | Sort-Object -Property Level, MgName, MgId, SubscriptionName, SubscriptionId, Scope, Role, RoleId, ObjectId, RoleAssignmentId)) {
            @"
<tr>
<td>$($roleAssignment.Scope)</td>
<td>$($roleAssignment.Role)</td>
<td>$($roleAssignment.RoleId)</td>
<td>$($roleAssignment.RoleType)</td>
<td>$($roleAssignment.RoleDataRelated)</td>
<td>$($roleAssignment.RoleCanDoRoleAssignments)</td>
<td class="breakwordall">$($roleAssignment.ObjectDisplayName)</td>
<td class="breakwordall">$($roleAssignment.ObjectSignInName)</td>
<td class="breakwordall">$($roleAssignment.ObjectId)</td>
<td style="width:76px" class="breakwordnone">$($roleAssignment.ObjectType)</td>
<td>$($roleAssignment.AssignmentType)</td>
<td>$($roleAssignment.AssignmentInheritFrom)</td>
<td>$($roleAssignment.GroupMembersCount)</td>
<td class="breakwordall">$($roleAssignment.RoleAssignmentId)</td>
<td class="breakwordall">$($roleAssignment.rbacRelatedPolicyAssignment)</td>
<td>$($roleAssignment.CreatedOn)</td>
<td>$($roleAssignment.CreatedBy)</td>
</tr>
"@
        }
        [void]$htmlScopeInsights.AppendLine($htmlScopeInsightsRoleAssignments)
        [void]$htmlScopeInsights.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlScopeInsights.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlScopeInsights.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_3: 'select',
            col_4: 'select',
            col_5: 'select',
            col_9: 'multiple',
            col_10: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
            watermark: ['', 'try owner||reader', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
            extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlScopeInsights.AppendLine(@"
    <p><i class="fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($rbacAll).count) Role assignments</span></p>

"@)
    }

    [void]$htmlScopeInsights.AppendLine(@'
    </td></tr><!--rsi-->
'@)
    #endregion ScopeInsightsRoleAssignments


    if (-not $NoScopeInsights) {
        $script:html += $htmlScopeInsights
    }

    if (-not $NoSingleSubscriptionOutput) {
        if ($mgOrSub -eq 'sub') {
            $htmlThisSubSingleOutput = $htmlSubscriptionOnlyStart
            $htmlThisSubSingleOutput += $htmlScopeInsights
            $htmlThisSubSingleOutput += $htmlSubscriptionOnlyEnd
            $htmlThisSubSingleOutput | Set-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($HTMLPath)$($DirectorySeparatorChar)$($fileName)_$($subscriptionId).html" -Encoding utf8 -Force
            $htmlThisSubSingleOutput = $null
        }
    }

    if (-not $NoScopeInsights) {
        if ($scopescnter % 50 -eq 0) {
            $script:scopescnter = 0
            Write-Host '   append file duration: '(Measure-Command { $script:html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force }).TotalSeconds 'seconds'
            $script:html = $null
            #[System.GC]::Collect()
        }
    }

}
function processTenantSummary() {
    Write-Host ' Building TenantSummary'
    showMemoryUsage
    if ($getMgParentName -eq 'Tenant Root') {
        $scopeNamingSummary = 'Tenant wide'
    }
    else {
        $scopeNamingSummary = "ManagementGroup '$ManagementGroupId' and descendants wide"
    }

    #region tenantSummaryPre
    $startRoleAssignmentsAllPre = Get-Date
    $roleAssignmentsallCount = ($rbacBaseQuery).count
    Write-Host "  processing (pre) TenantSummary RoleAssignments (all $roleAssignmentsallCount)"

    #region RelatedPolicyAssignments
    $startRelatedPolicyAssignmentsAll = Get-Date
    $htRoleAssignmentRelatedPolicyAssignments = @{}
    $htOrphanedSPMI = @{}
    foreach ($roleAssignmentIdUnique in $roleAssignmentsUniqueById) {

        $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId) = @{}

        if ($htManagedIdentityForPolicyAssignment.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId)) {
            $hlpPolicyAssignmentId = ($htManagedIdentityForPolicyAssignment.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId).policyAssignmentId).ToLower()
            if (-not $htCacheAssignmentsPolicy.($hlpPolicyAssignmentId)) {
                if ($ManagementGroupId -eq $azAPICallConf['checkContext'].Tenant.Id) {
                    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                        if (-not ($htCacheAssignmentsPolicyOnResourceGroupsAndResources).($hlpPolicyAssignmentId)) {
                            Write-Host "   !Relict detected: SP MI: $($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId) - PolicyAssignmentId: $hlpPolicyAssignmentId"
                            if (-not $htOrphanedSPMI.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId)) {
                                $htOrphanedSPMI.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId) = @{}
                            }
                        }
                    }
                    else {
                        Write-Host "   !Relict detected: SP MI: $($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId) - PolicyAssignmentId: $hlpPolicyAssignmentId"
                        if (-not $htOrphanedSPMI.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId)) {
                            $htOrphanedSPMI.($roleAssignmentIdUnique.RoleAssignmentIdentityObjectId) = @{}
                        }
                    }
                }
            }
            else {
                $temp0000000000 = $htCacheAssignmentsPolicy.($hlpPolicyAssignmentId)
                $policyAssignmentId = ($temp0000000000.Assignment.id).Tolower()
                $policyDefinitionId = ($temp0000000000.Assignment.properties.policyDefinitionId).Tolower()


                #builtin
                if ($policyDefinitionId -like '/providers/Microsoft.Authorization/policy*') {
                    #policy
                    if ($policyDefinitionId -like '/providers/Microsoft.Authorization/policyDefinitions/*') {
                        $LinkOrNotLinkToAzAdvertizer = ($htCacheDefinitionsPolicy).($policyDefinitionId).LinkToAzAdvertizer
                    }
                    #policySet
                    if ($policyDefinitionId -like '/providers/Microsoft.Authorization/policySetDefinitions/*') {
                        $LinkOrNotLinkToAzAdvertizer = ($htCacheDefinitionsPolicySet).($policyDefinitionId).LinkToAzAdvertizer
                    }
                }
                else {
                    #policy
                    if ($policyDefinitionId -like '*/providers/Microsoft.Authorization/policyDefinitions/*') {
                        $policyDisplayName = ($htCacheDefinitionsPolicy).($policyDefinitionId).DisplayName

                    }
                    #policySet
                    if ($policyDefinitionId -like '*/providers/Microsoft.Authorization/policySetDefinitions/*') {
                        $policyDisplayName = ($htCacheDefinitionsPolicySet).($policyDefinitionId).DisplayName

                    }

                    $LinkOrNotLinkToAzAdvertizer = "<b>$($policyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</b>"
                }
                $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).relatedPolicyAssignment = "$($policyAssignmentId) ($LinkOrNotLinkToAzAdvertizer)"
                $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).relatedPolicyAssignmentClear = "$($policyAssignmentId) ($policyDisplayName)"
            }
        }
        else {
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).relatedPolicyAssignment = 'none'
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).relatedPolicyAssignmentClear = 'none'
        }

        if ($roleAssignmentIdUnique.RoleIsCustom -eq 'FALSE') {
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleType = 'Builtin'
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleWithWithoutLinkToAzAdvertizer = ($htCacheDefinitionsRole).($roleAssignmentIdUnique.RoleDefinitionId).LinkToAzAdvertizer
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleClear = $roleAssignmentIdUnique.RoleDefinitionName
        }
        else {

            if ($roleAssigned.RoleSecurityCustomRoleOwner -eq 1) {
                $roletype = "<abbr title=`"Custom 'Owner' Role definitions should not exist`"><i class=`"fa fa-exclamation-triangle yellow`" aria-hidden=`"true`"></i></abbr> <a class=`"externallink`" href=`"https://www.azadvertizer.net/azpolicyadvertizer/10ee2ea2-fb4d-45b8-a7e9-a2e770044cd9.html`" target=`"_blank`" rel=`"noopener`">Custom</a>"
            }
            else {
                $roleType = 'Custom'
            }

            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleType = $roleType
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleWithWithoutLinkToAzAdvertizer = $roleAssignmentIdUnique.RoleDefinitionName
            $htRoleAssignmentRelatedPolicyAssignments.($roleAssignmentIdUnique.RoleAssignmentId).roleClear = $roleAssignmentIdUnique.RoleDefinitionName
        }
    }
    $endRelatedPolicyAssignmentsAll = Get-Date
    Write-Host "   RelatedPolicyAssignmentsAll duration: $((NEW-TIMESPAN -Start $startRelatedPolicyAssignmentsAll -End $endRelatedPolicyAssignmentsAll).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startRelatedPolicyAssignmentsAll -End $endRelatedPolicyAssignmentsAll).TotalSeconds) seconds)"
    #endregion RelatedPolicyAssignments

    #region createRBACAll
    $cnter = 0
    $script:rbacAll = [System.Collections.ArrayList]@()
    $startCreateRBACAll = Get-Date
    foreach ($rbac in $rbacBaseQuery) {
        $cnter++
        if ($cnter % 1000 -eq 0) {
            $etappeRoleAssignmentsAll = Get-Date
            Write-Host "   $cnter of $roleAssignmentsallCount RoleAssignments processed; $((NEW-TIMESPAN -Start $startRoleAssignmentsAllPre -End $etappeRoleAssignmentsAll).TotalSeconds) seconds"
            #if ($cnter % 5000 -eq 0) {
            #[System.GC]::Collect()
            #}
        }
        $scope = $null

        if ($rbac.RoleAssignmentPIM -eq 'true') {
            $pim = $true
            $pimAssignmentType = $rbac.RoleAssignmentPIMAssignmentType
            $pimSlotStart = $($rbac.RoleAssignmentPIMSlotStart)
            $pimSlotEnd = $($rbac.RoleAssignmentPIMSlotEnd)
        }
        else {
            $pim = $false
            $pimAssignmentType = ''
            $pimSlotStart = ''
            $pimSlotEnd = ''
        }

        if ($rbac.RoleAssignmentId -like '/providers/Microsoft.Management/managementGroups/*') {
            $tenOrMgOrSubOrRGOrRes = 'Mg'
            if (-not [String]::IsNullOrEmpty($rbac.SubscriptionId)) {
                $scope = "inherited $($rbac.RoleAssignmentScopeName)"
            }
            else {
                if (($rbac.RoleAssignmentScopeName) -eq $rbac.MgId) {
                    $scope = 'thisScope MG'
                }
                else {
                    $scope = "inherited $($rbac.RoleAssignmentScopeName)"
                }
            }
        }

        if ($rbac.RoleAssignmentId -like '/subscriptions/*') {
            $scope = 'thisScope Sub'
            $tenOrMgOrSubOrRGOrRes = 'Sub'
        }

        if ($rbac.RoleAssignmentId -like '/subscriptions/*/resourcegroups/*') {
            $scope = 'thisScope Sub RG'
            $tenOrMgOrSubOrRGOrRes = 'RG'
        }

        if ($rbac.RoleAssignmentId -like '/subscriptions/*/resourcegroups/*/providers/*/providers/*') {
            $scope = 'thisScope Sub RG Res'
            $tenOrMgOrSubOrRGOrRes = 'Res'
        }

        if ($rbac.RoleAssignmentId -like '/providers/Microsoft.Authorization/roleAssignments/*') {
            $scope = 'inherited Tenant'
            $tenOrMgOrSubOrRGOrRes = 'Ten'
        }

        $objectTypeUserType = ''
        if ($rbac.RoleAssignmentIdentityObjectType -eq 'User') {
            if ($htUserTypesGuest.($rbac.RoleAssignmentIdentityObjectId)) {
                $objectTypeUserType = 'Guest'
            }
            else {
                $objectTypeUserType = 'Member'
            }
        }

        if (-not [string]::IsNullOrEmpty($rbac.RoleDataActions) -or -not [string]::IsNullOrEmpty($rbac.RoleNotDataActions)) {
            $roleManageData = 'true'
        }
        else {
            $roleManageData = 'false'
        }

        $hlpRoleAssignmentRelatedPolicyAssignments = $htRoleAssignmentRelatedPolicyAssignments.($rbac.RoleAssignmentId)

        if (-not $NoAADGroupsResolveMembers) {
            if ($rbac.RoleAssignmentIdentityObjectType -eq 'Group') {

                $grpHlpr = $htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId)
                $null = $script:rbacAll.Add([PSCustomObject]@{
                        Level                                = $rbac.Level
                        RoleAssignmentId                     = $rbac.RoleAssignmentId
                        RoleAssignmentPIMRelated             = $pim
                        RoleAssignmentPIMAssignmentType      = $pimAssignmentType
                        RoleAssignmentPIMAssignmentSlotStart = $pimSlotStart
                        RoleAssignmentPIMAssignmentSlotEnd   = $pimSlotEnd
                        RoleAssignmentScopeName              = $rbac.RoleAssignmentScopeName
                        RoleAssignmentScopeRG                = $rbac.RoleAssignmentScopeRG
                        RoleAssignmentScopeRes               = $rbac.RoleAssignmentScopeRes
                        CreatedBy                            = $rbac.RoleAssignmentCreatedBy
                        CreatedOn                            = $rbac.RoleAssignmentCreatedOn
                        #UpdatedBy                        = $rbac.RoleAssignmentUpdatedBy
                        #UpdatedOn                        = $rbac.RoleAssignmentUpdatedOn
                        MgId                                 = $rbac.MgId
                        MgName                               = $rbac.MgName
                        MgParentId                           = $rbac.MgParentId
                        MgParentName                         = $rbac.MgParentName
                        SubscriptionId                       = $rbac.SubscriptionId
                        SubscriptionName                     = $rbac.Subscription
                        Scope                                = $scope
                        Role                                 = $hlpRoleAssignmentRelatedPolicyAssignments.roleWithWithoutLinkToAzAdvertizer
                        RoleClear                            = $hlpRoleAssignmentRelatedPolicyAssignments.roleClear
                        RoleId                               = $rbac.RoleDefinitionId
                        RoleType                             = $hlpRoleAssignmentRelatedPolicyAssignments.roleType
                        RoleDataRelated                      = $roleManageData
                        AssignmentType                       = 'direct'
                        AssignmentInheritFrom                = ''
                        GroupMembersCount                    = "$($grpHlpr.MembersAllCount) (Usr: $($grpHlpr.MembersUsersCount)$($CsvDelimiterOpposite) Grp: $($grpHlpr.MembersGroupsCount)$($CsvDelimiterOpposite) SP: $($grpHlpr.MembersServicePrincipalsCount))"
                        ObjectDisplayName                    = $rbac.RoleAssignmentIdentityDisplayname
                        ObjectSignInName                     = $rbac.RoleAssignmentIdentitySignInName
                        ObjectId                             = $rbac.RoleAssignmentIdentityObjectId
                        ObjectType                           = $rbac.RoleAssignmentIdentityObjectType
                        TenOrMgOrSubOrRGOrRes                = $tenOrMgOrSubOrRGOrRes
                        RbacRelatedPolicyAssignment          = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignment
                        RbacRelatedPolicyAssignmentClear     = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignmentClear
                        RoleSecurityCustomRoleOwner          = $rbac.RoleSecurityCustomRoleOwner
                        RoleSecurityOwnerAssignmentSP        = $rbac.RoleSecurityOwnerAssignmentSP
                        RoleCanDoRoleAssignments             = $rbac.RoleCanDoRoleAssignments
                    })


                if ($grpHlpr.MembersAllCount -gt 0) {

                    if ($htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId).MembersAllCount -le $AADGroupMembersLimit) {

                        foreach ($groupmember in $htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId).MembersAll) {
                            if ($groupmember.'@odata.type' -eq '#microsoft.graph.user') {
                                if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $true) {
                                    $grpMemberDisplayName = 'scrubbed'
                                    $grpMemberSignInName = 'scrubbed'
                                }
                                else {
                                    $grpMemberDisplayName = $groupmember.displayName
                                    $grpMemberSignInName = $groupmember.userPrincipalName
                                }
                                $grpMemberId = $groupmember.Id
                                $grpMemberType = 'User'
                                $grpMemberUserType = ''

                                if ($htUserTypesGuest.($grpMemberId)) {
                                    $grpMemberUserType = 'Guest'
                                }
                                else {
                                    $grpMemberUserType = 'Member'
                                }

                                $identityTypeFull = "$grpMemberType $grpMemberUserType"
                            }
                            if ($groupmember.'@odata.type' -eq '#microsoft.graph.group') {
                                $grpMemberDisplayName = $groupmember.displayName
                                $grpMemberSignInName = 'n/a'
                                $grpMemberId = $groupmember.Id
                                $grpMemberType = 'Group'
                                $grpMemberUserType = ''
                                $identityTypeFull = "$grpMemberType"
                            }
                            if ($groupmember.'@odata.type' -eq '#microsoft.graph.servicePrincipal') {
                                $grpMemberDisplayName = $groupmember.appDisplayName
                                $grpMemberSignInName = 'n/a'
                                $grpMemberId = $groupmember.Id
                                $grpMemberType = 'ServicePrincipal'
                                $grpMemberUserType = ''
                                $identityType = $htServicePrincipals.($grpMemberId).spTypeConcatinated
                                $identityTypeFull = "$identityType"
                            }

                            $null = $script:rbacAll.Add([PSCustomObject]@{
                                    Level                                = $rbac.Level
                                    RoleAssignmentId                     = $rbac.RoleAssignmentId
                                    RoleAssignmentPIMRelated             = $pim
                                    RoleAssignmentPIMAssignmentType      = $pimAssignmentType
                                    RoleAssignmentPIMAssignmentSlotStart = $pimSlotStart
                                    RoleAssignmentPIMAssignmentSlotEnd   = $pimSlotEnd
                                    RoleAssignmentScopeName              = $rbac.RoleAssignmentScopeName
                                    RoleAssignmentScopeRG                = $rbac.RoleAssignmentScopeRG
                                    RoleAssignmentScopeRes               = $rbac.RoleAssignmentScopeRes
                                    CreatedBy                            = $rbac.RoleAssignmentCreatedBy
                                    CreatedOn                            = $rbac.RoleAssignmentCreatedOn
                                    #UpdatedBy                        = $rbac.RoleAssignmentUpdatedBy
                                    #UpdatedOn                        = $rbac.RoleAssignmentUpdatedOn
                                    MgId                                 = $rbac.MgId
                                    MgName                               = $rbac.MgName
                                    MgParentId                           = $rbac.MgParentId
                                    MgParentName                         = $rbac.MgParentName
                                    SubscriptionId                       = $rbac.SubscriptionId
                                    SubscriptionName                     = $rbac.Subscription
                                    Scope                                = $scope
                                    Role                                 = $hlpRoleAssignmentRelatedPolicyAssignments.roleWithWithoutLinkToAzAdvertizer
                                    RoleClear                            = $hlpRoleAssignmentRelatedPolicyAssignments.roleClear
                                    RoleId                               = $rbac.RoleDefinitionId
                                    RoleType                             = $hlpRoleAssignmentRelatedPolicyAssignments.roleType
                                    RoleDataRelated                      = $roleManageData
                                    AssignmentType                       = 'indirect'
                                    AssignmentInheritFrom                = "$($rbac.RoleAssignmentIdentityDisplayname) ($($rbac.RoleAssignmentIdentityObjectId))"
                                    GroupMembersCount                    = "$($grpHlpr.MembersAllCount) (Usr: $($grpHlpr.MembersUsersCount)$($CsvDelimiterOpposite) Grp: $($grpHlpr.MembersGroupsCount)$($CsvDelimiterOpposite) SP: $($grpHlpr.MembersServicePrincipalsCount))"
                                    ObjectDisplayName                    = $grpMemberDisplayName
                                    ObjectSignInName                     = $grpMemberSignInName
                                    ObjectId                             = $grpMemberId
                                    ObjectType                           = $identityTypeFull
                                    TenOrMgOrSubOrRGOrRes                = $tenOrMgOrSubOrRGOrRes
                                    RbacRelatedPolicyAssignment          = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignment
                                    RbacRelatedPolicyAssignmentClear     = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignmentClear
                                    RoleSecurityCustomRoleOwner          = $rbac.RoleSecurityCustomRoleOwner
                                    RoleSecurityOwnerAssignmentSP        = $rbac.RoleSecurityOwnerAssignmentSP
                                    RoleCanDoRoleAssignments             = $rbac.RoleCanDoRoleAssignments
                                })
                        }
                    }
                    else {
                        $null = $script:rbacAll.Add([PSCustomObject]@{
                                Level                                = $rbac.Level
                                RoleAssignmentId                     = $rbac.RoleAssignmentId
                                RoleAssignmentPIMRelated             = $pim
                                RoleAssignmentPIMAssignmentType      = $pimAssignmentType
                                RoleAssignmentPIMAssignmentSlotStart = $pimSlotStart
                                RoleAssignmentPIMAssignmentSlotEnd   = $pimSlotEnd
                                RoleAssignmentScopeName              = $rbac.RoleAssignmentScopeName
                                RoleAssignmentScopeRG                = $rbac.RoleAssignmentScopeRG
                                RoleAssignmentScopeRes               = $rbac.RoleAssignmentScopeRes
                                CreatedBy                            = $rbac.RoleAssignmentCreatedBy
                                CreatedOn                            = $rbac.RoleAssignmentCreatedOn
                                #UpdatedBy                        = $rbac.RoleAssignmentUpdatedBy
                                #UpdatedOn                        = $rbac.RoleAssignmentUpdatedOn
                                MgId                                 = $rbac.MgId
                                MgName                               = $rbac.MgName
                                MgParentId                           = $rbac.MgParentId
                                MgParentName                         = $rbac.MgParentName
                                SubscriptionId                       = $rbac.SubscriptionId
                                SubscriptionName                     = $rbac.Subscription
                                Scope                                = $scope
                                Role                                 = $hlpRoleAssignmentRelatedPolicyAssignments.roleWithWithoutLinkToAzAdvertizer
                                RoleClear                            = $hlpRoleAssignmentRelatedPolicyAssignments.roleClear
                                RoleId                               = $rbac.RoleDefinitionId
                                RoleType                             = $hlpRoleAssignmentRelatedPolicyAssignments.roleType
                                RoleDataRelated                      = $roleManageData
                                AssignmentType                       = 'indirect'
                                AssignmentInheritFrom                = "$($rbac.RoleAssignmentIdentityDisplayname) ($($rbac.RoleAssignmentIdentityObjectId))"
                                GroupMembersCount                    = "$($grpHlpr.MembersAllCount) (Usr: $($grpHlpr.MembersUsersCount)$($CsvDelimiterOpposite) Grp: $($grpHlpr.MembersGroupsCount)$($CsvDelimiterOpposite) SP: $($grpHlpr.MembersServicePrincipalsCount))"
                                ObjectDisplayName                    = "AzGovViz:TooManyMembers ($($htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId).MembersAllCount))"
                                ObjectSignInName                     = "AzGovViz:TooManyMembers ($($htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId).MembersAllCount))"
                                ObjectId                             = "AzGovViz:TooManyMembers ($($htAADGroupsDetails.($rbac.RoleAssignmentIdentityObjectId).MembersAllCount))"
                                ObjectType                           = 'unresolved'
                                TenOrMgOrSubOrRGOrRes                = $tenOrMgOrSubOrRGOrRes
                                RbacRelatedPolicyAssignment          = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignment
                                RbacRelatedPolicyAssignmentClear     = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignmentClear
                                RoleSecurityCustomRoleOwner          = $rbac.RoleSecurityCustomRoleOwner
                                RoleSecurityOwnerAssignmentSP        = $rbac.RoleSecurityOwnerAssignmentSP
                                RoleCanDoRoleAssignments             = $rbac.RoleCanDoRoleAssignments
                            })
                    }
                }

            }
            else {

                if ($rbac.RoleAssignmentIdentityObjectType -eq 'ServicePrincipal') {
                    $identityType = $htServicePrincipals.($rbac.RoleAssignmentIdentityObjectId).spTypeConcatinated
                    $identityTypeFull = $identityType
                }
                elseif ($rbac.RoleAssignmentIdentityObjectType -eq 'Unknown') {
                    $identityTypeFull = 'Unknown'
                }
                else {
                    #user
                    $identityType = $rbac.RoleAssignmentIdentityObjectType
                    $identityTypeFull = "$identityType $objectTypeUserType"
                }

                $null = $script:rbacAll.Add([PSCustomObject]@{
                        Level                                = $rbac.Level
                        RoleAssignmentId                     = $rbac.RoleAssignmentId
                        RoleAssignmentPIMRelated             = $pim
                        RoleAssignmentPIMAssignmentType      = $pimAssignmentType
                        RoleAssignmentPIMAssignmentSlotStart = $pimSlotStart
                        RoleAssignmentPIMAssignmentSlotEnd   = $pimSlotEnd
                        RoleAssignmentScopeName              = $rbac.RoleAssignmentScopeName
                        RoleAssignmentScopeRG                = $rbac.RoleAssignmentScopeRG
                        RoleAssignmentScopeRes               = $rbac.RoleAssignmentScopeRes
                        CreatedBy                            = $rbac.RoleAssignmentCreatedBy
                        CreatedOn                            = $rbac.RoleAssignmentCreatedOn
                        #UpdatedBy                        = $rbac.RoleAssignmentUpdatedBy
                        #UpdatedOn                        = $rbac.RoleAssignmentUpdatedOn
                        MgId                                 = $rbac.MgId
                        MgName                               = $rbac.MgName
                        MgParentId                           = $rbac.MgParentId
                        MgParentName                         = $rbac.MgParentName
                        SubscriptionId                       = $rbac.SubscriptionId
                        SubscriptionName                     = $rbac.Subscription
                        Scope                                = $scope
                        Role                                 = $hlpRoleAssignmentRelatedPolicyAssignments.roleWithWithoutLinkToAzAdvertizer
                        RoleClear                            = $hlpRoleAssignmentRelatedPolicyAssignments.roleClear
                        RoleId                               = $rbac.RoleDefinitionId
                        RoleType                             = $hlpRoleAssignmentRelatedPolicyAssignments.roleType
                        RoleDataRelated                      = $roleManageData
                        AssignmentType                       = 'direct'
                        AssignmentInheritFrom                = ''
                        GroupMembersCount                    = ''
                        ObjectDisplayName                    = $rbac.RoleAssignmentIdentityDisplayname
                        ObjectSignInName                     = $rbac.RoleAssignmentIdentitySignInName
                        ObjectId                             = $rbac.RoleAssignmentIdentityObjectId
                        ObjectType                           = $identityTypeFull
                        TenOrMgOrSubOrRGOrRes                = $tenOrMgOrSubOrRGOrRes
                        RbacRelatedPolicyAssignment          = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignment
                        RbacRelatedPolicyAssignmentClear     = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignmentClear
                        RoleSecurityCustomRoleOwner          = $rbac.RoleSecurityCustomRoleOwner
                        RoleSecurityOwnerAssignmentSP        = $rbac.RoleSecurityOwnerAssignmentSP
                        RoleCanDoRoleAssignments             = $rbac.RoleCanDoRoleAssignments
                    })
            }
        }
        else {

            if ($rbac.RoleAssignmentIdentityObjectType -eq 'ServicePrincipal') {
                $identityType = $htServicePrincipals.($rbac.RoleAssignmentIdentityObjectId).spTypeConcatinated
                $identityTypeFull = $identityType
            }
            elseif ($rbac.RoleAssignmentIdentityObjectType -eq 'Unknown') {
                $identityTypeFull = 'Unknown'
            }
            elseif ($rbac.RoleAssignmentIdentityObjectType -eq 'Group') {
                $identityTypeFull = 'Group'
            }
            else {
                #user
                $identityType = $rbac.RoleAssignmentIdentityObjectType
                $identityTypeFull = "$identityType $objectTypeUserType"
            }

            #noaadgroupmemberresolve
            $null = $script:rbacAll.Add([PSCustomObject]@{
                    Level                                = $rbac.Level
                    RoleAssignmentId                     = $rbac.RoleAssignmentId
                    RoleAssignmentPIMRelated             = $pim
                    RoleAssignmentPIMAssignmentType      = $pimAssignmentType
                    RoleAssignmentPIMAssignmentSlotStart = $pimSlotStart
                    RoleAssignmentPIMAssignmentSlotEnd   = $pimSlotEnd
                    RoleAssignmentScopeName              = $rbac.RoleAssignmentScopeName
                    RoleAssignmentScopeRG                = $rbac.RoleAssignmentScopeRG
                    RoleAssignmentScopeRes               = $rbac.RoleAssignmentScopeRes
                    CreatedBy                            = $rbac.RoleAssignmentCreatedBy
                    CreatedOn                            = $rbac.RoleAssignmentCreatedOn
                    #UpdatedBy                        = $rbac.RoleAssignmentUpdatedBy
                    #UpdatedOn                        = $rbac.RoleAssignmentUpdatedOn
                    MgId                                 = $rbac.MgId
                    MgName                               = $rbac.MgName
                    MgParentId                           = $rbac.MgParentId
                    MgParentName                         = $rbac.MgParentName
                    SubscriptionId                       = $rbac.SubscriptionId
                    SubscriptionName                     = $rbac.Subscription
                    Scope                                = $scope
                    Role                                 = $hlpRoleAssignmentRelatedPolicyAssignments.roleWithWithoutLinkToAzAdvertizer
                    RoleClear                            = $hlpRoleAssignmentRelatedPolicyAssignments.roleClear
                    RoleId                               = $rbac.RoleDefinitionId
                    RoleType                             = $hlpRoleAssignmentRelatedPolicyAssignments.roleType
                    RoleDataRelated                      = $roleManageData
                    AssignmentType                       = 'direct'
                    AssignmentInheritFrom                = ''
                    GroupMembersCount                    = ''
                    ObjectDisplayName                    = $rbac.RoleAssignmentIdentityDisplayname
                    ObjectSignInName                     = $rbac.RoleAssignmentIdentitySignInName
                    ObjectId                             = $rbac.RoleAssignmentIdentityObjectId
                    ObjectType                           = $identityTypeFull
                    TenOrMgOrSubOrRGOrRes                = $tenOrMgOrSubOrRGOrRes
                    RbacRelatedPolicyAssignment          = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignment
                    RbacRelatedPolicyAssignmentClear     = $hlpRoleAssignmentRelatedPolicyAssignments.relatedPolicyAssignmentClear
                    RoleSecurityCustomRoleOwner          = $rbac.RoleSecurityCustomRoleOwner
                    RoleSecurityOwnerAssignmentSP        = $rbac.RoleSecurityOwnerAssignmentSP
                    RoleCanDoRoleAssignments             = $rbac.RoleCanDoRoleAssignments
                })
        }
    }
    #endregion createRBACAll

    Write-Host '   Processing unresoved Identities (createdBy)'
    $startUnResolvedIdentitiesCreatedBy = Get-Date
    #prep prepUnresoledIdentities
    #region identitiesThatCreatedRoleAssignmentsButDontHaveARoleAssignmentThemselve
    $script:htIdentitiesWithRoleAssignmentsUnique = @{}
    $identitiesWithRoleAssignmentsUnique = $rbacAll.where( { $_.ObjectType -ne 'Unknown' } ) | Sort-Object -property ObjectId -Unique | select-object ObjectType, ObjectDisplayName, ObjectSignInName, ObjectId
    foreach ($identityWithRoleAssignment in $identitiesWithRoleAssignmentsUnique | Sort-Object -property objectType) {

        if (-not $htIdentitiesWithRoleAssignmentsUnique.($identityWithRoleAssignment.ObjectId)) {
            $script:htIdentitiesWithRoleAssignmentsUnique.($identityWithRoleAssignment.ObjectId) = @{}

            $arr = @()
            $ht = [ordered]@{}
            $identityWithRoleAssignment.psobject.properties | ForEach-Object {
                if ($_.Value) {
                    $value = $_.Value
                }
                else {
                    $value = 'n/a'
                }
                $arr += "$($_.Name): $value"
                $ht.($_.Name) = $value
            }

            $script:htIdentitiesWithRoleAssignmentsUnique.($identityWithRoleAssignment.ObjectId).details = $arr -join "$CsvDelimiterOpposite "
            $script:htIdentitiesWithRoleAssignmentsUnique.($identityWithRoleAssignment.ObjectId).detailsJson = $ht
        }
    }
    #endregion identitiesThatCreatedRoleAssignmentsButDontHaveARoleAssignmentThemselve

    #enrich rbacAll with createdBy and UpdatedBy identity information
    #region enrichrbacAll
    $htNonResolvedIdentities = @{}
    foreach ($rbac in $rbacAll) {
        $createdBy = $rbac.createdBy
        if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
            $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details
            $rbac.CreatedBy = $createdBy
        }
        else {
            if (-not $htNonResolvedIdentities.($rbac.createdBy)) {
                $htNonResolvedIdentities.($rbac.createdBy) = @{}
            }
        }
    }
    #endregion enrichrbacAll

    $htNonResolvedIdentitiesCount = $htNonResolvedIdentities.Count
    if ($htNonResolvedIdentitiesCount -gt 0) {
        Write-Host "    $htNonResolvedIdentitiesCount unresolved identities that created a RBAC Role assignment (createdBy)"
        $arrayUnresolvedIdentities = @()
        $arrayUnresolvedIdentities = foreach ($unresolvedIdentity in $htNonResolvedIdentities.keys) {
            if (-not [string]::IsNullOrEmpty($unresolvedIdentity)) {
                $unresolvedIdentity
            }
        }
        $arrayUnresolvedIdentitiesCount = $arrayUnresolvedIdentities.Count
        Write-Host "    $arrayUnresolvedIdentitiesCount unresolved identities that have a value"
        if ($arrayUnresolvedIdentitiesCount -gt 0) {

            $counterBatch = [PSCustomObject] @{ Value = 0 }
            $batchSize = 1000
            $ObjectBatch = $arrayUnresolvedIdentities | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }
            $ObjectBatchCount = ($ObjectBatch | Measure-Object).Count
            $batchCnt = 0

            $script:htResolvedIdentities = @{}

            foreach ($batch in $ObjectBatch) {
                $batchCnt++

                $nonResolvedIdentitiesToCheck = '"{0}"' -f ($batch.Group -join '","')
                Write-Host "     IdentitiesToCheck: Batch #$batchCnt/$($ObjectBatchCount) ($(($batch.Group).Count))"
                $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/directoryObjects/getByIds"
                $method = 'POST'
                $body = @"
                    {
                        "ids":[$($nonResolvedIdentitiesToCheck)]
                    }
"@

                function resolveIdentitiesRBAC($currentTask) {
                    $resolvedIdentities = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask
                    $resolvedIdentitiesCount = $resolvedIdentities.Count
                    Write-Host "    $resolvedIdentitiesCount identities resolved"
                    if ($resolvedIdentitiesCount -gt 0) {

                        foreach ($resolvedIdentity in $resolvedIdentities) {

                            if (-not $htResolvedIdentities.($resolvedIdentity.id)) {

                                $script:htResolvedIdentities.($resolvedIdentity.id) = @{}
                                if ($resolvedIdentity.'@odata.type' -eq '#microsoft.graph.servicePrincipal' -or $resolvedIdentity.'@odata.type' -eq '#microsoft.graph.user') {
                                    if ($resolvedIdentity.'@odata.type' -eq '#microsoft.graph.servicePrincipal') {
                                        if ($resolvedIdentity.servicePrincipalType -eq 'ManagedIdentity') {
                                            $miType = 'unknown'
                                            foreach ($altName in $resolvedIdentity.alternativeNames) {
                                                if ($altName -like 'isExplicit=*') {
                                                    $splitAltName = $altName.split('=')
                                                    if ($splitAltName[1] -eq 'true') {
                                                        $miType = 'Usr'
                                                    }
                                                    if ($splitAltName[1] -eq 'false') {
                                                        $miType = 'Sys'
                                                    }
                                                }
                                            }
                                            $sptype = "MI $miType"
                                            $custObjectType = "ObjectType: SP $sptype, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (r)"
                                            $ht = @{}
                                            $ht.'ObjectType' = "SP $sptype"
                                            $ht.'ObjectDisplayName' = $($resolvedIdentity.displayName)
                                            $ht.'ObjectSignInName' = 'n/a'
                                            $ht.'ObjectId' = $resolvedIdentity.id
                                        }
                                        else {
                                            if ($resolvedIdentity.servicePrincipalType -eq 'Application') {
                                                $sptype = 'App'
                                                if ($resolvedIdentity.appOwnerOrganizationId -eq $azAPICallConf['checkContext'].Tenant.Id) {
                                                    $custObjectType = "ObjectType: SP $sptype INT, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (r)"
                                                    $ht = @{}
                                                    $ht.'ObjectType' = "SP $sptype INT"
                                                    $ht.'ObjectDisplayName' = $($resolvedIdentity.displayName)
                                                    $ht.'ObjectSignInName' = 'n/a'
                                                    $ht.'ObjectId' = $resolvedIdentity.id
                                                }
                                                else {
                                                    $custObjectType = "ObjectType: SP $sptype EXT, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (r)"
                                                    $ht = @{}
                                                    $ht.'ObjectType' = "SP $sptype EXT"
                                                    $ht.'ObjectDisplayName' = $($resolvedIdentity.displayName)
                                                    $ht.'ObjectSignInName' = 'n/a'
                                                    $ht.'ObjectId' = $resolvedIdentity.id
                                                }
                                            }
                                            else {
                                                Write-Host "* * * Unexpected IdentityType $($resolvedIdentity.servicePrincipalType)"
                                            }
                                        }
                                        $script:htResolvedIdentities.($resolvedIdentity.id).custObjectType = $custObjectType
                                        $script:htResolvedIdentities.($resolvedIdentity.id).obj = $resolvedIdentity
                                    }

                                    if ($resolvedIdentity.'@odata.type' -eq '#microsoft.graph.user') {
                                        if ($htParamteters.DoNotShowRoleAssignmentsUserData) {
                                            $hlpObjectDisplayName = 'scrubbed'
                                            $hlpObjectSigninName = 'scrubbed'
                                        }
                                        else {
                                            $hlpObjectDisplayName = $resolvedIdentity.displayName
                                            $hlpObjectSigninName = $resolvedIdentity.userPrincipalName
                                        }
                                        $custObjectType = "ObjectType: User, ObjectDisplayName: $hlpObjectDisplayName, ObjectSignInName: $hlpObjectSigninName, ObjectId: $($resolvedIdentity.id) (r)"
                                        $ht = @{}
                                        $ht.'ObjectType' = 'User'
                                        $ht.'ObjectDisplayName' = $hlpObjectDisplayName
                                        $ht.'ObjectSignInName' = $hlpObjectSigninName
                                        $ht.'ObjectId' = $resolvedIdentity.id

                                        $script:htResolvedIdentities.($resolvedIdentity.id).custObjectType = $custObjectType
                                        $script:htResolvedIdentities.($resolvedIdentity.id).obj = $resolvedIdentity
                                    }
                                    if (-not $htIdentitiesWithRoleAssignmentsUnique.($resolvedIdentity.id)) {
                                        $script:htIdentitiesWithRoleAssignmentsUnique.($resolvedIdentity.id) = @{}
                                        $script:htIdentitiesWithRoleAssignmentsUnique.($resolvedIdentity.id).details = $custObjectType
                                        $script:htIdentitiesWithRoleAssignmentsUnique.($resolvedIdentity.id).detailsJson = $ht
                                    }
                                }

                                if ($resolvedIdentity.'@odata.type' -ne '#microsoft.graph.user' -and $resolvedIdentity.'@odata.type' -ne '#microsoft.graph.servicePrincipal') {
                                    Write-Host "!!! * * * IdentityType '$($resolvedIdentity.'@odata.type')' was not considered by AzGovViz - if you see this line, please file an issue on GitHub - thank you." -ForegroundColor Yellow
                                }
                            }
                        }
                    }
                }
                resolveIdentitiesRBAC -currentTask '    resolveObjectbyId RoleAssignment'
            }

            foreach ($rbac in $rbacAll.where( { $_.CreatedBy -notlike 'ObjectType*' })) {
                if ($htResolvedIdentities.($rbac.CreatedBy)) {
                    $rbac.CreatedBy = $htResolvedIdentities.($rbac.CreatedBy).custObjectType
                }
                else {
                    if ([string]::IsNullOrEmpty($rbac.CreatedBy)) {
                        $rbac.CreatedBy = 'IsNullOrEmpty'
                    }
                    else {
                        $rbac.CreatedBy = "$($rbac.CreatedBy)"
                    }
                }
            }
        }
    }

    $endUnResolvedIdentitiesCreatedBy = Get-Date
    Write-Host "   UnresolvedIdentities (createdBy) duration: $((NEW-TIMESPAN -Start $startUnResolvedIdentitiesCreatedBy -End $endUnResolvedIdentitiesCreatedBy).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startUnResolvedIdentitiesCreatedBy -End $endUnResolvedIdentitiesCreatedBy).TotalSeconds) seconds)"

    $startRBACAllGrouping = Get-Date
    $script:rbacAllGroupedBySubscription = $rbacAll | Group-Object -Property SubscriptionId
    $script:rbacAllGroupedByManagementGroup = $rbacAll | Group-Object -Property MgId
    $endRBACAllGrouping = Get-Date
    Write-Host "   RBACAll Grouping duration: $((NEW-TIMESPAN -Start $startRBACAllGrouping -End $endRBACAllGrouping).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startRBACAllGrouping -End $endRBACAllGrouping).TotalSeconds) seconds)"
    $endCreateRBACAll = Get-Date
    Write-Host "   CreateRBACAll duration: $((NEW-TIMESPAN -Start $startCreateRBACAll -End $endCreateRBACAll).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCreateRBACAll -End $endCreateRBACAll).TotalSeconds) seconds)"
    #endregion tenantSummaryPre

    showMemoryUsage

    #region tenantSummaryPolicy
    $htmlTenantSummary = [System.Text.StringBuilder]::new()
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummaryPolicy"><hr class="hr-textPolicy" data-content="Policy" /></button>
<div class="content TenantSummaryContent">
<i class="padlx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Anything which can help you learn Azure Policy</span> <a class="externallink" href="https://github.com/globalbao/awesome-azure-policy" target="_blank" rel="noopener">GitHub <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)

    #region SUMMARYcustompolicies
    $startCustPolLoop = Get-Date
    Write-Host '  processing TenantSummary Custom Policy definitions'

    $script:customPoliciesDetailed = [System.Collections.ArrayList]@()
    $script:tenantPoliciesDetailed = [System.Collections.ArrayList]@()
    foreach ($tenantPolicy in (($htCacheDefinitionsPolicy).Values | Sort-Object @{Expression = { $_.DisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {

        #uniqueAssignments
        $policyUniqueAssignments = $null
        if ($htPolicyWithAssignmentsBase.($tenantPolicy.PolicyDefinitionId)) {
            $policyUniqueAssignments = $htPolicyWithAssignmentsBase.($tenantPolicy.PolicyDefinitionId).Assignments | Sort-Object
            $policyUniqueAssignmentsCount = ($policyUniqueAssignments).count
        }
        else {
            $policyUniqueAssignmentsCount = 0
        }

        $uniqueAssignments = $null
        if ($policyUniqueAssignmentsCount -gt 0) {
            $policyUniqueAssignmentsList = "($($policyUniqueAssignments -join "$CsvDelimiterOpposite "))"
            $uniqueAssignments = "$policyUniqueAssignmentsCount $policyUniqueAssignmentsList"
        }
        else {
            $uniqueAssignments = $policyUniqueAssignmentsCount
        }

        #PolicyUsedInPolicySet
        $usedInPolicySet4JSON = $null
        $usedInPolicySet = 0
        $usedInPolicySet4CSV = ''
        $usedInPolicySetCount = 0
        if (($htPoliciesUsedInPolicySets).($tenantPolicy.PolicyDefinitionId)) {
            $hlpPolicySetUsed = ($htPoliciesUsedInPolicySets).($tenantPolicy.PolicyDefinitionId)
            $usedInPolicySet4JSON = $hlpPolicySetUsed.PolicySetIdOnly | Sort-Object
            $usedInPolicySet = "$(($hlpPolicySetUsed.PolicySet | Sort-Object) -join "$CsvDelimiterOpposite ")"
            $usedInPolicySet4CSV = "$(($hlpPolicySetUsed.PolicySet4CSV | Sort-Object) -join "$CsvDelimiterOpposite ")"
            $usedInPolicySetCount = ($hlpPolicySetUsed.PolicySet).Count
        }

        #policyEffect
        if ($tenantPolicy.effectDefaultValue -ne 'n/a') {
            $effect = "Default: $($tenantPolicy.effectDefaultValue); Allowed: $($tenantPolicy.effectAllowedValue)"
        }
        else {
            $effect = "Fixed: $($tenantPolicy.effectFixedValue)"
        }

        if (($tenantPolicy.RoleDefinitionIds) -ne 'n/a') {
            $policyRoleDefinitionsArray = @()
            $policyRoleDefinitionsArray = foreach ($roleDefinitionId in $tenantPolicy.RoleDefinitionIds | Sort-Object) {
                if (($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/').LinkToAzAdvertizer) {
                    ($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/').LinkToAzAdvertizer
                }
                else {
                    ($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/').Name -replace '<', '&lt;' -replace '>', '&gt;'
                }
            }
            $policyRoleDefinitionsClearArray = @()
            $policyRoleDefinitionsClearArray = foreach ($roleDefinitionId in $tenantPolicy.RoleDefinitionIds | Sort-Object) {
                ($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/').Name
            }
            $policyRoleDefinitions = $policyRoleDefinitionsArray -join "$CsvDelimiterOpposite "
            $policyRoleDefinitionsClear = $policyRoleDefinitionsClearArray -join "$CsvDelimiterOpposite "
        }
        else {
            $policyRoleDefinitions = 'n/a'
            $policyRoleDefinitionsClear = 'n/a'
        }

        if ($tenantPolicy.Type -eq 'Custom') {

            $createdOn = ''
            $createdBy = ''
            $createdByJson = ''
            $updatedOn = ''
            $updatedBy = ''
            $updatedByJson = ''
            if ($tenantPolicy.Json.properties.metadata.createdOn) {
                $createdOn = $tenantPolicy.Json.properties.metadata.createdOn
            }
            if ($tenantPolicy.Json.properties.metadata.createdBy) {
                $createdBy = $tenantPolicy.Json.properties.metadata.createdBy
                $createdByJson = $createdBy
                if ($createdBy -ne 'n/a') {
                    if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
                        $createdByJson = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).detailsJson
                        $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details

                    }
                }
            }
            if ($tenantPolicy.Json.properties.metadata.updatedOn) {
                $updatedOn = $tenantPolicy.Json.properties.metadata.updatedOn
            }
            if ($tenantPolicy.Json.properties.metadata.updatedBy) {
                $updatedBy = $tenantPolicy.Json.properties.metadata.updatedBy
                $updatedByJson = $updatedBy
                if ($updatedBy -ne 'n/a') {
                    if ($htIdentitiesWithRoleAssignmentsUnique.($updatedBy)) {
                        $updatedByJson = $htIdentitiesWithRoleAssignmentsUnique.($updatedBy).detailsJson
                        $updatedBy = $htIdentitiesWithRoleAssignmentsUnique.($updatedBy).details

                    }
                }
            }

            $null = $script:customPoliciesDetailed.Add([PSCustomObject]@{
                    Type                  = 'Custom'
                    ScopeMGLevel          = $tenantPolicy.ScopeMGLevel
                    Scope                 = $tenantPolicy.ScopeMgSub
                    ScopeId               = $tenantPolicy.ScopeId
                    PolicyDisplayName     = $tenantPolicy.DisplayName
                    PolicyDefinitionId    = $tenantPolicy.PolicyDefinitionId
                    PolicyEffect          = $effect
                    PolicyCategory        = $tenantPolicy.Category
                    RoleDefinitions       = $policyRoleDefinitions
                    RoleDefinitionsClear  = $policyRoleDefinitionsClear
                    UniqueAssignments     = $uniqueAssignments
                    UsedInPolicySetsCount = $usedInPolicySetCount
                    UsedInPolicySets      = $usedInPolicySet
                    UsedInPolicySet4CSV   = $usedInPolicySet4CSV
                    CreatedOn             = $createdOn
                    CreatedBy             = $createdBy
                    UpdatedOn             = $updatedOn
                    UpdatedBy             = $updatedBy
                    #Json                  = [string]($tenantPolicy.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                })

            $null = $script:tenantPoliciesDetailed.Add([PSCustomObject]@{
                    Type                   = 'Custom'
                    ScopeMGLevel           = $tenantPolicy.ScopeMGLevel
                    Scope                  = $tenantPolicy.ScopeMgSub
                    ScopeId                = $tenantPolicy.ScopeId
                    PolicyDisplayName      = $tenantPolicy.DisplayName
                    PolicyDefinitionName   = $tenantPolicy.PolicyDefinitionId -replace '.*/'
                    PolicyDefinitionId     = $tenantPolicy.PolicyDefinitionId
                    PolicyEffect           = $effect
                    PolicyCategory         = $tenantPolicy.Category
                    UniqueAssignmentsCount = $policyUniqueAssignmentsCount
                    UniqueAssignments      = $policyUniqueAssignments
                    UsedInPolicySetsCount  = $usedInPolicySetCount
                    UsedInPolicySets       = $usedInPolicySet
                    UsedInPolicySet4CSV    = $usedInPolicySet4CSV
                    UsedInPolicySet4JSON   = $usedInPolicySet4JSON
                    CreatedOn              = $createdOn
                    CreatedBy              = $createdBy
                    CreatedByJson          = $createdByJson
                    UpdatedOn              = $updatedOn
                    UpdatedBy              = $updatedBy
                    UpdatedByJson          = $updatedByJson
                    #Json                  = [string]($tenantPolicy.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                    Json                   = $tenantPolicy.Json
                })
        }
        else {
            $null = $script:tenantPoliciesDetailed.Add([PSCustomObject]@{
                    Type                   = 'BuiltIn'
                    ScopeMGLevel           = $null
                    Scope                  = $null
                    ScopeId                = $null
                    PolicyDisplayName      = $tenantPolicy.DisplayName
                    PolicyDefinitionName   = $tenantPolicy.PolicyDefinitionId -replace '.*/'
                    PolicyDefinitionId     = $tenantPolicy.PolicyDefinitionId
                    PolicyEffect           = $effect
                    PolicyCategory         = $tenantPolicy.Category
                    UniqueAssignmentsCount = $policyUniqueAssignmentsCount
                    UniqueAssignments      = $policyUniqueAssignments
                    UsedInPolicySetsCount  = $usedInPolicySetCount
                    UsedInPolicySets       = $usedInPolicySet
                    UsedInPolicySet4CSV    = $usedInPolicySet4CSV
                    UsedInPolicySet4JSON   = $usedInPolicySet4JSON
                    CreatedOn              = $null
                    CreatedBy              = $null
                    CreatedByJson          = $null
                    UpdatedOn              = $null
                    UpdatedBy              = $null
                    UpdatedByJson          = $null
                    #Json                  = [string]($tenantPolicy.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                    Json                   = $tenantPolicy.Json
                })
        }
    }

    if (-not $NoCsvExport) {
        $csvFilename = "$($filename)_PolicyDefinitions"
        Write-Host "   Exporting PolicyDefinitions CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
        $tenantPoliciesDetailed | Sort-Object -Property Type, Scope, PolicyDefinitionId | Select-Object -ExcludeProperty UniqueAssignments, UsedInPolicySets, UsedInPolicySet4JSON, CreatedByJson, UpdatedByJson, Json | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
    }

    if ($getMgParentName -eq 'Tenant Root') {

        if ($tenantCustomPoliciesCount -gt 0) {
            $tfCount = $tenantCustomPoliciesCount
            $htmlTableId = 'TenantSummary_customPolicies'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPolicies"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPoliciesCount Custom Policy definitions ($scopeNamingSummary)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Scope Id</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Category</th>
<th>Effect</th>
<th>Role definitions</th>
<th>Unique assignments</th>
<th>Used in PolicySets</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYcustompolicies = $null
            $htmlSUMMARYcustompolicies = foreach ($customPolicy in ($customPoliciesDetailed | Sort-Object @{Expression = { $_.PolicyDisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {
                if ($custompolicy.UsedInPolicySetsCount -gt 0) {
                    $customPolicyUsedInPolicySets = "$($customPolicy.UsedInPolicySetsCount) ($($customPolicy.UsedInPolicySets))"
                }
                else {
                    $customPolicyUsedInPolicySets = $($customPolicy.UsedInPolicySetsCount)
                }
                @"
<tr>
<td class="breakwordall">$($customPolicy.Scope)</td>
<td class="breakwordall">$($customPolicy.ScopeId)</td>
<td class="breakwordall">$($customPolicy.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicy.PolicyDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicy.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicy.PolicyEffect)</td>
<td class="breakwordall">$($customPolicy.RoleDefinitions)</td>
<td class="breakwordall">$($customPolicy.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicyUsedInPolicySets)</td>
<td class="breakwordall">$($customPolicy.CreatedOn)</td>
<td class="breakwordall">$($customPolicy.CreatedBy)</td>
<td class="breakwordall">$($customPolicy.UpdatedOn)</td>
<td class="breakwordall">$($customPolicy.UpdatedBy)</td>
</tr>
"@
            }

            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYcustompolicies)
            $htmlTenantSummary | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $htmlTenantSummary = [System.Text.StringBuilder]::new()
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
            btn_reset: true,
            highlight_keywords: true,
            alternate_rows: true,
            auto_filter: {
                delay: 1100
            },
            no_results_message: true,
            col_widths: ['', '150px', '150px', '250px', '150px', '150px', '150px', '150px', '250px', '', '150px', '', '150px'],
            col_0: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
            extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPoliciesCount Custom Policy definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #SUMMARY NOT tenant total custom policy definitions
    else {
        $faimage = "<i class=`"fa fa-check-circle`" aria-hidden=`"true`"></i>"


        if ($tenantCustomPoliciesCount -gt 0) {
            $tfCount = $tenantCustomPoliciesCount
            $customPoliciesInScopeArray = [System.Collections.ArrayList]@()
            foreach ($customPolicy in ($tenantCustomPolicies | Sort-Object @{Expression = { $_.DisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {
                if (($customPolicy.PolicyDefinitionId) -like '/providers/Microsoft.Management/managementGroups/*') {
                    $policyScopedMgSub = $customPolicy.PolicyDefinitionId -replace '/providers/Microsoft.Management/managementGroups/', '' -replace '/.*'
                    if ($mgsAndSubs.MgId -contains ($policyScopedMgSub)) {
                        $null = $customPoliciesInScopeArray.Add($customPolicy)
                    }
                }

                if (($customPolicy.PolicyDefinitionId) -like '/subscriptions/*') {
                    $policyScopedMgSub = $customPolicy.PolicyDefinitionId -replace '/subscriptions/', '' -replace '/.*'
                    if ($mgsAndSubs.SubscriptionId -contains ($policyScopedMgSub)) {
                        $null = $customPoliciesInScopeArray.Add($customPolicy)
                    }
                    else {
                        #Write-Host "$policyScopedMgSub NOT in Scope"
                    }
                }
            }
            $customPoliciesFromSuperiorMGs = $tenantCustomPoliciesCount - (($customPoliciesInScopeArray).count)
        }
        else {
            $customPoliciesFromSuperiorMGs = '0'
        }

        if ($tenantCustomPoliciesCount -gt 0) {
            $tfCount = $tenantCustomPoliciesCount
            $htmlTableId = 'TenantSummary_customPolicies'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPolicies"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPoliciesCount Custom Policy definitions $scopeNamingSummary ($customPoliciesFromSuperiorMGs from superior scopes)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Scope Id</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Category</th>
<th>Policy Effect</th>
<th>Role definitions</th>
<th>Unique assignments</th>
<th>Used in PolicySets</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYcustompolicies = $null
            $htmlSUMMARYcustompolicies = foreach ($customPolicy in ($customPoliciesDetailed | Sort-Object @{Expression = { $_.PolicyDisplayName } }, @{Expression = { $_.PolicyDefinitionId } })) {
                if ($custompolicy.UsedInPolicySetsCount -gt 0) {
                    $customPolicyUsedInPolicySets = "$($customPolicy.UsedInPolicySetsCount) ($($customPolicy.UsedInPolicySets))"
                }
                else {
                    $customPolicyUsedInPolicySets = $($customPolicy.UsedInPolicySetsCount)
                }
                @"
<tr>
<td>$($customPolicy.Scope)</td>
<td>$($customPolicy.ScopeId)</td>
<td>$($customPolicy.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicy.PolicyDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customPolicy.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customPolicy.PolicyEffect)</td>
<td>$($customPolicy.RoleDefinitions)</td>
<td class="breakwordall">$($customPolicy.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicyUsedInPolicySets)</td>
<td>$($customPolicy.CreatedOn)</td>
<td>$($customPolicy.CreatedBy)</td>
<td>$($customPolicy.UpdatedOn)</td>
<td>$($customPolicy.UpdatedBy)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYcustompolicies)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPoliciesCount Custom Policy definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    $endCustPolLoop = Get-Date
    Write-Host "   Custom Policy processing duration: $((NEW-TIMESPAN -Start $startCustPolLoop -End $endCustPolLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCustPolLoop -End $endCustPolLoop).TotalSeconds) seconds)"
    #endregion SUMMARYcustompolicies

    $startcustpolorph = Get-Date
    #region SUMMARYCustomPoliciesOrphandedTenantRoot
    Write-Host '  processing TenantSummary Custom Policy definitions orphaned'
    if ($getMgParentName -eq 'Tenant Root') {
        $customPoliciesOrphaned = [System.Collections.ArrayList]@()
        foreach ($customPolicyAll in $tenantCustomPolicies) {
            if (($policyPolicyBaseQueryUniqueCustomDefinitions).count -eq 0) {
                $null = $customPoliciesOrphaned.Add($customPolicyAll)
            }
            else {
                if ($policyPolicyBaseQueryUniqueCustomDefinitions -notcontains ($customPolicyAll.PolicyDefinitionId)) {
                    $null = $customPoliciesOrphaned.Add($customPolicyAll)
                }
            }
        }

        $arrayCustomPoliciesOrphanedFinal = [System.Collections.ArrayList]@()
        foreach ($customPolicyOrphaned in $customPoliciesOrphaned) {
            if ($customPolicyOrphaned.Id) {
                if (-not $htPoliciesUsedInPolicySets.($customPolicyOrphaned.Id)) {
                    $null = $arrayCustomPoliciesOrphanedFinal.Add($customPolicyOrphaned)
                }
            }
            else {
                Write-Host '!!!!!!!!!!!!!!!!!!!!!  no Id'
                Write-Host '## all:'
                $customPoliciesOrphaned
                Write-Host '## customPolicyOrphaned no Id:'
                $customPolicyOrphaned
            }
        }

        #rgchange
        $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()
        foreach ($customPolicyOrphanedFinal in $arrayCustomPoliciesOrphanedFinal) {
            if (($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values.properties.PolicyDefinitionId -notcontains $customPolicyOrphanedFinal.PolicyDefinitionId) {
                $null = $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups.Add($customPolicyOrphanedFinal)
            }
        }

        if (($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customPoliciesOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPoliciesOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Policy definitions ($scopeNamingSummary)</span> <abbr title="Policy is not used in a PolicySet &#13;AND &#13;Policy has no assignments (including ResourceGroups)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Policy DisplayName</th>
<th>PolicyId</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYCustomPoliciesOrphandedTenantRoot = $null
            $htmlSUMMARYCustomPoliciesOrphandedTenantRoot = foreach ($customPolicyOrphaned in $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.PolicyDefinitionId } }, @{Expression = { $_.DisplayName } }) {
                @"
<tr>
<td>$($customPolicyOrphaned.DisplayName)</td>
<td>$($customPolicyOrphaned.PolicyDefinitionId)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYCustomPoliciesOrphandedTenantRoot)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($customPoliciesOrphaned).count) Orphaned Custom Policy definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #SUMMARY Custom Policy definitions Orphanded NOT TenantRoot
    else {
        $customPoliciesOrphaned = [System.Collections.ArrayList]@()
        foreach ($customPolicyAll in $tenantCustomPolicies) {
            if (($policyPolicyBaseQueryUniqueCustomDefinitions).count -eq 0) {
                $null = $customPoliciesOrphaned.Add($customPolicyAll)
            }
            else {
                if ($policyPolicyBaseQueryUniqueCustomDefinitions -notcontains ($customPolicyAll.PolicyDefinitionId)) {
                    $null = $customPoliciesOrphaned.Add($customPolicyAll)
                }
            }
        }

        $customPoliciesOrphanedInScopeArray = [System.Collections.ArrayList]@()
        foreach ($customPolicyOrphaned in  $customPoliciesOrphaned) {
            $hlpOrphanedInScope = $customPolicyOrphaned
            if (($hlpOrphanedInScope.PolicyDefinitionId) -like '/providers/Microsoft.Management/managementGroups/*') {
                $policyScopedMgSub = $hlpOrphanedInScope.PolicyDefinitionId -replace '/providers/Microsoft.Management/managementGroups/' -replace '/.*'
                if ($mgsAndSubs.MgId -contains ($policyScopedMgSub)) {
                    $null = $customPoliciesOrphanedInScopeArray.Add($hlpOrphanedInScope)
                }
            }
            if (($hlpOrphanedInScope.PolicyDefinitionId) -like '/subscriptions/*') {
                $policyScopedMgSub = $hlpOrphanedInScope.PolicyDefinitionId -replace '/subscriptions/' -replace '/.*'
                if ($mgsAndSubs.SubscriptionId -contains ($policyScopedMgSub)) {
                    $null = $customPoliciesOrphanedInScopeArray.Add($hlpOrphanedInScope)
                }
            }
        }

        $arrayCustomPoliciesOrphanedFinal = [System.Collections.ArrayList]@()
        foreach ($customPolicyOrphanedInScopeArray in $customPoliciesOrphanedInScopeArray) {
            if (-not $htPoliciesUsedInPolicySets.($customPolicyOrphanedInScopeArray.Id)) {
                $null = $arrayCustomPoliciesOrphanedFinal.Add($customPolicyOrphanedInScopeArray)
            }
        }

        $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()
        foreach ($customPolicyOrphanedFinal in $arrayCustomPoliciesOrphanedFinal) {
            if (($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values.properties.PolicyDefinitionId -notcontains $customPolicyOrphanedFinal.PolicyDefinitionId) {
                $null = $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups.Add($customPolicyOrphanedFinal)
            }
        }

        if (($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customPoliciesOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPoliciesOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Policy definitions ($scopeNamingSummary)</span> <abbr title="Policy is not used in a PolicySet &#13;AND &#13;Policy has no assignments (including ResourceGroups) &#13;Note: Policies from superior scopes are not evaluated"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Policy DisplayName</th>
<th>PolicyId</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYCustomPoliciesOrphandedTenantRoot = $null
            $htmlSUMMARYCustomPoliciesOrphandedTenantRoot = foreach ($customPolicyOrphaned in $arrayCustomPoliciesOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.PolicyDefinitionId } }, @{Expression = { $_.DisplayName } }) {
                @"
<tr>
<td>$($customPolicyOrphaned.DisplayName)</td>
<td>$($customPolicyOrphaned.PolicyDefinitionId)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYCustomPoliciesOrphandedTenantRoot)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($arrayCustomPoliciesOrphanedFinalIncludingResourceGroups.count) Orphaned Custom Policy definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #endregion SUMMARYCustomPoliciesOrphandedTenantRoot
    $endcustpolorph = Get-Date
    Write-Host "   processing TenantSummary Custom Policy definitions orphaned duration: $((NEW-TIMESPAN -Start $startcustpolorph -End $endcustpolorph).TotalSeconds) seconds"

    #region SUMMARYtenanttotalcustompolicySets
    $startCustPolSetLoop = Get-Date
    Write-Host '  processing TenantSummary Custom PolicySet definitions'
    $script:customPolicySetsDetailed = [System.Collections.ArrayList]@()
    $script:tenantPolicySetsDetailed = [System.Collections.ArrayList]@()
    $custompolicySetsInScopeArray = [System.Collections.ArrayList]@()
    foreach ($tenantPolicySet in ($tenantAllPolicySets)) {

        $policySetUniqueAssignments = $policyPolicySetBaseQueryUniqueAssignments.where( { $_.PolicyDefinitionId -eq $tenantPolicySet.Id }).PolicyAssignmentId
        $policySetUniqueAssignmentsArray = [System.Collections.ArrayList]@()
        foreach ($policySetUniqueAssignment in $policySetUniqueAssignments) {
            $null = $policySetUniqueAssignmentsArray.Add($policySetUniqueAssignment)
        }
        $policySetUniqueAssignmentsCount = ($policySetUniqueAssignments).count
        if ($policySetUniqueAssignmentsCount -gt 0) {
            $policySetUniqueAssignmentsList = "($($policySetUniqueAssignmentsArray -join "$CsvDelimiterOpposite "))"
            $policySetUniqueAssignment = "$policySetUniqueAssignmentsCount $policySetUniqueAssignmentsList"
        }
        else {
            $policySetUniqueAssignment = $policySetUniqueAssignmentsCount
        }

        $policySetPoliciesArray = [System.Collections.ArrayList]@()
        $policySetPoliciesArrayClean = [System.Collections.ArrayList]@()
        $policySetPoliciesArrayIdOnly = [System.Collections.ArrayList]@()
        foreach ($policyPolicySet in $tenantPolicySet.PolicySetPolicyIds) {
            $hlpPolicyDef = ($htCacheDefinitionsPolicy).($policyPolicySet)

            if ($hlpPolicyDef.Type -eq 'Builtin') {
                $null = $policySetPoliciesArray.Add("$($hlpPolicyDef.LinkToAzAdvertizer) ($policyPolicySet)")
            }
            else {
                if ($hlpPolicyDef.DisplayName) {
                    if ([string]::IsNullOrEmpty($hlpPolicyDef.DisplayName)) {
                        $displayName = 'noDisplayNameGiven'
                    }
                    else {
                        $displayName = $hlpPolicyDef.DisplayName
                    }
                }
                else {
                    $displayName = 'noDisplayNameGiven'
                }
                $null = $policySetPoliciesArray.Add("<b>$($displayName -replace '<', '&lt;' -replace '>', '&gt;')</b> ($policyPolicySet)")
            }
            if ($hlpPolicyDef.DisplayName) {
                if ([string]::IsNullOrEmpty($hlpPolicyDef.DisplayName)) {
                    $displayName = 'noDisplayNameGiven'
                }
                else {
                    $displayName = $hlpPolicyDef.DisplayName
                }
            }
            else {
                $displayName = 'noDisplayNameGiven'
            }
            $null = $policySetPoliciesArrayClean.Add("$($displayName) ($policyPolicySet)")
            $null = $policySetPoliciesArrayIdOnly.Add($policyPolicySet)
        }
        if ($policySetPoliciesArrayIdOnly.Count -eq 0) {
            $policySetPoliciesArrayIdOnly = $null
        }

        $policySetPoliciesCount = ($policySetPoliciesArray).count
        if ($policySetPoliciesCount -gt 0) {
            $policiesUsed = "$policySetPoliciesCount ($(($policySetPoliciesArray | sort-Object) -join "$CsvDelimiterOpposite "))"
            $policiesUsedClean = "$policySetPoliciesCount ($(($policySetPoliciesArrayClean | sort-Object) -join "$CsvDelimiterOpposite "))"
        }
        else {
            $policiesUsed = '0 really?'
            $policiesUsedClean = '0 really?'
        }

        if ($tenantPolicySet.Type -eq 'Custom') {
            #inscopeOrNot
            if ($getMgParentName -ne 'Tenant Root') {
                if ($mgsAndSubs.MgId -contains ($tenantPolicySet.ScopeId)) {
                    $null = $custompolicySetsInScopeArray.Add($tenantPolicySet)
                }
                if ($mgsAndSubs.SubscriptionId -contains ($tenantPolicySet.ScopeId)) {
                    $null = $custompolicySetsInScopeArray.Add($tenantPolicySet)
                }
            }

            $createdOn = ''
            $createdBy = ''
            $createdByJson = ''
            $updatedOn = ''
            $updatedBy = ''
            $updatedByJson = ''
            if ($tenantPolicySet.Json.properties.metadata.createdOn) {
                $createdOn = $tenantPolicySet.Json.properties.metadata.createdOn.ToString('yyyy-MM-dd HH:mm:ss')
            }
            if ($tenantPolicySet.Json.properties.metadata.createdBy) {
                $createdBy = $tenantPolicySet.Json.properties.metadata.createdBy
                $createdByJson = $createdBy
                if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
                    $createdByJson = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).detailsJson
                    $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details
                }
            }
            if ($tenantPolicySet.Json.properties.metadata.updatedOn) {
                $updatedOn = $tenantPolicySet.Json.properties.metadata.updatedOn.ToString('yyyy-MM-dd HH:mm:ss')
            }
            if ($tenantPolicySet.Json.properties.metadata.updatedBy) {
                $updatedBy = $tenantPolicySet.Json.properties.metadata.updatedBy
                $updatedByJson = $updatedBy
                if ($htIdentitiesWithRoleAssignmentsUnique.($updatedBy)) {
                    $updatedByJson = $htIdentitiesWithRoleAssignmentsUnique.($updatedBy).detailsJson
                    $updatedBy = $htIdentitiesWithRoleAssignmentsUnique.($updatedBy).details

                }
            }

            $null = $script:customPolicySetsDetailed.Add([PSCustomObject]@{
                    Type                  = 'Custom'
                    ScopeMGLevel          = $tenantPolicySet.ScopeMGLevel
                    Scope                 = $tenantPolicySet.ScopeMgSub
                    ScopeId               = $tenantPolicySet.ScopeId
                    PolicySetDisplayName  = $tenantPolicySet.DisplayName
                    PolicySetDefinitionId = $tenantPolicySet.PolicyDefinitionId
                    PolicySetCategory     = $tenantPolicySet.Category
                    UniqueAssignments     = $policySetUniqueAssignment
                    PoliciesUsed          = $policiesUsed
                    PoliciesUsedClean     = $policiesUsedClean
                    CreatedOn             = $createdOn
                    CreatedBy             = $createdBy
                    UpdatedOn             = $updatedOn
                    UpdatedBy             = $updatedBy
                    #Json                  = [string]($tenantPolicySet.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                })

            $null = $script:tenantPolicySetsDetailed.Add([PSCustomObject]@{
                    Type                    = 'Custom'
                    ScopeMGLevel            = $tenantPolicySet.ScopeMGLevel
                    Scope                   = $tenantPolicySet.ScopeMgSub
                    ScopeId                 = $tenantPolicySet.ScopeId
                    PolicySetDisplayName    = $tenantPolicySet.DisplayName
                    PolicySetDefinitionName = $tenantPolicySet.PolicyDefinitionId -replace '.*/'
                    PolicySetDefinitionId   = $tenantPolicySet.PolicyDefinitionId
                    PolicySetCategory       = $tenantPolicySet.Category
                    UniqueAssignmentsCount  = $policySetUniqueAssignmentsCount
                    UniqueAssignments       = $policySetUniqueAssignments
                    PoliciesUsedCount       = $policySetPoliciesCount
                    PoliciesUsed            = $policySetPoliciesArrayClean
                    PoliciesUsed4JSON       = $policySetPoliciesArrayIdOnly
                    CreatedOn               = $createdOn
                    CreatedBy               = $createdBy
                    CreatedByJson           = $createdByJson
                    UpdatedOn               = $updatedOn
                    UpdatedBy               = $updatedBy
                    UpdatedByJson           = $updatedByJson
                    #Json                  = [string]($tenantPolicySet.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                    Json                    = $tenantPolicySet.Json
                })

        }
        else {
            $null = $script:tenantPolicySetsDetailed.Add([PSCustomObject]@{
                    Type                    = 'BuiltIn'
                    ScopeMGLevel            = $null
                    Scope                   = $null
                    ScopeId                 = $null
                    PolicySetDisplayName    = $tenantPolicySet.DisplayName
                    PolicySetDefinitionName = $tenantPolicySet.PolicyDefinitionId -replace '.*/'
                    PolicySetDefinitionId   = $tenantPolicySet.PolicyDefinitionId
                    PolicySetCategory       = $tenantPolicySet.Category
                    UniqueAssignmentsCount  = $policySetUniqueAssignmentsCount
                    UniqueAssignments       = $policySetUniqueAssignments
                    PoliciesUsedCount       = $policySetPoliciesCount
                    PoliciesUsed            = $policySetPoliciesArrayClean
                    PoliciesUsed4JSON       = $policySetPoliciesArrayIdOnly
                    CreatedOn               = ''
                    CreatedBy               = ''
                    CreatedByJson           = $null
                    UpdatedOn               = ''
                    UpdatedBy               = ''
                    UpdatedByJson           = $null
                    #Json                  = [string]($tenantPolicySet.Json | ConvertTo-Json -Depth 99 -EnumsAsStrings)
                    Json                    = $tenantPolicySet.Json
                })
        }
    }

    if (-not $NoCsvExport) {
        $csvFilename = "$($filename)_PolicySetDefinitions"
        Write-Host "   Exporting PolicySetDefinitions CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
        $tenantPolicySetsDetailed | Select-Object -ExcludeProperty UniqueAssignments, PoliciesUsed, CreatedByJson, UpdatedByJson, Json | Sort-Object -Property Type, Scope, PolicySetDefinitionId | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
    }

    if ($getMgParentName -eq 'Tenant Root') {
        if ($tenantCustompolicySetsCount -gt $LimitPOLICYPolicySetDefinitionsScopedTenant * ($LimitCriticalPercentage / 100)) {
            $faimage = "<i class=`"padlx fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
        }
        else {
            $faimage = "<i class=`"padlx fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
        }

        if ($tenantCustompolicySetsCount -gt 0) {
            $tfCount = $tenantCustompolicySetsCount
            $htmlTableId = 'TenantSummary_customPolicySets'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPolicySets">$faimage <span class="valignMiddle">$tenantCustompolicySetsCount Custom PolicySet definitions ($scopeNamingSummary) (Limit: $tenantCustompolicySetsCount/$LimitPOLICYPolicySetDefinitionsScopedTenant)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>ScopeId</th>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Category</th>
<th>Unique assignments</th>
<th>Policies used in PolicySet</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYtenanttotalcustompolicySets = $null
            $htmlSUMMARYtenanttotalcustompolicySets = foreach ($customPolicySet in $customPolicySetsDetailed | Sort-Object @{Expression = { $_.Scope } }, @{Expression = { $_.PolicySetDisplayName } }, @{Expression = { $_.PolicySetDefinitionId } }) {
                @"
<tr>
<td>$($customPolicySet.Scope)</td>
<td>$($customPolicySet.ScopeId)</td>
<td>$($customPolicySet.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PolicySetDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PolicySetCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PoliciesUsed)</td>
<td>$($customPolicySet.CreatedOn)</td>
<td>$($customPolicySet.CreatedBy)</td>
<td>$($customPolicySet.UpdatedOn)</td>
<td>$($customPolicySet.UpdatedBy)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYtenanttotalcustompolicySets)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPolicySetsCount Custom PolicySet definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #SUMMARY NOT tenant total custom policySet definitions
    else {
        $faimage = "<i class=`"fa fa-check-circle`" aria-hidden=`"true`"></i>"
        if ($tenantCustompolicySetsCount -gt $LimitPOLICYPolicySetDefinitionsScopedTenant * ($LimitCriticalPercentage / 100)) {
            $faimage = "<i class=`"padlx fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
        }
        else {
            $faimage = "<i class=`"padlx fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
        }

        if ($tenantCustompolicySetsCount -gt 0) {
            $custompolicySetsFromSuperiorMGs = $tenantCustompolicySetsCount - (($custompolicySetsInScopeArray).count)
        }
        else {
            $custompolicySetsFromSuperiorMGs = '0'
        }

        if ($tenantCustompolicySetsCount -gt 0) {
            $tfCount = $tenantCustompolicySetsCount
            $htmlTableId = 'TenantSummary_customPolicySets'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customPolicySets">$faimage <span class="valignMiddle">$tenantCustomPolicySetsCount Custom PolicySet definitions $scopeNamingSummary ($custompolicySetsFromSuperiorMGs from superior scopes) (Limit: $tenantCustompolicySetsCount/$LimitPOLICYPolicySetDefinitionsScopedTenant)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Scope Id</th>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Category</th>
<th>Unique assignments</th>
<th>Policies used in PolicySet</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYtenanttotalcustompolicySets = $null
            $htmlSUMMARYtenanttotalcustompolicySets = foreach ($customPolicySet in $customPolicySetsDetailed | Sort-Object @{Expression = { $_.Scope } }, @{Expression = { $_.PolicySetDisplayName } }, @{Expression = { $_.PolicySetDefinitionId } }) {
                @"
<tr>
<td class="breakwordall">$($customPolicySet.Scope)</td>
<td class="breakwordall">$($customPolicySet.ScopeId)</td>
<td>$($customPolicySet.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PolicySetDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PolicySetCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicySet.PoliciesUsed)</td>
<td>$($customPolicySet.CreatedOn)</td>
<td>$($customPolicySet.CreatedBy)</td>
<td>$($customPolicySet.UpdatedOn)</td>
<td>$($customPolicySet.UpdatedBy)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYtenanttotalcustompolicySets)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomPolicySetsCount Custom PolicySet definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    $endCustPolSetLoop = Get-Date
    Write-Host "   Custom PolicySet processing duration: $((NEW-TIMESPAN -Start $startCustPolSetLoop -End $endCustPolSetLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCustPolSetLoop -End $endCustPolSetLoop).TotalSeconds) seconds)"
    #endregion SUMMARYtenanttotalcustompolicySets

    #region SUMMARYCustompolicySetOrphandedTenantRoot
    Write-Host '  processing TenantSummary Custom PolicySet definitions orphaned'
    if ($getMgParentName -eq 'Tenant Root') {
        $custompolicySetSetsOrphaned = [System.Collections.ArrayList]@()
        foreach ($custompolicySetAll in $tenantCustomPolicySets) {
            if (($policyPolicySetBaseQueryUniqueCustomDefinitions).count -eq 0) {
                $null = $custompolicySetSetsOrphaned.Add($custompolicySetAll)
            }
            else {
                if ($policyPolicySetBaseQueryUniqueCustomDefinitions -notcontains ($custompolicySetAll.Id)) {
                    $null = $custompolicySetSetsOrphaned.Add($custompolicySetAll)
                }
            }
        }

        $arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()
        foreach ($customPolicySetOrphaned in $custompolicySetSetsOrphaned) {
            if (($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values.properties.PolicyDefinitionId -notcontains $customPolicySetOrphaned.PolicyDefinitionId) {
                $null = $arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups.Add($customPolicySetOrphaned)
            }
        }

        if (($arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customPolicySetsOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_custompolicySetsOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups).count) Orphaned Custom PolicySet definitions ($scopeNamingSummary)</span> <abbr title="PolicySet has no assignments (including ResourceGroups)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYCustompolicySetOrphandedTenantRoot = $null
            $htmlSUMMARYCustompolicySetOrphandedTenantRoot = foreach ($custompolicySetOrphaned in $arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.PolicyDefinitionId } }, @{Expression = { $_.DisplayName } }) {
                @"
<tr>
<td>$($custompolicySetOrphaned.DisplayName)</td>
<td>$($custompolicySetOrphaned.PolicyDefinitionId)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYCustompolicySetOrphandedTenantRoot)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($arraycustompolicySetSetsOrphanedFinalIncludingResourceGroups).count) Orphaned Custom PolicySet definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #SUMMARY Custom policySetSets Orphanded NOT TenantRoot
    else {
        $arraycustompolicySetsOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()
        foreach ($custompolicySetAll in $tenantCustomPolicySets) {
            $isOrphaned = 'unknown'
            if (($policyPolicySetBaseQueryUniqueCustomDefinitions).count -eq 0) {
                $isOrphaned = 'potentially'
            }
            else {
                if ($policyPolicySetBaseQueryUniqueCustomDefinitions -notcontains $custompolicySetAll.Id) {
                    $isOrphaned = 'potentially'
                }
            }

            if ($isOrphaned -eq 'potentially') {
                $isInScope = 'unknown'
                if ($custompolicySetAll.PolicyDefinitionId -like '/providers/Microsoft.Management/managementGroups/*') {
                    $policySetScopedMgSub = $custompolicySetAll.PolicyDefinitionId -replace '/providers/Microsoft.Management/managementGroups/', '' -replace '/.*'
                    if ($mgsAndSubs.MgId -contains ($policySetScopedMgSub)) {
                        $isInScope = 'inScope'
                    }
                }
                elseif ($custompolicySetAll.PolicyDefinitionId -like '/subscriptions/*') {
                    $policySetScopedMgSub = $custompolicySetAll.PolicyDefinitionId -replace '/subscriptions/', '' -replace '/.*'
                    if ($mgsAndSubs.SubscriptionId -contains ($policySetScopedMgSub)) {
                        $isInScope = 'inScope'
                    }
                }
                else {
                    write-host 'unexpected'
                }

                if ($isInScope -eq 'inScope') {
                    if (($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values.properties.PolicyDefinitionId -notcontains $custompolicySetAll.PolicyDefinitionId) {
                        $null = $arraycustompolicySetsOrphanedFinalIncludingResourceGroups.Add($custompolicySetAll)
                    }
                }
            }
        }

        if (($arraycustompolicySetsOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arraycustompolicySetsOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customPolicySetsOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_custompolicySetsOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arraycustompolicySetsOrphanedFinalIncludingResourceGroups).count) Orphaned Custom PolicySet definitions ($scopeNamingSummary)</span> <abbr title="PolicySet has no assignments (including ResourceGroups) &#13;Note: PolicySets from superior scopes are not evaluated"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYCustompolicySetOrphandedTenantRoot = $null
            $htmlSUMMARYCustompolicySetOrphandedTenantRoot = foreach ($custompolicySetOrphaned in $arraycustompolicySetsOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.PolicyDefinitionId } }, @{Expression = { $_.DisplayName } }) {
                @"
<tr>
<td>$($custompolicySetOrphaned.DisplayName)</td>
<td>$($custompolicySetOrphaned.policyDefinitionId)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYCustompolicySetOrphandedTenantRoot)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($arraycustompolicySetsOrphanedFinalIncludingResourceGroups).count) Orphaned Custom PolicySet definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    #endregion SUMMARYCustompolicySetOrphandedTenantRoot

    $startcustpolsetdeprpol = Get-Date
    #region SUMMARYPolicySetsDeprecatedPolicy
    Write-Host '  processing TenantSummary Custom PolicySet definitions using deprected Policy'
    $policySetsDeprecated = [System.Collections.ArrayList]@()
    $customPolicySetsCount = ($tenantCustomPolicySets).count
    if ($customPolicySetsCount -gt 0) {
        foreach ($polSetDef in $tenantCustomPolicySets) {
            foreach ($polsetPolDefId in $polSetDef.PolicySetPolicyIds) {
                $hlpDeprecatedPolicySet = (($htCacheDefinitionsPolicy).($polsetPolDefId))
                if ($hlpDeprecatedPolicySet.Type -eq 'BuiltIn') {
                    if ($hlpDeprecatedPolicySet.Deprecated -eq $true -or ($hlpDeprecatedPolicySet.DisplayName).StartsWith('[Deprecated]', 'CurrentCultureIgnoreCase')) {
                        $null = $policySetsDeprecated.Add([PSCustomObject]@{
                                PolicySetDisplayName  = $polSetDef.DisplayName
                                PolicySetDefinitionId = $polSetDef.PolicyDefinitionId
                                PolicyDisplayName     = $hlpDeprecatedPolicySet.DisplayName
                                PolicyId              = $hlpDeprecatedPolicySet.Id
                                DeprecatedProperty    = $hlpDeprecatedPolicySet.Deprecated
                            })
                    }
                }
            }
        }
    }

    if (($policySetsDeprecated).count -gt 0) {
        $tfCount = ($policySetsDeprecated).count
        $htmlTableId = 'TenantSummary_policySetsDeprecated'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_policySetsDeprecated"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$(($policySetsDeprecated).count) Custom PolicySet definitions / deprecated Built-in Policy <abbr title="PolicyDisplayName startswith [Deprecated] &#13;OR &#13;Metadata property Deprecated=true"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Deprecated Property</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYPolicySetsDeprecatedPolicy = $null
        $htmlSUMMARYPolicySetsDeprecatedPolicy = foreach ($policySetDeprecated in $policySetsDeprecated | Sort-Object @{Expression = { $_.PolicySetDisplayName } }, @{Expression = { $_.PolicySetDefinitionId } }) {

            if ($policySetDeprecated.DeprecatedProperty -eq $true) {
                $deprecatedProperty = 'true'
            }
            else {
                $deprecatedProperty = 'false'
            }
            @"
<tr>
<td>$($policySetDeprecated.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policySetDeprecated.PolicySetDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policySetDeprecated.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policySetDeprecated.PolicyId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$deprecatedProperty</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYPolicySetsDeprecatedPolicy)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($policySetsDeprecated).count) PolicySets / deprecated Built-in Policy <abbr title="PolicyDisplayName startswith [Deprecated] &#13;OR &#13;Metadata property Deprecated=true"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span></p>
"@)
    }
    #endregion SUMMARYPolicySetsDeprecatedPolicy
    $endcustpolsetdeprpol = Get-Date
    Write-Host "   processing PolicySetsDeprecatedPolicy duration: $((NEW-TIMESPAN -Start $startcustpolsetdeprpol -End $endcustpolsetdeprpol).TotalSeconds) seconds"

    $startcustpolassdeprpol = Get-Date
    #region SUMMARYPolicyAssignmentsDeprecatedPolicy
    Write-Host '  processing TenantSummary PolicyAssignments using deprecated Policy'
    $policyAssignmentsDeprecated = [System.Collections.ArrayList]@()
    foreach ($policyAssignmentAll in ($htCacheAssignmentsPolicy).Values) {

        $hlpAssignmentDeprecatedPolicy = $policyAssignmentAll.Assignment
        $hlpPolicyDefinitionId = ($hlpAssignmentDeprecatedPolicy.properties.policyDefinitionId).ToLower()
        #policySet
        if ($($htCacheDefinitionsPolicySet).(($hlpPolicyDefinitionId))) {
            foreach ($polsetPolDefId in $($htCacheDefinitionsPolicySet).(($hlpPolicyDefinitionId)).PolicySetPolicyIds) {
                $hlpDeprecatedAssignment = (($htCacheDefinitionsPolicy).(($polsetPolDefId)))
                if ($hlpDeprecatedAssignment.type -eq 'BuiltIn') {
                    if ($hlpDeprecatedAssignment.Deprecated -eq $true) {
                        $null = $policyAssignmentsDeprecated.Add([PSCustomObject]@{
                                PolicyAssignmentDisplayName = $hlpAssignmentDeprecatedPolicy.properties.displayName
                                PolicyAssignmentId          = ($hlpAssignmentDeprecatedPolicy.id).Tolower()
                                PolicyDisplayName           = $hlpDeprecatedAssignment.DisplayName
                                PolicyId                    = $hlpDeprecatedAssignment.Id
                                PolicySetDisplayName        = ($htCacheDefinitionsPolicySet).(($hlpPolicyDefinitionId)).DisplayName
                                PolicySetId                 = ($htCacheDefinitionsPolicySet).(($hlpPolicyDefinitionId)).PolicyDefinitionId
                                PolicyType                  = 'PolicySet'
                                DeprecatedProperty          = $hlpDeprecatedAssignment.Deprecated
                            })
                    }
                }
            }
        }

        #Policy
        $hlpDeprecatedAssignmentPol = ($htCacheDefinitionsPolicy).(($hlpPolicyDefinitionId))
        if ($hlpDeprecatedAssignmentPol) {
            if ($hlpDeprecatedAssignmentPol.type -eq 'BuiltIn') {
                if ($hlpDeprecatedAssignmentPol.Deprecated -eq $true) {
                    $null = $policyAssignmentsDeprecated.Add([PSCustomObject]@{
                            PolicyAssignmentDisplayName = $hlpAssignmentDeprecatedPolicy.properties.displayName
                            PolicyAssignmentId          = ($hlpAssignmentDeprecatedPolicy.id).Tolower()
                            PolicyDisplayName           = $hlpDeprecatedAssignmentPol.DisplayName
                            PolicyId                    = $hlpDeprecatedAssignmentPol.Id
                            PolicyType                  = 'Policy'
                            DeprecatedProperty          = $hlpDeprecatedAssignmentPol.Deprecated
                            PolicySetDisplayName        = 'n/a'
                            PolicySetId                 = 'n/a'
                        })
                }
            }
        }
    }


    if (($policyAssignmentsDeprecated).count -gt 0) {
        $tfCount = ($policyAssignmentsDeprecated).count
        $htmlTableId = 'TenantSummary_policyAssignmentsDeprecated'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_policyAssignmentsDeprecated"><i class="padlx fa fa-exclamation-triangle orange" aria-hidden="true"></i> <span class="valignMiddle">$(($policyAssignmentsDeprecated).count) Policy assignments / deprecated Built-in Policy <abbr title="PolicyDisplayName startswith [Deprecated] &#13;OR &#13;Metadata property Deprecated=true"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Policy Assignment DisplayName</th>
<th>Policy AssignmentId</th>
<th>Policy/PolicySet</th>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Deprecated Property</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYPolicyAssignmentsDeprecatedPolicy = $null
        $htmlSUMMARYPolicyAssignmentsDeprecatedPolicy = foreach ($policyAssignmentDeprecated in $policyAssignmentsDeprecated | Sort-Object @{Expression = { $_.PolicyAssignmentDisplayName } }, @{Expression = { $_.PolicyAssignmentId } }) {
            @"
<tr>
<td>$($policyAssignmentDeprecated.PolicyAssignmentDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignmentDeprecated.PolicyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignmentDeprecated.PolicyType)</td>
<td>$($policyAssignmentDeprecated.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignmentDeprecated.PolicySetId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignmentDeprecated.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignmentDeprecated.PolicyId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignmentDeprecated.DeprecatedProperty)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYPolicyAssignmentsDeprecatedPolicy)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_2: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($policyAssignmentsDeprecated).count) Policy assignments / deprecated Built-in Policy <abbr title="PolicyDisplayName startswith [Deprecated] &#13;OR &#13;Metadata property Deprecated=true"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span></p>
"@)
    }
    #endregion SUMMARYPolicyAssignmentsDeprecatedPolicy
    $endcustpolassdeprpol = Get-Date
    Write-Host "   processing PolicyAssignmentsDeprecatedPolicy duration: $((NEW-TIMESPAN -Start $startcustpolassdeprpol -End $endcustpolassdeprpol).TotalSeconds) seconds"

    #region SUMMARYPolicyExemptions
    Write-Host '  processing TenantSummary Policy exemptions'
    $policyExemptionsCount = ($htPolicyAssignmentExemptions.Keys).Count

    if ($policyExemptionsCount -gt 0) {
        $tfCount = $policyExemptionsCount
        $htmlTableId = 'TenantSummary_policyExemptions'

        $expiredExemptionsCount = ($htPolicyAssignmentExemptions.Keys | where-object { $htPolicyAssignmentExemptions.($_).exemption.properties.expiresOn -and $htPolicyAssignmentExemptions.($_).exemption.properties.expiresOn -lt (Get-Date).ToUniversalTime() } | Measure-Object).count

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_policyExemptions"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($policyExemptionsCount) Policy exemptions | Expired: $($expiredExemptionsCount)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Management Group Id</th>
<th>Management Group Name</th>
<th>SubscriptionId</th>
<th>Subscription Name</th>
<th>ResourceGroup</th>
<th>ResourceName / ResourceType</th>
<th>Exemption name</th>
<th>Exemption description</th>
<th>Category</th>
<th>ExpiresOn (UTC)</th>
<th>Exemption Id</th>
<th>Policy AssignmentId</th>
<th>Policy Type</th>
<th>Policy</th>
<th>Exempted Set Policies</th>
<th>CreatedBy</th>
<th>CreatedAt</th>
<th>LastModifiedBy</th>
<th>LastModifiedAt</th>
</tr>
</thead>
<tbody>
"@)

        $htmlSUMMARYPolicyExemptions = $null
        $exemptionData4CSVExport = [System.Collections.ArrayList]@()
        $htmlSUMMARYPolicyExemptions = foreach ($policyExemption in $htPolicyAssignmentExemptions.Keys | Sort-Object) {
            $exemption = $htPolicyAssignmentExemptions.$policyExemption.exemption
            if ($exemption.properties.expiresOn) {
                $exemptionExpiresOnFormated = (($exemption.properties.expiresOn))
                if ($exemption.properties.expiresOn -gt (Get-Date).ToUniversalTime()) {
                    $exemptionExpiresOn = $exemptionExpiresOnFormated
                }
                else {
                    $exemptionExpiresOn = "expired $($exemptionExpiresOnFormated)"
                }
            }
            else {
                $exemptionExpiresOn = 'n/a'
            }

            $splitExemptionId = ($exemption.Id).Split('/')
            if (($exemption.Id) -like '/subscriptions/*') {

                switch (($splitExemptionId).Count - 1) {
                    #sub
                    6 {
                        $exemptionScope = 'Sub'
                        $subId = $splitExemptionId[2]
                        $subdetails = $htSubDetails.($subId).details
                        $mgId = $subdetails.MgId
                        $mgName = $subdetails.MgName
                        $subName = $subdetails.Subscription
                        $rgName = ''
                        $resName = ''
                    }

                    #rg
                    8 {
                        $exemptionScope = 'RG'
                        $subId = $splitExemptionId[2]
                        $subdetails = $htSubDetails.($subId).details
                        $mgId = $subdetails.MgId
                        $mgName = $subdetails.MgName
                        $subName = $subdetails.Subscription
                        $rgName = $splitExemptionId[4]
                        $resName = ''
                    }

                    #res
                    12 {
                        $exemptionScope = 'Res'
                        $subId = $splitExemptionId[2]
                        $subdetails = $htSubDetails.($subId).details
                        $mgId = $subdetails.MgId
                        $mgName = $subdetails.MgName
                        $subName = $subdetails.Subscription
                        $rgName = $splitExemptionId[4]
                        $resName = "$($splitExemptionId[8]) / $($splitExemptionId[6..7] -join '/')"
                    }
                }
            }
            else {
                $exemptionScope = 'MG'
                $mgId = $splitExemptionId[4]
                $mgdetails = $htMgDetails.($mgId).details
                $mgName = $mgdetails.MgName
                $subId = ''
                $subName = ''
                $rgName = ''
                $resName = ''
            }

            $policyType = 'unknown'
            $policy = 'unknown'
            $arrayExemptedPolicies = @()
            $arrayExemptedPoliciesCSV = @()
            $policiesExempted = $null
            $policiesExemptedCSV = $null
            $policiesExemptedCSVCount = $null
            $policiesTotalCount = $null
            if ($htCacheAssignmentsPolicy.(($exemption.properties.policyAssignmentId).tolower()).Assignment.properties.policyDefinitionId) {
                $policyDefinitionId = $htCacheAssignmentsPolicy.(($exemption.properties.policyAssignmentId).tolower()).Assignment.properties.policyDefinitionId
                
                if ($policyDefinitionId -like "*/providers/Microsoft.Authorization/policyDefinitions/*") {
                    $policyType = 'Policy'
                    if ($htCacheDefinitionsPolicy.($policyDefinitionId.tolower())) {
                        $policyDetail = $htCacheDefinitionsPolicy.($policyDefinitionId.tolower())
                        if ($policyDetail.Type -eq 'BuiltIn') {
                            $policy = $policyDetail.LinkToAzAdvertizer
                        }
                        else {
                            $policy = "$($policyDetail.DisplayName) ($($policyDetail.Id))"
                        }
                        $policiesExempted = $null
                        $policyClear = "$($policyDetail.DisplayName) ($($policyDetail.Id))"
                    }
                }

                if ($policyDefinitionId -like "*/providers/Microsoft.Authorization/policySetDefinitions/*") {
                    $policyType = 'PolicySet'
                    if ($htCacheDefinitionsPolicySet.($policyDefinitionId.tolower())) {
                        $policyDetail = $htCacheDefinitionsPolicySet.($policyDefinitionId.tolower())
                        if ($policyDetail.Type -eq 'BuiltIn') {
                            $policy = $policyDetail.LinkToAzAdvertizer
                        }
                        else {
                            $policy = "$($policyDetail.DisplayName) ($($policyDetail.Id))"
                        }
                        $policiesTotalCount = $htCacheDefinitionsPolicySet.($policyDefinitionId.tolower()).PolicySetPolicyRefIds.Count
                        if ($exemption.properties.policyDefinitionReferenceIds.Count -gt 0) {
                            foreach ($exemptedRefId in $exemption.properties.policyDefinitionReferenceIds) {
                                $policyExempted = 'unknown'
                                $policyExemptedCSV = 'unknown'
                                if ($htCacheDefinitionsPolicySet.($policyDefinitionId.tolower()).PolicySetPolicyRefIds.($exemptedRefId)) {
                                    $exemptedPolicyId = $htCacheDefinitionsPolicySet.($policyDefinitionId.tolower()).PolicySetPolicyRefIds.($exemptedRefId)
                                    if ($htCacheDefinitionsPolicy.($exemptedPolicyId.tolower())) {
                                        $policyExemptedDetail = $htCacheDefinitionsPolicy.($exemptedPolicyId.tolower())
                                        if ($policyExemptedDetail.Type -eq 'BuiltIn') {
                                            $policyExempted = $policyExemptedDetail.LinkToAzAdvertizer
                                        }
                                        else {
                                            $policyExempted = "$($policyExemptedDetail.DisplayName) ($($policyExemptedDetail.Id))"
                                        }
                                        $policyExemptedCSV = "$($policyExemptedDetail.DisplayName) ($($policyExemptedDetail.Id))"
                                        
                                    }
                                }
                                $arrayExemptedPolicies += $policyExempted
                                $arrayExemptedPoliciesCSV += $policyExemptedCSV
                            }
                            
                            $policiesExempted = "$($arrayExemptedPolicies.Count)/$($policiesTotalCount) (<br>$(($arrayExemptedPolicies | Sort-Object) -join "<br>"))"
                            $policiesExemptedCSV = ($arrayExemptedPoliciesCSV | Sort-Object) -join "$CsvDelimiterOpposite "
                            $policiesExemptedCSVCount = $arrayExemptedPoliciesCSV.Count
                        }
                        else {
                            $policiesExempted = "all $policiesTotalCount"
                            $policiesExemptedCSV = "all $policiesTotalCount"
                            $policiesExemptedCSVCount = $policiesTotalCount
                        }
                        
                        $policyClear = "$($policyDetail.DisplayName) ($($policyDetail.Id))"
                    }
                }

            }

            if (-not $NoCsvExport) {
                $null = $exemptionData4CSVExport.Add([PSCustomObject]@{
                        Scope                     = $exemptionScope
                        ManagementGroupId         = $mgId
                        ManagementGroupName       = $mgName
                        SubscriptionId            = $subId
                        SubscriptionName          = $subName
                        ResourceGroup             = $rgName
                        ResourceName_ResourceType = $resName
                        ExemptionName             = $exemption.properties.DisplayName
                        ExemptionDescription      = $exemption.properties.Description
                        Category                  = $exemption.properties.exemptionCategory
                        ExpiresOn_UTC             = $exemptionExpiresOn
                        ExemptionId               = $exemption.Id
                        PolicyAssignmentId        = $exemption.properties.policyAssignmentId
                        PolicyType                = $policyType
                        Policy                    = $policyClear
                        PoliciesTotalCount        = $policiesTotalCount            
                        PoliciesExemptedCount     = $policiesExemptedCSVCount
                        PoliciesExempted          = $policiesExemptedCSV
                        CreatedBy                 = "$($exemption.systemData.createdBy) ($($exemption.systemData.createdByType))"
                        CreatedAt                 = $exemption.systemData.createdAt.ToString('yyyy-MM-dd HH:mm:ss')
                        LastModifiedBy            = "$($exemption.systemData.lastModifiedBy) ($($exemption.systemData.lastModifiedByType))"
                        LastModifiedAt            = $exemption.systemData.lastModifiedAt.ToString('yyyy-MM-dd HH:mm:ss')
                    })
            }

            @"
<tr>
<td>$($exemptionScope)</td>
<td>$($mgId)</td>
<td>$($mgName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($subId)</td>
<td>$($subName)</td>
<td>$($rgName)</td>
<td>$($resName)</td>
<td>$($exemption.properties.DisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($exemption.properties.Description -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($exemption.properties.exemptionCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($exemptionExpiresOn)</td>
<td class="breakwordall">$($exemption.Id)</td>
<td class="breakwordall">$($exemption.properties.policyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyType)</td>
<td class="breakwordall">$($policy)</td>
<td class="breakwordall">$($policiesExempted)</td>
<td>$($exemption.systemData.createdBy) ($($exemption.systemData.createdByType))</td>
<td>$($exemption.systemData.createdAt.ToString('yyyy-MM-dd HH:mm:ss'))</td>
<td>$($exemption.systemData.lastModifiedBy) ($($exemption.systemData.lastModifiedByType))</td>
<td>$($exemption.systemData.lastModifiedAt.ToString('yyyy-MM-dd HH:mm:ss'))</td>
</tr>
"@
        }

        if (-not $NoCsvExport) {
            Write-Host "Exporting PolicyExemptions CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_PolicyExemptions.csv'"
            $exemptionData4CSVExport | Sort-Object -Property PolicyAssignmentId, Id | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_PolicyExemptions.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
        }

        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYPolicyExemptions)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            col_9: 'select',
            col_13: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($policyExemptionsCount) Policy exemptions</span></p>
"@)
    }
    #endregion SUMMARYPolicyExemptions

    #region SUMMARYPolicyAssignmentsOrphaned
    Write-Host '  processing TenantSummary PolicyAssignments orphaned'

    if ($policyAssignmentsOrphanedCount -gt 0) {
        $tfCount = $policyAssignmentsOrphanedCount
        $htmlTableId = 'TenantSummary_policyAssignmentsOrphaned'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_policyAssignmentsOrphaned"><i class="padlx fa fa-exclamation-triangle orange" aria-hidden="true"></i> <span class="valignMiddle">$($policyAssignmentsOrphanedCount) Policy assignments orphaned <abbr title="Policy definition not available &#13;(likely a Management Group scoped Policy definition / Management Group deleted)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Policy AssignmentId</th>
<th>Policy/Set definition</th>
</tr>
</thead>
<tbody>
"@)

        $htmlSUMMARYPolicyassignmentsOrphaned = $null
        $htmlSUMMARYPolicyassignmentsOrphaned = foreach ($orphanedPolicyAssignment in $policyAssignmentsOrphaned | Sort-Object -Property PolicyAssignmentId) {
            @"
<tr>
<td>$($orphanedPolicyAssignment.policyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($orphanedPolicyAssignment.PolicyDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYPolicyassignmentsOrphaned)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($policyAssignmentsOrphanedCount) Policy assignments orphaned <abbr title="Policy definition not available &#13;(likely a Management Group scoped Policy definition / Management Group deleted)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span></p>
"@)
    }
    #endregion SUMMARYPolicyAssignmentsOrphaned

    #region SUMMARYPolicyAssignmentsAll
    $startSummaryPolicyAssignmentsAll = Get-Date
    $allPolicyAssignments = ($policyBaseQuery).count
    Write-Host "  processing TenantSummary PolicyAssignments (all $allPolicyAssignments)"

    $script:arrayPolicyAssignmentsEnriched = [System.Collections.ArrayList]@()
    $cnter = 0

    #region PolicyAssignmentsRoleAssignmentMapping
    $startPolicyAssignmentsRoleAssignmentMapping = Get-Date
    Write-Host '   processing PolicyAssignmentsRoleAssignmentMapping'
    $script:htPolicyAssignmentRoleAssignmentMapping = @{}
    foreach ($roleassignmentId in ($htCacheAssignmentsRole).keys | Sort-Object) {
        $roleAssignment = ($htCacheAssignmentsRole).($roleassignmentId).Assignment

        if ($htManagedIdentityForPolicyAssignment.($roleAssignment.ObjectId)) {
            $mi = $htManagedIdentityForPolicyAssignment.($roleAssignment.ObjectId)

            #this
            if (-not $htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower())) {
                $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()) = @{}
            }

            if (($htCacheDefinitionsRole).($roleAssignment.RoleDefinitionId).IsCustom) {
                $roleDefinitionType = 'custom'
            }
            else {
                $roleDefinitionType = 'builtin'
            }

            $array = [System.Collections.ArrayList]@()
            $null = $array.Add([PSCustomObject]@{
                    roleassignmentId   = $roleassignmentId
                    roleDefinitionId   = $roleAssignment.RoleDefinitionId
                    roleDefinitionName = $roleAssignment.RoleDefinitionName
                    roleDefinitionType = $roleDefinitionType
                })

            #this
            if ($htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments) {
                $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments += $array
            }
            else {
                $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments = $array
            }
        }
    }

    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
        foreach ($roleassignmentId in ($htCacheAssignmentsRBACOnResourceGroupsAndResources).keys | Sort-Object) {
            $roleAssignment = ($htCacheAssignmentsRBACOnResourceGroupsAndResources).($roleassignmentId)

            if ($htManagedIdentityForPolicyAssignment.($roleAssignment.ObjectId)) {
                $mi = $htManagedIdentityForPolicyAssignment.($roleAssignment.ObjectId)

                #this
                if (-not $htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower())) {
                    $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()) = @{}
                }

                if (($htCacheDefinitionsRole).($roleAssignment.RoleDefinitionId).IsCustom) {
                    $roleDefinitionType = 'custom'
                }
                else {
                    $roleDefinitionType = 'builtin'
                }

                $array = [System.Collections.ArrayList]@()
                $null = $array.Add([PSCustomObject]@{
                        roleassignmentId   = $roleassignmentId
                        roleDefinitionId   = $roleAssignment.RoleDefinitionId
                        roleDefinitionName = $roleAssignment.RoleDefinitionName
                        roleDefinitionType = $roleDefinitionType
                    })

                #this
                if ($htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments) {
                    $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments += $array
                }
                else {
                    $script:htPolicyAssignmentRoleAssignmentMapping.(($mi.policyAssignmentId).ToLower()).roleassignments = $array
                }
            }
        }
    }
    $htPolicyAssignmentRoleAssignmentMappingCount = ($htPolicyAssignmentRoleAssignmentMapping.keys).Count
    $endPolicyAssignmentsRoleAssignmentMapping = Get-Date
    Write-Host "   PolicyAssignmentsRoleAssignmentMapping processing duration: $((NEW-TIMESPAN -Start $startPolicyAssignmentsRoleAssignmentMapping -End $endPolicyAssignmentsRoleAssignmentMapping).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPolicyAssignmentsRoleAssignmentMapping -End $endPolicyAssignmentsRoleAssignmentMapping).TotalSeconds) seconds)"
    #endregion PolicyAssignmentsRoleAssignmentMapping

    #region PolicyAssignmentsUniqueRelations
    $startPolicyAssignmnetsUniqueRelations = Get-Date
    Write-Host '   processing PolicyAssignmnetsUniqueRelations'
    $htPolicyAssignmentRelatedRoleAssignments = @{}
    $htPolicyAssignmentRelatedExemptions = @{}

    foreach ($policyAssignmentIdUnique in $policyBaseQueryUniqueAssignments) {

        #region relatedRoleAssignments
        $relatedRoleAssignmentsArray = @()
        $relatedRoleAssignmentsArrayClear = @()
        if ($htPolicyAssignmentRoleAssignmentMappingCount -gt 0) {
            if ($htPolicyAssignmentRoleAssignmentMapping.($policyAssignmentIdUnique.PolicyAssignmentId)) {
                foreach ($entry in $htPolicyAssignmentRoleAssignmentMapping.($policyAssignmentIdUnique.PolicyAssignmentId).roleassignments) {
                    if ($entry.roleDefinitionType -eq 'builtin') {
                        $relatedRoleAssignmentsArray += "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azrolesadvertizer/$($entry.roleDefinitionId).html`" target=`"_blank`" rel=`"noopener`">$($entry.roleDefinitionName)</a> ($($entry.roleAssignmentId))"
                    }
                    else {
                        $relatedRoleAssignmentsArray += "<b>$($entry.roleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</b> ($($entry.roleAssignmentId))"
                    }
                    $relatedRoleAssignmentsArrayClear += "$($entry.roleDefinitionName) ($($entry.roleAssignmentId))"
                }
            }
        }

        $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentIdUnique.PolicyAssignmentId) = @{}
        if (($relatedRoleAssignmentsArray).count -gt 0) {
            $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentIdUnique.PolicyAssignmentId).relatedRoleAssignments = ($relatedRoleAssignmentsArray | Sort-Object) -join "$CsvDelimiterOpposite "
            $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentIdUnique.PolicyAssignmentId).relatedRoleAssignmentsClear = ($relatedRoleAssignmentsArrayClear | Sort-Object) -join "$CsvDelimiterOpposite "
        }
        else {
            $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentIdUnique.PolicyAssignmentId).relatedRoleAssignments = 'none'
            $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentIdUnique.PolicyAssignmentId).relatedRoleAssignmentsClear = 'none'
        }
        #endregion relatedRoleAssignments

        #region exemptions
        $arrayExemptions = @()
        foreach ($exemptionId in $htPolicyAssignmentExemptions.keys) {
            if ($htPolicyAssignmentExemptions.($exemptionId).exemption.properties.policyAssignmentId -eq $policyAssignmentIdUnique.PolicyAssignmentId) {
                $arrayExemptions += $htPolicyAssignmentExemptions.($exemptionId).exemption
                if (-not $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId)) {
                    $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId) = @{}
                    $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId).exemptionsCount = 1
                    $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId).exemptions = $arrayExemptions
                }
                else {
                    $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId).exemptionsCount += 1
                    $htPolicyAssignmentRelatedExemptions.($policyAssignmentIdUnique.PolicyAssignmentId).exemptions = $arrayExemptions
                }
            }
        }
        #endregion exemptions
    }
    $endPolicyAssignmnetsUniqueRelations = Get-Date
    Write-Host "   PolicyAssignmnetsUniqueRelations processing duration: $((NEW-TIMESPAN -Start $startPolicyAssignmnetsUniqueRelations -End $endPolicyAssignmnetsUniqueRelations).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPolicyAssignmnetsUniqueRelations -End $endPolicyAssignmnetsUniqueRelations).TotalSeconds) seconds)"
    #endregion PolicyAssignmentsUniqueRelations

    #region PolicyAssignmentsAllCreateEnriched
    $startPolicyAssignmentsAllCreateEnriched = Get-Date
    Write-Host '   processing PolicyAssignmentsAllCreateEnriched'
    foreach ($policyAssignmentAll in $policyBaseQuery) {

        $cnter++
        if ($cnter % 1000 -eq 0) {
            $etappeSummaryPolicyAssignmentsAll = Get-Date
            Write-Host "    $cnter of $allPolicyAssignments PolicyAssignments processed: $((NEW-TIMESPAN -Start $startSummaryPolicyAssignmentsAll -End $etappeSummaryPolicyAssignmentsAll).TotalSeconds) seconds"
            #if ($cnter % 5000 -eq 0) {
            #[System.GC]::Collect()
            #}
        }

        #region AzAdvertizerLinkOrNot
        if ($policyAssignmentAll.PolicyType -eq 'builtin') {
            if ($policyAssignmentAll.PolicyVariant -eq 'Policy') {
                $azaLinkOrNot = "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azpolicyadvertizer/$(($policyAssignmentAll.PolicyDefinitionIdGuid)).html`" target=`"_blank`" rel=`"noopener`">$($policyAssignmentAll.Policy)</a>"
            }
            else {
                $azaLinkOrNot = "<a class=`"externallink`" href=`"https://www.azadvertizer.net/azpolicyinitiativesadvertizer/$(($policyAssignmentAll.PolicyDefinitionIdGuid)).html`" target=`"_blank`" rel=`"noopener`">$($policyAssignmentAll.Policy)</a>"
            }
        }
        else {
            $azaLinkOrNot = $policyAssignmentAll.Policy
        }
        #endregion AzAdvertizerLinkOrNot

        #region excludedScope
        $excludedScope = 'false'
        if (($policyAssignmentAll.PolicyAssignmentNotScopes).count -gt 0) {
            foreach ($policyAssignmentNotScope in $policyAssignmentAll.PolicyAssignmentNotScopes) {
                if (-not [String]::IsNullOrEmpty($policyAssignmentAll.subscriptionId)) {
                    if ($htSubscriptionsMgPath.($policyAssignmentAll.subscriptionId).path -contains ($($policyAssignmentNotScope -replace '/subscriptions/' -replace '/providers/Microsoft.Management/managementGroups/'))) {
                        $excludedScope = 'true'
                    }
                }
                else {
                    if ($htManagementGroupsMgPath.($policyAssignmentAll.MgId).path -contains ($($policyAssignmentNotScope -replace '/providers/Microsoft.Management/managementGroups/'))) {
                        $excludedScope = 'true'
                    }
                }
            }
        }
        #endregion excludedScope

        #region exemptions
        $exemptionScope = 'false'
        if ($htPolicyAssignmentRelatedExemptions.($policyAssignmentAll.PolicyAssignmentId)) {
            foreach ($exemption in $htPolicyAssignmentRelatedExemptions.($policyAssignmentAll.PolicyAssignmentId).exemptions) {
                if ($exemption.properties.expiresOn) {
                    if ($exemption.properties.expiresOn -gt (Get-Date).ToUniversalTime()) {
                        if (-not [String]::IsNullOrEmpty($policyAssignmentAll.subscriptionId)) {
                            if ($htSubscriptionsMgPath.($policyAssignmentAll.subscriptionId).path -contains ($(($exemption.Id -split '/providers/Microsoft.Authorization/policyExemptions/')[0] -replace '/subscriptions/' -replace '/providers/Microsoft.Management/managementGroups/'))) {
                                $exemptionScope = 'true'
                            }
                        }
                        else {
                            if ($htManagementGroupsMgPath.($policyAssignmentAll.MgId).path -contains ($(($exemption.Id -split '/providers/Microsoft.Authorization/policyExemptions/')[0] -replace '/subscriptions/' -replace '/providers/Microsoft.Management/managementGroups/'))) {
                                $exemptionScope = 'true'
                            }
                        }
                    }
                    else {
                        #Write-Host "$($exemption.Id) $($exemption.properties.expiresOn) $((Get-Date).ToUniversalTime()) expired"
                    }
                }
                else {
                    #same code as above / function?
                    if (-not [String]::IsNullOrEmpty($policyAssignmentAll.subscriptionId)) {
                        if ($htSubscriptionsMgPath.($policyAssignmentAll.subscriptionId).path -contains ($(($exemption.Id -split '/providers/Microsoft.Authorization/policyExemptions/')[0] -replace '/subscriptions/' -replace '/providers/Microsoft.Management/managementGroups/'))) {
                            $exemptionScope = 'true'
                        }
                    }
                    else {
                        if ($htManagementGroupsMgPath.($policyAssignmentAll.MgId).path -contains ($(($exemption.Id -split '/providers/Microsoft.Authorization/policyExemptions/')[0] -replace '/subscriptions/' -replace '/providers/Microsoft.Management/managementGroups/'))) {
                            $exemptionScope = 'true'
                        }
                    }
                }
            }
        }
        #endregion exemptions

        #region inheritance
        if ($policyAssignmentAll.PolicyAssignmentId -like '/providers/Microsoft.Management/managementGroups/*') {
            if (-not [String]::IsNullOrEmpty($policyAssignmentAll.SubscriptionId)) {
                $scope = "inherited $($policyAssignmentAll.PolicyAssignmentScope -replace '.*/')"
            }
            else {
                if (($policyAssignmentAll.PolicyAssignmentScope -replace '.*/') -eq $policyAssignmentAll.MgId) {
                    $scope = 'thisScope Mg'
                }
                else {
                    $scope = "inherited $($policyAssignmentAll.PolicyAssignmentScope -replace '.*/')"
                }
            }
        }

        if ($policyAssignmentAll.PolicyAssignmentId -like '/subscriptions/*' -and $policyAssignmentAll.PolicyAssignmentId -notlike '/subscriptions/*/resourcegroups/*') {
            $scope = 'thisScope Sub'
        }

        if ($policyAssignmentAll.PolicyAssignmentId -like '/subscriptions/*/resourcegroups/*') {
            $scope = 'thisScope Sub RG'
        }
        #endregion inheritance

        #region effect
        $effect = 'unknown'
        if ($policyAssignmentAll.PolicyVariant -eq 'Policy') {

            $test0 = $policyAssignmentAll.PolicyAssignmentParameters.effect.value
            if ($test0) {
                $effect = $test0
            }
            else {
                $test1 = $policyAssignmentAll.PolicyDefinitionEffectDefault
                if ($test1 -ne 'n/a') {
                    $effect = $test1
                }
                $test2 = $policyAssignmentAll.PolicyDefinitionEffectFixed
                if ($test2 -ne 'n/a') {
                    $effect = $test2
                }
            }
        }
        else {
            $effect = 'n/a'
        }
        #endregion effect

        #region mgOrSubOrRG
        if ([String]::IsNullOrEmpty($policyAssignmentAll.SubscriptionId)) {
            $mgOrSubOrRG = 'Mg'
        }
        else {
            if ($scope -like '*RG') {
                $mgOrSubOrRG = 'RG'
            }
            else {
                $mgOrSubOrRG = 'Sub'
            }
        }
        #endregion mgOrSubOrRG

        #region category
        if ([string]::IsNullOrEmpty($policyAssignmentAll.PolicyCategory)) {
            $policyCategory = 'n/a'
        }
        else {
            $policyCategory = $policyAssignmentAll.PolicyCategory
        }
        #endregion category

        #region createdByUpdatedBy
        #createdBy
        if ($policyAssignmentAll.PolicyAssignmentCreatedBy) {
            $createdBy = $policyAssignmentAll.PolicyAssignmentCreatedBy
            if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
                $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details
            }
        }
        else {
            $createdBy = ''
        }

        #UpdatedBy
        if ($policyAssignmentAll.PolicyAssignmentUpdatedBy) {
            $updatedBy = $policyAssignmentAll.PolicyAssignmentUpdatedBy
            if ($htIdentitiesWithRoleAssignmentsUnique.($updatedBy)) {
                $updatedBy = $htIdentitiesWithRoleAssignmentsUnique.($updatedBy).details
            }
        }
        else {
            $updatedBy = ''
        }
        #endregion createdByUpdatedBy

        #region policyAssignmentNotScopes
        if ($policyAssignmentAll.PolicyAssignmentNotScopes) {
            $policyAssignmentNotScopes = $policyAssignmentAll.PolicyAssignmentNotScopes -join $CsvDelimiterOpposite
        }
        else {
            $policyAssignmentNotScopes = 'n/a'
        }
        #endregion policyAssignmentNotScopes

        #region
        $policyAssignmentMI = ''
        if ($htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentAll.PolicyAssignmentId)) {
            $hlp = $htPolicyAssignmentRelatedRoleAssignments.($policyAssignmentAll.PolicyAssignmentId)
            $relatedRoleAssignments = $hlp.relatedRoleAssignments
            $relatedRoleAssignmentsClear = $hlp.relatedRoleAssignmentsClear
            if ($htManagedIdentityDisplayName.("$($policyAssignmentAll.PolicyAssignmentId -replace '.*/')_$($policyAssignmentAll.PolicyAssignmentId)")) {
                $hlp = $htManagedIdentityDisplayName.("$($policyAssignmentAll.PolicyAssignmentId -replace '.*/')_$($policyAssignmentAll.PolicyAssignmentId)")
                $policyAssignmentMI = "$($hlp.displayname) (SPObjId: $($hlp.id))"
            }
        }
        #endregion

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            #region policyCompliance
            $policyAssignmentIdToLower = ($policyAssignmentAll.policyAssignmentId).ToLower()

            #mg
            if ([String]::IsNullOrEmpty($policyAssignmentAll.subscriptionId)) {
                if (($htCachePolicyComplianceResponseTooLargeMG).($policyAssignmentAll.MgId)) {
                    $NonCompliantPolicies = 'skipped'
                    $CompliantPolicies = 'skipped'
                    $NonCompliantResources = 'skipped'
                    $CompliantResources = 'skipped'
                    $ConflictingResources = 'skipped'
                }
                else {
                    $compliance = ($htCachePolicyComplianceMG).($policyAssignmentAll.MgId).($policyAssignmentIdToLower)
                    $NonCompliantPolicies = $compliance.NonCompliantPolicies
                    $CompliantPolicies = $compliance.CompliantPolicies
                    $NonCompliantResources = $compliance.NonCompliantResources
                    $CompliantResources = $compliance.CompliantResources
                    $ConflictingResources = $compliance.ConflictingResources

                    if (!$NonCompliantPolicies) {
                        $NonCompliantPolicies = 0
                    }
                    if (!$CompliantPolicies) {
                        $CompliantPolicies = 0
                    }
                    if (!$NonCompliantResources) {
                        $NonCompliantResources = 0
                    }
                    if (!$CompliantResources) {
                        $CompliantResources = 0
                    }
                    if (!$ConflictingResources) {
                        $ConflictingResources = 0
                    }
                }
            }

            #sub/rg
            if (-not [String]::IsNullOrEmpty($policyAssignmentAll.subscriptionId)) {
                if (($htCachePolicyComplianceResponseTooLargeSUB).($policyAssignmentAll.SubscriptionId)) {
                    $NonCompliantPolicies = 'skipped'
                    $CompliantPolicies = 'skipped'
                    $NonCompliantResources = 'skipped'
                    $CompliantResources = 'skipped'
                    $ConflictingResources = 'skipped'
                }
                else {
                    $compliance = ($htCachePolicyComplianceSUB).($policyAssignmentAll.SubscriptionId).($policyAssignmentIdToLower)
                    $NonCompliantPolicies = $compliance.NonCompliantPolicies
                    $CompliantPolicies = $compliance.CompliantPolicies
                    $NonCompliantResources = $compliance.NonCompliantResources
                    $CompliantResources = $compliance.CompliantResources
                    $ConflictingResources = $compliance.ConflictingResources

                    if (!$NonCompliantPolicies) {
                        $NonCompliantPolicies = 0
                    }
                    if (!$CompliantPolicies) {
                        $CompliantPolicies = 0
                    }
                    if (!$NonCompliantResources) {
                        $NonCompliantResources = 0
                    }
                    if (!$CompliantResources) {
                        $CompliantResources = 0
                    }
                    if (!$ConflictingResources) {
                        $ConflictingResources = 0
                    }
                }
            }
            #endregion policyCompliance

            $null = $script:arrayPolicyAssignmentsEnriched.Add([PSCustomObject]@{
                    Level                                 = $policyAssignmentAll.Level
                    MgId                                  = $policyAssignmentAll.MgId
                    MgName                                = $policyAssignmentAll.MgName
                    MgParentId                            = $policyAssignmentAll.MgParentId
                    MgParentName                          = $policyAssignmentAll.MgParentName
                    subscriptionId                        = $policyAssignmentAll.SubscriptionId
                    subscriptionName                      = $policyAssignmentAll.Subscription
                    PolicyAssignmentId                    = (($policyAssignmentAll.PolicyAssignmentId).ToLower())
                    PolicyAssignmentScopeName             = $policyAssignmentAll.PolicyAssignmentScopeName
                    PolicyAssignmentDisplayName           = $policyAssignmentAll.PolicyAssignmentDisplayName
                    PolicyAssignmentDescription           = $policyAssignmentAll.PolicyAssignmentDescription
                    PolicyAssignmentEnforcementMode       = $policyAssignmentAll.PolicyAssignmentEnforcementMode
                    PolicyAssignmentNonComplianceMessages = $policyAssignmentAll.PolicyAssignmentNonComplianceMessages
                    PolicyAssignmentNotScopes             = $policyAssignmentNotScopes
                    PolicyAssignmentParameters            = $policyAssignmentAll.PolicyAssignmentParametersFormated
                    PolicyAssignmentMI                    = $policyAssignmentMI
                    AssignedBy                            = $policyAssignmentAll.PolicyAssignmentAssignedBy
                    CreatedOn                             = $policyAssignmentAll.PolicyAssignmentCreatedOn
                    CreatedBy                             = $createdBy
                    UpdatedOn                             = $policyAssignmentAll.PolicyAssignmentUpdatedOn
                    UpdatedBy                             = $updatedBy
                    Effect                                = $effect
                    PolicyName                            = $azaLinkOrNot
                    PolicyNameClear                       = $policyAssignmentAll.Policy
                    PolicyAvailability                    = $policyAssignmentAll.PolicyAvailability
                    PolicyDescription                     = $policyAssignmentAll.PolicyDescription
                    PolicyId                              = $policyAssignmentAll.PolicyDefinitionId
                    PolicyVariant                         = $policyAssignmentAll.PolicyVariant
                    PolicyType                            = $policyAssignmentAll.PolicyType
                    PolicyCategory                        = $policyCategory
                    Inheritance                           = $scope
                    ExcludedScope                         = $excludedScope
                    RelatedRoleAssignments                = $relatedRoleAssignments
                    RelatedRoleAssignmentsClear           = $relatedRoleAssignmentsClear
                    mgOrSubOrRG                           = $mgOrSubOrRG
                    NonCompliantPolicies                  = $NonCompliantPolicies
                    CompliantPolicies                     = $CompliantPolicies
                    NonCompliantResources                 = $NonCompliantResources
                    CompliantResources                    = $CompliantResources
                    ConflictingResources                  = $ConflictingResources
                    ExemptionScope                        = $exemptionScope
                })
        }
        else {
            $null = $script:arrayPolicyAssignmentsEnriched.Add([PSCustomObject]@{
                    Level                                 = $policyAssignmentAll.Level
                    MgId                                  = $policyAssignmentAll.MgId
                    MgName                                = $policyAssignmentAll.MgName
                    MgParentId                            = $policyAssignmentAll.MgParentId
                    MgParentName                          = $policyAssignmentAll.MgParentName
                    subscriptionId                        = $policyAssignmentAll.SubscriptionId
                    subscriptionName                      = $policyAssignmentAll.Subscription
                    PolicyAssignmentId                    = (($policyAssignmentAll.PolicyAssignmentId).ToLower())
                    PolicyAssignmentScopeName             = $policyAssignmentAll.PolicyAssignmentScopeName
                    PolicyAssignmentDisplayName           = $policyAssignmentAll.PolicyAssignmentDisplayName
                    PolicyAssignmentDescription           = $policyAssignmentAll.PolicyAssignmentDescription
                    PolicyAssignmentEnforcementMode       = $policyAssignmentAll.PolicyAssignmentEnforcementMode
                    PolicyAssignmentNonComplianceMessages = $policyAssignmentAll.PolicyAssignmentNonComplianceMessages
                    PolicyAssignmentNotScopes             = $policyAssignmentNotScopes
                    PolicyAssignmentParameters            = $policyAssignmentAll.PolicyAssignmentParametersFormated
                    PolicyAssignmentMI                    = $policyAssignmentMI
                    AssignedBy                            = $policyAssignmentAll.PolicyAssignmentAssignedBy
                    CreatedOn                             = $policyAssignmentAll.PolicyAssignmentCreatedOn
                    CreatedBy                             = $createdBy
                    UpdatedOn                             = $policyAssignmentAll.PolicyAssignmentUpdatedOn
                    UpdatedBy                             = $updatedBy
                    Effect                                = $effect
                    PolicyName                            = $azaLinkOrNot
                    PolicyNameClear                       = $policyAssignmentAll.Policy
                    PolicyAvailability                    = $policyAssignmentAll.PolicyAvailability
                    PolicyDescription                     = $policyAssignmentAll.PolicyDescription
                    PolicyId                              = $policyAssignmentAll.PolicyDefinitionId
                    PolicyVariant                         = $policyAssignmentAll.PolicyVariant
                    PolicyType                            = $policyAssignmentAll.PolicyType
                    PolicyCategory                        = $policyCategory
                    Inheritance                           = $scope
                    ExcludedScope                         = $excludedScope
                    RelatedRoleAssignments                = $relatedRoleAssignments
                    RelatedRoleAssignmentsClear           = $relatedRoleAssignmentsClear
                    mgOrSubOrRG                           = $mgOrSubOrRG
                    ExemptionScope                        = $exemptionScope
                })
        }
    }
    $EndPolicyAssignmentsAllCreateEnriched = Get-Date
    Write-Host "   PolicyAssignmentsAllCreateEnriched processing duration: $((NEW-TIMESPAN -Start $startPolicyAssignmentsAllCreateEnriched -End $EndPolicyAssignmentsAllCreateEnriched).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPolicyAssignmentsAllCreateEnriched -End $EndPolicyAssignmentsAllCreateEnriched).TotalSeconds) seconds)"
    #endregion PolicyAssignmentsAllCreateEnriched

    #region PolicyAssignmentsAllResolveIdentities
    Write-Host '   processing unresoved Identities (createdBy/updatedBy)'
    $startUnResolvedIdentitiesCreatedByUpdatedByPolicy = Get-Date

    $createdByNotResolved = ($arrayPolicyAssignmentsEnriched.where( { -not [string]::IsNullOrEmpty($_.CreatedBy) -and $_.CreatedBy -notlike 'ObjectType:*' })).CreatedBy | Sort-Object -Unique
    $updatedByNotResolved = ($arrayPolicyAssignmentsEnriched.where( { -not [string]::IsNullOrEmpty($_.UpdatedBy) -and $_.UpdatedBy -notlike 'ObjectType:*' })).UpdatedBy | Sort-Object -Unique

    $htNonResolvedIdentitiesPolicy = @{}
    foreach ($createdByNotResolvedEntry in $createdByNotResolved) {
        if (-not $htNonResolvedIdentitiesPolicy.($createdByNotResolvedEntry)) {
            $htNonResolvedIdentitiesPolicy.($createdByNotResolvedEntry) = @{}
        }
    }
    foreach ($updatedByNotResolvedEntry in $updatedByNotResolved) {
        if (-not $htNonResolvedIdentitiesPolicy.($updatedByNotResolvedEntry)) {
            $htNonResolvedIdentitiesPolicy.($updatedByNotResolvedEntry) = @{}
        }
    }

    $htNonResolvedIdentitiesPolicyCount = $htNonResolvedIdentitiesPolicy.Count
    if ($htNonResolvedIdentitiesPolicyCount -gt 0) {
        Write-Host "     $htNonResolvedIdentitiesPolicyCount unresolved identities that created/updated a Policy assignment (createdBy/updatedBy)"
        $arrayUnresolvedIdentities = @()
        $arrayUnresolvedIdentities = foreach ($unresolvedIdentity in  $htNonResolvedIdentitiesPolicy.keys) {
            if (-not [string]::IsNullOrEmpty($unresolvedIdentity)) {
                $unresolvedIdentity
            }
        }
        $arrayUnresolvedIdentitiesCount = $arrayUnresolvedIdentities.Count
        Write-Host "     $arrayUnresolvedIdentitiesCount unresolved identities that have a value"
        if ($arrayUnresolvedIdentitiesCount.Count -gt 0) {
            $counterBatch = [PSCustomObject] @{ Value = 0 }
            $batchSize = 1000
            $ObjectBatch = $arrayUnresolvedIdentities | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }
            $ObjectBatchCount = ($ObjectBatch | Measure-Object).Count
            $batchCnt = 0

            $script:htResolvedIdentitiesPolicy = @{}

            foreach ($batch in $ObjectBatch) {
                $batchCnt++

                $nonResolvedIdentitiesToCheck = '"{0}"' -f ($batch.Group -join '","')
                Write-Host "     IdentitiesToCheck: Batch #$batchCnt/$($ObjectBatchCount) ($(($batch.Group).Count))"
                $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/directoryObjects/getByIds"
                $method = 'POST'
                $body = @"
                    {
                        "ids":[$($nonResolvedIdentitiesToCheck)]
                    }
"@

                function resolveIdentitiesPolicy($currentTask) {
                    $resolvedIdentities = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask
                    $resolvedIdentitiesCount = $resolvedIdentities.Count
                    Write-Host "     $resolvedIdentitiesCount identities resolved"
                    if ($resolvedIdentitiesCount -gt 0) {
                        foreach ($resolvedIdentity in $resolvedIdentities) {
                            if (-not $htResolvedIdentitiesPolicy.($resolvedIdentity.id)) {
                                $script:htResolvedIdentitiesPolicy.($resolvedIdentity.id) = @{}
                                if ($resolvedIdentity.'@odata.type' -eq '#microsoft.graph.servicePrincipal') {
                                    if ($resolvedIdentity.servicePrincipalType -eq 'ManagedIdentity') {
                                        $miType = 'unknown'
                                        foreach ($altName in $resolvedIdentity.alternativeNames) {
                                            if ($altName -like 'isExplicit=*') {
                                                $splitAltName = $altName.split('=')
                                                if ($splitAltName[1] -eq 'true') {
                                                    $miType = 'Usr'
                                                }
                                                if ($splitAltName[1] -eq 'false') {
                                                    $miType = 'Sys'
                                                }
                                            }
                                        }
                                        $sptype = "MI $miType"
                                        $custObjectType = "ObjectType: SP $sptype, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (rp)"
                                    }
                                    else {
                                        if ($resolvedIdentity.servicePrincipalType -eq 'Application') {
                                            $sptype = 'App'
                                            if ($resolvedIdentity.appOwnerOrganizationId -eq $azAPICallConf['checkContext'].Tenant.Id) {
                                                $custObjectType = "ObjectType: SP $sptype INT, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (rp)"
                                            }
                                            else {
                                                $custObjectType = "ObjectType: SP $sptype EXT, ObjectDisplayName: $($resolvedIdentity.displayName), ObjectSignInName: n/a, ObjectId: $($resolvedIdentity.id) (rp)"
                                            }
                                        }
                                        else {
                                            Write-Host "* * * Unexpected IdentityType $($resolvedIdentity.servicePrincipalType)"
                                        }
                                    }
                                    $script:htResolvedIdentitiesPolicy.($resolvedIdentity.id).custObjectType = $custObjectType
                                    $script:htResolvedIdentitiesPolicy.($resolvedIdentity.id).obj = $resolvedIdentity
                                }

                                if ($resolvedIdentity.'@odata.type' -eq '#microsoft.graph.user') {
                                    if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData) {
                                        $hlpObjectDisplayName = 'scrubbed'
                                        $hlpObjectSigninName = 'scrubbed'
                                    }
                                    else {
                                        $hlpObjectDisplayName = $resolvedIdentity.displayName
                                        $hlpObjectSigninName = $resolvedIdentity.userPrincipalName
                                    }
                                    $custObjectType = "ObjectType: User, ObjectDisplayName: $hlpObjectDisplayName, ObjectSignInName: $hlpObjectSigninName, ObjectId: $($resolvedIdentity.id) (rp)"

                                    $script:htResolvedIdentitiesPolicy.($resolvedIdentity.id).custObjectType = $custObjectType
                                    $script:htResolvedIdentitiesPolicy.($resolvedIdentity.id).obj = $resolvedIdentity
                                }

                                if ($resolvedIdentity.'@odata.type' -ne '#microsoft.graph.user' -and $resolvedIdentity.'@odata.type' -ne '#microsoft.graph.servicePrincipal') {
                                    Write-Host "!!! * * * IdentityType '$($resolvedIdentity.'@odata.type')' was not considered by AzGovViz - if you see this line, please file an issue on GitHub - thank you." -ForegroundColor Yellow
                                }
                            }
                        }
                    }
                }
                resolveIdentitiesPolicy -currentTask 'resolveObjectbyId PolicyAssignment #1'
            }

            foreach ($policyAssignment in $script:arrayPolicyAssignmentsEnriched.where( { -not [string]::IsNullOrEmpty($_.CreatedBy) -and $_.CreatedBy -notlike 'ObjectType*' })) {
                if ($htResolvedIdentitiesPolicy.($policyAssignment.CreatedBy)) {
                    $policyAssignment.CreatedBy = $htResolvedIdentitiesPolicy.($policyAssignment.CreatedBy).custObjectType
                }
            }

            foreach ($policyAssignment in $script:arrayPolicyAssignmentsEnriched.where( { -not [string]::IsNullOrEmpty($_.UpdatedBy) -and $_.UpdatedBy -notlike 'ObjectType*' })) {
                if ($htResolvedIdentitiesPolicy.($policyAssignment.UpdatedBy)) {
                    $policyAssignment.UpdatedBy = $htResolvedIdentitiesPolicy.($policyAssignment.UpdatedBy).custObjectType
                }
            }
        }
    }

    $endUnResolvedIdentitiesCreatedByUpdatedByPolicy = Get-Date
    Write-Host "    UnresolvedIdentities (createdBy/updatedBy) duration: $((NEW-TIMESPAN -Start $startUnResolvedIdentitiesCreatedByUpdatedByPolicy -End $endUnResolvedIdentitiesCreatedByUpdatedByPolicy).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startUnResolvedIdentitiesCreatedByUpdatedByPolicy -End $endUnResolvedIdentitiesCreatedByUpdatedByPolicy).TotalSeconds) seconds)"
    #endregion PolicyAssignmentsAllResolveIdentities

    $script:arrayPolicyAssignmentsEnrichedGroupedBySubscription = $arrayPolicyAssignmentsEnriched | Group-Object -Property subscriptionId
    $script:arrayPolicyAssignmentsEnrichedGroupedByManagementGroup = $arrayPolicyAssignmentsEnriched | Group-Object -Property MgId

    #region policyAssignmentsAllHTML
    Write-Host '   processing SummaryPolicyAssignmentsAllHTML'
    $startSummaryPolicyAssignmentsAllHTML = Get-Date
    if (($arrayPolicyAssignmentsEnriched).count -gt 0) {

        if (-not $NoCsvExport) {
            $csvFilename = "$($filename)_PolicyAssignments"
            Write-Host "    Exporting PolicyAssignments CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
            if ($CsvExportUseQuotesAsNeeded) {
                $arrayPolicyAssignmentsEnriched | Sort-Object -Property Level, MgId, SubscriptionId, PolicyAssignmentId | Select-Object -ExcludeProperty PolicyName, RelatedRoleAssignments | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation -UseQuotes AsNeeded
            }
            else {
                $arrayPolicyAssignmentsEnriched | Sort-Object -Property Level, MgId, SubscriptionId, PolicyAssignmentId | Select-Object -ExcludeProperty PolicyName, RelatedRoleAssignments | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation
            }
        }

        $policyAssignmentsUniqueCount = ($arrayPolicyAssignmentsEnriched | Sort-Object -Property PolicyAssignmentId -Unique).count
        if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].PolicyAtScopeOnly) {
            $policyAssignmentsCount = $policyAssignmentsUniqueCount
            $tfCount = $policyAssignmentsCount
        }
        else {
            $policyAssignmentsCount = ($arrayPolicyAssignmentsEnriched).count
            $tfCount = $policyAssignmentsCount
        }

        if ($tfCount -gt $HtmlTableRowsLimit) {
            Write-Host "   !Skipping TenantSummary PolicyAssignments HTML processing as $tfCount lines is exceeding the critical rows limit of $HtmlTableRowsLimit" -ForegroundColor Yellow
            [void]$htmlTenantSummary.AppendLine(@"
            <button type="button" class="collapsible" id="buttonTenantSummary_policyAssignmentsAll_largeDataSet">
                <i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($policyAssignmentsCount) Policy assignments ($policyAssignmentsUniqueCount unique)</span>
            </button>
            <div class="content TenantSummary padlxx">
                <i class="fa fa-exclamation-triangle orange" aria-hidden="true"></i><span style="color:#ff0000"> Output of $tfCount lines would exceed the html rows limit of $HtmlTableRowsLimit (html file potentially would become unresponsive). Work with the CSV file <i>$($csvFilename).csv</i> | Note: the CSV file will only exist if you did NOT use parameter <i>-NoCsvExport</i></span><br>
                <span style="color:#ff0000">You can adjust the html row limit by using parameter <i>-HtmlTableRowsLimit</i></span><br>
                <span style="color:#ff0000">You can reduce the number of lines by using parameter <i>-LargeTenant</i> and/or <i>-DoNotIncludeResourceGroupsAnsResourcesOnRBAC</i></span><br>
                <span style="color:#ff0000">Check the parameters documentation</span> <a class="externallink" href="https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting#parameters" target="_blank" rel="noopener">AzGovViz docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
            </div>
"@)
        }
        else {

            $htmlTableId = 'TenantSummary_policyAssignmentsAll'
            $noteOrNot = ''

            [void]$htmlTenantSummary.AppendLine(@"
        <button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_policyAssignmentsAll"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($policyAssignmentsCount) Policy assignments ($policyAssignmentsUniqueCount unique)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a><br>
<span class="padlxx hintTableSize">*Depending on the number of rows and your computerÂ´s performance the table may respond with delay, download the csv for better filtering experience</span>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Management Group Id</th>
<th>Management Group Name</th>
<th>SubscriptionId</th>
<th>Subscription Name</th>
<th>Inheritance</th>
<th>ScopeExcluded</th>
<th>Exemption applies</th>
<th>Policy/Set DisplayName</th>
<th>Policy/Set Description</th>
<th>Policy/SetId</th>
<th>Policy/Set</th>
<th>Type</th>
<th>Category</th>
<th>Effect</th>
<th>Parameters</th>
<th>Enforcement</th>
<th>NonCompliance Message</th>
"@)

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                [void]$htmlTenantSummary.AppendLine(@'
<th>Policies NonCmplnt</th>
<th>Policies Compliant</th>
<th>Resources NonCmplnt</th>
<th>Resources Compliant</th>
<th>Resources Conflicting</th>
'@)
            }

            [void]$htmlTenantSummary.AppendLine(@"
<th>Role/Assignment $noteOrNot</th>
<th>Managed Identity</th>
<th>Assignment DisplayName</th>
<th>Assignment Description</th>
<th>AssignmentId</th>
<th>AssignedBy</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)

            $htmlTenantSummary | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $htmlTenantSummary = [System.Text.StringBuilder]::new()
            $htmlSummaryPolicyAssignmentsAll = $null
            $startloop = Get-Date

            $htmlSummaryPolicyAssignmentsAll = foreach ($policyAssignment in $arrayPolicyAssignmentsEnriched | Sort-Object -Property Level, MgName, MgId, SubscriptionName, SubscriptionId, PolicyAssignmentId) {
                if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].PolicyAtScopeOnly) {
                    if ($policyAssignment.Inheritance -like 'inherited *' -and $policyAssignment.MgParentId -ne "'upperScopes'") {
                        continue
                    }
                }
                if ($policyAssignment.PolicyType -eq 'Custom') {
                    $policyName = ($policyAssignment.PolicyName -replace '<', '&lt;' -replace '>', '&gt;')
                }
                else {
                    $policyName = $policyAssignment.PolicyName
                }
                @"
<tr>
<td>$($policyAssignment.mgOrSubOrRG)</td>
<td>$($policyAssignment.MgId)</td>
<td>$($policyAssignment.MgName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.SubscriptionId)</td>
<td>$($policyAssignment.SubscriptionName)</td>
<td>$($policyAssignment.Inheritance)</td>
<td>$($policyAssignment.ExcludedScope)</td>
<td>$($policyAssignment.ExemptionScope)</td>
<td>$($policyName)</td>
<td>$($policyAssignment.PolicyDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.PolicyVariant)</td>
<td>$($policyAssignment.PolicyType)</td>
<td>$($policyAssignment.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.Effect)</td>
<td>$($policyAssignment.PolicyAssignmentParameters)</td>
<td>$($policyAssignment.PolicyAssignmentEnforcementMode)</td>
<td>$($policyAssignment.PolicyAssignmentNonComplianceMessages -replace '<', '&lt;' -replace '>', '&gt;')</td>
"@

                if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                    @"
<td>$($policyAssignment.NonCompliantPolicies)</td>
<td>$($policyAssignment.CompliantPolicies)</td>
<td>$($policyAssignment.NonCompliantResources)</td>
<td>$($policyAssignment.CompliantResources)</td>
<td>$($policyAssignment.ConflictingResources)</td>
"@
                }

                @"
<td class="breakwordall">$($policyAssignment.RelatedRoleAssignments)</td>
<td>$($policyAssignment.PolicyAssignmentMI)</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.AssignedBy)</td>
<td>$($policyAssignment.CreatedOn)</td>
<td>$($policyAssignment.CreatedBy)</td>
<td>$($policyAssignment.UpdatedOn)</td>
<td>$($policyAssignment.UpdatedBy)</td>
</tr>
"@
            }

            $endloop = Get-Date
            Write-Host "    html foreach loop duration: $((NEW-TIMESPAN -Start $startloop -End $endloop).TotalSeconds) seconds"

            $start = Get-Date
            [void]$htmlTenantSummary.AppendLine($htmlSummaryPolicyAssignmentsAll)
            $htmlTenantSummary | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $htmlTenantSummary = [System.Text.StringBuilder]::new()
            $end = Get-Date
            Write-Host "    html append file duration: $((NEW-TIMESPAN -Start $start -End $end).TotalSeconds) seconds"
            #[System.GC]::Collect()

            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
        paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@'
            btn_reset: true,
            highlight_keywords: true,
            alternate_rows: true,
            auto_filter: {
                delay: 1100
            },
            no_results_message: true,
            linked_filters: true,
            col_0: 'select',
            col_6: 'select',
            col_7: 'select',
            col_11: 'select',
            col_12: 'select',
            col_14: 'select',
            col_16: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
'@)

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                [void]$htmlTenantSummary.AppendLine(@'
                'number',
                'number',
                'number',
                'number',
                'number',
'@)
            }

            [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
'@)

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                [void]$htmlTenantSummary.AppendLine(@'
            watermark: ['', '', '', 'try [nonempty]', '', 'thisScope', '', '', '', '', '', '','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
'@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
            watermark: ['', '', '', 'try [nonempty]', '', 'thisScope', '', '', '', '', '', '','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
'@)
            }

            [void]$htmlTenantSummary.AppendLine(@'
            extensions: [
                {
                    name: 'colsVisibility',
'@)

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                [void]$htmlTenantSummary.AppendLine(@'
                    at_start: [9, 25, 26],
'@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
                    at_start: [9, 20, 21],
'@)
            }

            [void]$htmlTenantSummary.AppendLine(@"
                    text: 'Columns: ',
                    enable_tick_all: true
                },
                { name: 'sort'
                }
            ]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayPolicyAssignmentsEnriched).count) Policy assignments</span></p>
"@)
    }
    $endSummaryPolicyAssignmentsAllHTML = Get-Date
    Write-Host "   SummaryPolicyAssignmentsAllHTML duration: $((NEW-TIMESPAN -Start $startSummaryPolicyAssignmentsAllHTML -End $endSummaryPolicyAssignmentsAllHTML).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSummaryPolicyAssignmentsAllHTML -End $endSummaryPolicyAssignmentsAllHTML).TotalSeconds) seconds)"
    #endregion policyAssignmentsAllHTML
    $endSummaryPolicyAssignmentsAll = Get-Date
    Write-Host "   SummaryPolicyAssignmentsAll duration: $((NEW-TIMESPAN -Start $startSummaryPolicyAssignmentsAll -End $endSummaryPolicyAssignmentsAll).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSummaryPolicyAssignmentsAll -End $endSummaryPolicyAssignmentsAll).TotalSeconds) seconds)"
    #endregion SUMMARYPolicyAssignmentsAll

    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)
    #endregion tenantSummaryPolicy

    showMemoryUsage

    #region tenantSummaryRBAC
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummaryRBAC"><hr class="hr-textRBAC" data-content="RBAC" /></button>
<div class="content TenantSummaryContent">
'@)

    #region SUMMARYtenanttotalcustomroles
    Write-Host '  processing TenantSummary Custom Roles'
    if ($tenantCustomRolesCount -gt $LimitRBACCustomRoleDefinitionsTenant * ($LimitCriticalPercentage / 100)) {
        $faimage = "<i class=`"padlx fa fa-exclamation-triangle`" aria-hidden=`"true`"></i>"
    }
    else {
        $faimage = "<i class=`"padlx fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
    }

    if ($tenantCustomRolesCount -gt 0) {
        $tfCount = $tenantCustomRolesCount
        $htmlTableId = 'TenantSummary_customRoles'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customRoles">$faimage <span class="valignMiddle">$tenantCustomRolesCount Custom Role definitions ($scopeNamingSummary) (Limit: $tenantCustomRolesCount/$LimitRBACCustomRoleDefinitionsTenant)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Assignable Scopes</th>
<th>Data</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYtenanttotalcustomroles = $null
        $htmlSUMMARYtenanttotalcustomroles = foreach ($tenantCustomRole in $tenantCustomRoles | Sort-Object @{Expression = { $_.Name } }, @{Expression = { $_.Id } }) {
            $cachedTenantCustomRole = ($htCacheDefinitionsRole).($tenantCustomRole.Id)
            if (-not [string]::IsNullOrEmpty($cachedTenantCustomRole.DataActions) -or -not [string]::IsNullOrEmpty($cachedTenantCustomRole.NotDataActions)) {
                $roleManageData = 'true'
            }
            else {
                $roleManageData = 'false'
            }

            if (-not [string]::IsNullOrEmpty($cachedTenantCustomRole.Json.properties.createdBy)) {
                $createdBy = $cachedTenantCustomRole.Json.properties.createdBy
                if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
                    $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details
                }
            }
            else {
                $createdBy = 'IsNullOrEmpty'
            }

            $createdOn = $cachedTenantCustomRole.Json.properties.createdOn
            $createdOnFormated = $createdOn
            $updatedOn = $cachedTenantCustomRole.Json.properties.updatedOn
            if ($updatedOn -eq $createdOn) {
                $updatedOnFormated = ''
                $updatedByRemoveNoiseOrNot = ''
            }
            else {
                $updatedOnFormated = $updatedOn
                if (-not [string]::IsNullOrEmpty($cachedTenantCustomRole.Json.properties.updatedBy)) {
                    $updatedByRemoveNoiseOrNot = $cachedTenantCustomRole.Json.properties.updatedBy
                    if ($htIdentitiesWithRoleAssignmentsUnique.($updatedByRemoveNoiseOrNot)) {
                        $updatedByRemoveNoiseOrNot = $htIdentitiesWithRoleAssignmentsUnique.($updatedByRemoveNoiseOrNot).details
                    }
                }
                else {
                    $updatedByRemoveNoiseOrNot = 'IsNullOrEmpty'
                }
            }
            @"
<tr>
<td>$($cachedTenantCustomRole.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($cachedTenantCustomRole.Id)</td>
<td>$(($cachedTenantCustomRole.AssignableScopes).count) ($($cachedTenantCustomRole.AssignableScopes -join "$CsvDelimiterOpposite "))</td>
<td>$($roleManageData)</td>
<td>$createdOnFormated</td>
<td>$createdBy</td>
<td>$updatedOnFormated</td>
<td>$updatedByRemoveNoiseOrNot</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYtenanttotalcustomroles)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_3: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'select',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$tenantCustomRolesCount Custom Role definitions ($scopeNamingSummary)</span></p>
"@)
    }
    #endregion SUMMARYtenanttotalcustomroles

    #region SUMMARYOrphanedCustomRoles
    $startSUMMARYOrphanedCustomRoles = Get-Date
    Write-Host '  processing TenantSummary Custom Roles orphaned'
    if ($getMgParentName -eq 'Tenant Root') {
        $arrayCustomRolesOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()

        if (($tenantCustomRoles).count -gt 0) {
            $mgSubRoleAssignmentsArrayRoleDefinitionIdUnique = $mgSubRoleAssignmentsArrayFromHTValues.RoleDefinitionId | Sort-Object -Unique
            if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                $rgResRoleAssignmentsArrayRoleDefinitionIdUnique = $rgResRoleAssignmentsArrayFromHTValues.RoleDefinitionId | Sort-Object -Unique
            }
            foreach ($customRoleAll in $tenantCustomRoles) {
                $roleIsUsed = $false
                if (($mgSubRoleAssignmentsArrayRoleDefinitionIdUnique) -contains ($customRoleAll.Id)) {
                    $roleIsUsed = $true
                }

                if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                    if ($roleIsUsed -eq $false) {
                        if (($rgResRoleAssignmentsArrayRoleDefinitionIdUnique) -contains ($customRoleAll.Id)) {
                            $roleIsUsed = $true
                        }
                    }
                }

                #role used in a policyDef (rule roledefinitionIds)
                if ($htRoleDefinitionIdsUsedInPolicy.Keys -contains "/providers/Microsoft.Authorization/roleDefinitions/$($customRoleAll.Id)") {
                    $roleIsUsed = $true
                }

                if ($roleIsUsed -eq $false) {
                    $null = $arrayCustomRolesOrphanedFinalIncludingResourceGroups.Add($customRoleAll)
                }
            }
        }

        if (($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customRolesOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customRolesOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Role definitions ($scopeNamingSummary) <abbr title="Role has no assignments (including ResourceGroups and Resources) &#13;AND &#13;Role is not used in a Policy definitionÂ´s rule (roleDefinitionIds)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Assignable Scopes</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYOrphanedCustomRoles = $null
            $htmlSUMMARYOrphanedCustomRoles = foreach ($customRoleOrphaned in $arrayCustomRolesOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.Name } }) {
                @"
<tr>
<td>$($customRoleOrphaned.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customRoleOrphaned.Id)</td>
<td>$(($customRoleOrphaned.AssignableScopes).count) ($($customRoleOrphaned.AssignableScopes -join "$CsvDelimiterOpposite "))</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYOrphanedCustomRoles)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Role definitions ($scopeNamingSummary)</span></p>
"@)
        }
        #not renant root
    }
    else {
        $mgs = (($optimizedTableForPathQueryMg.where( { $_.mgId -ne '' -and $_.Level -ne '0' })) | select-object MgId -unique)
        $arrayCustomRolesOrphanedFinalIncludingResourceGroups = [System.Collections.ArrayList]@()

        $mgSubRoleAssignmentsArrayRoleDefinitionIdUnique = $mgSubRoleAssignmentsArrayFromHTValues.RoleDefinitionId | Sort-Object -Unique
        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
            $rgResRoleAssignmentsArrayRoleDefinitionIdUnique = $rgResRoleAssignmentsArrayFromHTValues.RoleDefinitionId | Sort-Object -Unique
        }
        if (($tenantCustomRoles).count -gt 0) {
            foreach ($customRoleAll in $tenantCustomRoles) {
                $roleIsUsed = $false
                $customRoleAssignableScopes = $customRoleAll.AssignableScopes
                foreach ($customRoleAssignableScope in $customRoleAssignableScopes) {
                    if (($customRoleAssignableScope) -like '/providers/Microsoft.Management/managementGroups/*') {
                        $roleAssignableScopeMg = $customRoleAssignableScope -replace '/providers/Microsoft.Management/managementGroups/', ''
                        if ($mgs.MgId -notcontains ($roleAssignableScopeMg)) {
                            #assignableScope outside of the ManagementGroupId Scope
                            $roleIsUsed = $true
                            Continue
                        }
                    }
                }
                if ($roleIsUsed -eq $false) {
                    if (($mgSubRoleAssignmentsArrayRoleDefinitionIdUnique) -contains ($customRoleAll.Id)) {
                        $roleIsUsed = $true
                    }
                }
                if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                    if ($roleIsUsed -eq $false) {
                        if (($rgResRoleAssignmentsArrayRoleDefinitionIdUnique) -contains ($customRoleAll.Id)) {
                            $roleIsUsed = $true
                        }
                    }
                }

                #role used in a policyDef (rule roledefinitionIds)
                if ($htRoleDefinitionIdsUsedInPolicy.Keys -contains "/providers/Microsoft.Authorization/roleDefinitions/$($customRoleAll.Id)") {
                    $roleIsUsed = $true
                }

                if ($roleIsUsed -eq $false) {
                    $null = $arrayCustomRolesOrphanedFinalIncludingResourceGroups.Add($customRoleAll)
                }
            }
        }

        if (($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count -gt 0) {
            $tfCount = ($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count
            $htmlTableId = 'TenantSummary_customRolesOrphaned'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_customRolesOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Role definitions ($scopeNamingSummary) <abbr title="Role has no assignments (including ResourceGroups and Resources) &#13;AND &#13;Role is not used in a Policy definitionÂ´s rule (roleDefinitionIds) &#13;(Roles where assignableScopes contains MG Id from superior scopes are not evaluated)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role Assignable Scopes</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYOrphanedCustomRoles = $null
            $htmlSUMMARYOrphanedCustomRoles = foreach ($inScopeCustomRole in $arrayCustomRolesOrphanedFinalIncludingResourceGroups | Sort-Object @{Expression = { $_.Name } }) {
                @"
<tr>
<td>$($inScopeCustomRole.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($inScopeCustomRole.Id)</td>
<td>$(($inScopeCustomRole.AssignableScopes).count) ($($inScopeCustomRole.AssignableScopes -join "$CsvDelimiterOpposite "))</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYOrphanedCustomRoles)
            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($arrayCustomRolesOrphanedFinalIncludingResourceGroups).count) Orphaned Custom Role definitions ($scopeNamingSummary)</span></p>
"@)
        }
    }
    $endSUMMARYOrphanedCustomRoles = Get-Date
    Write-Host "   SUMMARYOrphanedCustomRoles duration: $((NEW-TIMESPAN -Start $startSUMMARYOrphanedCustomRoles -End $endSUMMARYOrphanedCustomRoles).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYOrphanedCustomRoles -End $endSUMMARYOrphanedCustomRoles).TotalSeconds) seconds)"

    #endregion SUMMARYOrphanedCustomRoles

    #region SUMMARYOrphanedRoleAssignments
    Write-Host '  processing TenantSummary RoleAssignments orphaned'
    $roleAssignmentsOrphanedAll = ($rbacBaseQuery.where( { $_.RoleAssignmentIdentityObjectType -eq 'Unknown' })) | Sort-Object -Property RoleAssignmentId
    $roleAssignmentsOrphanedUnique = $roleAssignmentsOrphanedAll | Sort-Object -Property RoleAssignmentId -Unique

    if (($roleAssignmentsOrphanedUnique).count -gt 0) {
        $tfCount = ($roleAssignmentsOrphanedUnique).count
        $htmlTableId = 'TenantSummary_roleAssignmentsOrphaned'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsOrphaned"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOrphanedUnique).count) Orphaned Role assignments ($scopeNamingSummary) <abbr title="Role definition was deleted although and assignment existed &#13;OR &#13;Target identity (User, Group, ServicePrincipal) was deleted &#13;OR &#13;Target Resource was moved"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role AssignmentId</th>
<th>Role Name</th>
<th>RoleId</th>
<th>Impacted Mg/Sub</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYOrphanedRoleAssignments = $null
        foreach ($roleAssignmentOrphanedUnique in $roleAssignmentsOrphanedUnique) {
            $hlpRoleAssignmentsAll = $roleAssignmentsOrphanedAll.where( { $_.RoleAssignmentId -eq $roleAssignmentOrphanedUnique.RoleAssignmentId })
            $impactedMgs = $hlpRoleAssignmentsAll.where( { [String]::IsNullOrEmpty($_.SubscriptionId) }) | Sort-Object -Property MgId
            $impactedSubs = $hlpRoleAssignmentsAll.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) }) | Sort-Object -Property SubscriptionId
            $htmlSUMMARYOrphanedRoleAssignments += @"
<tr>
<td>$($roleAssignmentOrphanedUnique.RoleAssignmentId)</td>
<td>$($roleAssignmentOrphanedUnique.RoleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($roleAssignmentOrphanedUnique.RoleDefinitionId)</td>
<td>Mg: $(($impactedMgs).count); Sub: $(($impactedSubs).count)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYOrphanedRoleAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOrphanedUnique).count) Orphaned Role assignments ($scopeNamingSummary)</span></p>
"@)
    }
    #endregion SUMMARYOrphanedRoleAssignments

    #region SUMMARYClassicAdministrators
    Write-Host '  processing TenantSummary ClassicAdministrators'

    if ($htClassicAdministrators.Keys.Count -gt 0) {
        $tfCount = $htClassicAdministrators.Values.ClassicAdministrators.Count
        $htmlTableId = 'TenantSummary_ClassicAdministrators'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ClassicAdministrators"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($tfCount) Classic Administrators</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>MgPath</th>
<th>Role</th>
<th>Identity</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYClassicAdministrators = $null
        $classicAdministrators = $htClassicAdministrators.Values.ClassicAdministrators | Sort-Object -Property Subscription, Role, Identity
        if (-not $NoCsvExport) {
            $csvFilename = "$($filename)_ClassicAdministrators"
            Write-Host "   Exporting ClassicAdministrators CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
            $classicAdministrators | Select-Object -ExcludeProperty Id | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
        }
        $htmlSUMMARYClassicAdministrators = foreach ($classicAdministrator in $classicAdministrators) {
            @"
<tr>
<td>$($classicAdministrator.Subscription)</td>
<td>$($classicAdministrator.SubscriptionId)</td>
<td>$($classicAdministrator.SubscriptionMgPath)</td>
<td>$($classicAdministrator.Role)</td>
<td>$($classicAdministrator.Identity)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYClassicAdministrators)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_3: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No ClassicAdministrators</span></p>
"@)
    }
    #endregion SUMMARYClassicAdministrators

    #region SUMMARYRoleAssignmentsAll
    $startRoleAssignmentsAll = Get-Date
    Write-Host '  processing TenantSummary RoleAssignments'

    $startCreateRBACAllHTMLbeforeForeach = Get-Date

    if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].RBACAtScopeOnly) {
        $rbacAllAtScope = ($rbacAll.where( { ((-not [string]::IsNullOrEmpty($_.SubscriptionId) -and $_.scope -notlike 'inherited *')) -or ([string]::IsNullOrEmpty($_.SubscriptionId)) }))
        $rbacAllCount = $rbacAllAtScope.Count
    }
    else {
        $rbacAllCount = $rbacAll.Count
    }

    if ($rbacAllCount -gt 0) {
        $uniqueRoleAssignmentsCount = ($rbacAll.RoleAssignmentId | Sort-Object -Unique).count
        $tfCount = $rbacAllCount

        if (-not $NoCsvExport) {
            $startCreateRBACAllCSV = Get-Date

            $csvFilename = "$($filename)_RoleAssignments"
            Write-Host "   Exporting RoleAssignments CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
            if ($CsvExportUseQuotesAsNeeded) {
                if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].RBACAtScopeOnly) {
                    $rbacAllAtScope | Sort-Object -Property Level, RoleAssignmentId, MgId, SubscriptionId, RoleClear, ObjectId | Select-Object -ExcludeProperty Role, RbacRelatedPolicyAssignment | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation -UseQuotes AsNeeded
                }
                else {
                    $rbacAll | Sort-Object -Property Level, RoleAssignmentId, MgId, SubscriptionId, RoleClear, ObjectId | Select-Object -ExcludeProperty Role, RbacRelatedPolicyAssignment | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation -UseQuotes AsNeeded
                }
            }
            else {
                if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].RBACAtScopeOnly) {
                    $rbacAllAtScope | Sort-Object -Property Level, RoleAssignmentId, MgId, SubscriptionId, RoleClear, ObjectId | Select-Object -ExcludeProperty Role, RbacRelatedPolicyAssignment | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation
                }
                else {
                    $rbacAll | Sort-Object -Property Level, RoleAssignmentId, MgId, SubscriptionId, RoleClear, ObjectId | Select-Object -ExcludeProperty Role, RbacRelatedPolicyAssignment | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter "$csvDelimiter" -NoTypeInformation
                }
            }

            $endCreateRBACAllCSV = Get-Date
            Write-Host "   CreateRBACAll CSV duration: $((NEW-TIMESPAN -Start $startCreateRBACAllCSV -End $endCreateRBACAllCSV).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCreateRBACAllCSV -End $endCreateRBACAllCSV).TotalSeconds) seconds)"
        }

        if ($tfCount -gt $HtmlTableRowsLimit) {
            Write-Host "   !Skipping TenantSummary RoleAssignments HTML processing as $tfCount lines is exceeding the critical rows limit of $HtmlTableRowsLimit" -ForegroundColor Yellow
            [void]$htmlTenantSummary.AppendLine(@"
            <button type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsAll_largeDataSet">
                <i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($rbacAllCount) Role assignments ($uniqueRoleAssignmentsCount unique)</span>
            </button>
            <div class="content TenantSummary padlxx">
                <i class="fa fa-exclamation-triangle orange" aria-hidden="true"></i><span style="color:#ff0000"> Output of $tfCount lines would exceed the html rows limit of $HtmlTableRowsLimit (html file potentially would become unresponsive). Work with the CSV file <i>$($csvFilename).csv</i> | Note: the CSV file will only exist if you did NOT use parameter <i>-NoCsvExport</i></span><br>
                <span style="color:#ff0000">You can adjust the html row limit by using parameter <i>-HtmlTableRowsLimit</i></span><br>
                <span style="color:#ff0000">You can reduce the number of lines by using parameter <i>-LargeTenant</i> and/or <i>-DoNotIncludeResourceGroupsAnsResourcesOnRBAC</i></span><br>
                <span style="color:#ff0000">Check the parameters documentation</span> <a class="externallink" href="https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting#parameters" target="_blank" rel="noopener">AzGovViz docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
            </div>
"@)
        }
        else {
            $htmlTableId = 'TenantSummary_roleAssignmentsAll'
            $noteOrNot = ''
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsAll"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($rbacAllCount) Role assignments ($uniqueRoleAssignmentsCount unique)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a><br>
<span class="padlxx hintTableSize">*Depending on the number of rows and your computerÂ´s performance the table may respond with delay, download the csv for better filtering experience</span>
"@)


            [void]$htmlTenantSummary.AppendLine(@"
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Management Group Id</th>
<th>Management Group Name</th>
<th>SubscriptionId</th>
<th>Subscription Name</th>
<th>Assignment Scope</th>
<th>Role</th>
<th>Role Id</th>
<th>Role Type</th>
<th>Data</th>
<th>Can do Role assignment</th>
<th>Identity Displayname</th>
<th>Identity SignInName</th>
<th>Identity ObjectId</th>
<th>Identity Type</th>
<th>Applicability</th>
<th>Applies through membership <abbr title="Note: the identity might not be a direct member of the group it could also be member of a nested group"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></th>
<th>Group Details</th>
<th>PIM</th>
<th>PIM assignment type</th>
<th>PIM start</th>
<th>PIM end</th>
<th>Role AssignmentId</th>
<th>Related Policy Assignment $noteOrNot</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
</tr>
</thead>
<tbody>
"@)
            $cnter = 0
            $roleAssignmentsAllCount = $rbacAllCount
            $htmlSummaryRoleAssignmentsAll = $null
            $htmlTenantSummary | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $htmlTenantSummary = [System.Text.StringBuilder]::new()

            $endCreateRBACAllHTMLbeforeForeach = Get-Date
            Write-Host "   CreateRBACAll HTML before Foreach duration: $((NEW-TIMESPAN -Start $startCreateRBACAllHTMLbeforeForeach -End $endCreateRBACAllHTMLbeforeForeach).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCreateRBACAllHTMLbeforeForeach -End $endCreateRBACAllHTMLbeforeForeach).TotalSeconds) seconds)"

            $startSortRBACAll = Get-Date
            if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].RBACAtScopeOnly) {
                $rbacAllSorted = $rbacAllAtScope | Sort-Object -Property Level, MgName, MgId, SubscriptionName, SubscriptionId, Scope, Role, RoleId, ObjectId, RoleAssignmentId
            }
            else {
                $rbacAllSorted = $rbacAll | Sort-Object -Property Level, MgName, MgId, SubscriptionName, SubscriptionId, Scope, Role, RoleId, ObjectId, RoleAssignmentId
            }

            $endSortRBACAll = Get-Date
            Write-Host "   Sort RBACAll duration: $((NEW-TIMESPAN -Start $startSortRBACAll -End $endSortRBACAll).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSortRBACAll -End $endSortRBACAll).TotalSeconds) seconds)"

            $startCreateRBACAllHTMLForeach = Get-Date
            $htmlSummaryRoleAssignmentsAll = [System.Text.StringBuilder]::new()
            foreach ($roleAssignment in $rbacAllSorted) {
                $cnter++
                if ($cnter % 1000 -eq 0) {
                    Write-Host "    create HTML $cnter of $rbacAllCount RoleAssignments processed"
                    if ($cnter % 5000 -eq 0) {
                        Write-Host '     appending..'
                        $htmlSummaryRoleAssignmentsAll | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
                        $htmlSummaryRoleAssignmentsAll = [System.Text.StringBuilder]::new()
                        #[System.GC]::Collect()
                    }
                }

                if ($roleAssignment.RoleType -eq 'Custom') {
                    $roleName = ($roleAssignment.Role -replace '<', '&lt;' -replace '>', '&gt;')
                }
                else {
                    $roleName = $roleAssignment.Role
                }

                [void]$htmlSummaryRoleAssignmentsAll.AppendFormat(
                    @'
<tr>
<td style="width:40px">{0}</td>
<td>{1}</td>
<td>{2}</td>
<td>{3}</td>
<td>{4}</td>
<td>{5}</td>
<td>{6}</td>
<td>{7}</td>
<td>{8}</td>
<td>{9}</td>
<td>{10}</td>
<td class="breakwordall">{11}</td>
<td class="breakwordall">{12}</td>
<td class="breakwordall">{13}</td>
<td style="width:76px" class="breakwordnone">{14}</td>
<td>{15}</td>
<td>{16}</td>
<td>{17}</td>
<td>{18}</td>
<td>{19}</td>
<td>{20}</td>
<td>{21}</td>
<td class="breakwordall">{22}</td>
<td class="breakwordall">{23}</td>
<td class="breakwordall">{24}</td>
<td class="breakwordall">{25}</td>
</tr>
'@, $roleAssignment.TenOrMgOrSubOrRGOrRes,
                    $roleAssignment.MgId,
                    ($roleAssignment.MgName -replace '<', '&lt;' -replace '>', '&gt;'),
                    $roleAssignment.SubscriptionId,
                    $roleAssignment.SubscriptionName,
                    $roleAssignment.Scope,
                    $roleName,
                    $roleAssignment.RoleId,
                    $roleAssignment.RoleType,
                    $roleAssignment.RoleDataRelated,
                    $roleAssignment.RoleCanDoRoleAssignments,
                    $roleAssignment.ObjectDisplayName,
                    $roleAssignment.ObjectSignInName,
                    $roleAssignment.ObjectId,
                    $roleAssignment.ObjectType,
                    $roleAssignment.AssignmentType,
                    $roleAssignment.AssignmentInheritFrom,
                    $roleAssignment.GroupMembersCount,
                    $roleAssignment.RoleAssignmentPIMRelated,
                    $roleAssignment.RoleAssignmentPIMAssignmentType,
                    $roleAssignment.RoleAssignmentPIMAssignmentSlotStart,
                    $roleAssignment.RoleAssignmentPIMAssignmentSlotEnd,
                    $roleAssignment.RoleAssignmentId,
                    ($roleAssignment.RbacRelatedPolicyAssignment),
                    $roleAssignment.CreatedOn,
                    $roleAssignment.CreatedBy
                )

            }
            $start = Get-Date
            [void]$htmlTenantSummary.AppendLine($htmlSummaryRoleAssignmentsAll)

            $htmlTenantSummary | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $htmlSummaryRoleAssignmentsAll = $null #cleanup
            $htmlTenantSummary = [System.Text.StringBuilder]::new()
            $end = Get-Date

            $endCreateRBACAllHTMLForeach = Get-Date
            Write-Host "   CreateRBACAll HTML Foreach duration: $((NEW-TIMESPAN -Start $startCreateRBACAllHTMLForeach -End $endCreateRBACAllHTMLForeach).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startCreateRBACAllHTMLForeach -End $endCreateRBACAllHTMLForeach).TotalSeconds) seconds)"

            [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            //linked_filters: true,
            col_0: 'multiple',
            col_8: 'select',
            col_9: 'select',
            col_10: 'select',
            col_14: 'multiple',
            col_15: 'select',
            col_18: 'select',
            col_19: 'select',
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'date',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
            watermark: ['', '', '', 'try [nonempty]', '', 'thisScope', 'try owner||reader', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
            extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)

        }
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($rbacAllCount) Role assignments</span></p>
"@)
    }

    $endRoleAssignmentsAll = Get-Date
    Write-Host "   SummaryRoleAssignmentsAll duration: $((NEW-TIMESPAN -Start $startRoleAssignmentsAll -End $endRoleAssignmentsAll).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startRoleAssignmentsAll -End $endRoleAssignmentsAll).TotalSeconds) seconds)"
    #endregion SUMMARYRoleAssignmentsAll

    #region SUMMARYSecurityCustomRoles
    Write-Host '  processing TenantSummary Custom Roles security (owner permissions)'
    $customRolesOwnerAll = ($rbacBaseQuery.where( { $_.RoleSecurityCustomRoleOwner -eq 1 })) | Sort-Object -Property RoleDefinitionId
    $customRolesOwnerHtAll = $tenantCustomRoles.where( { $_.Actions -eq '*' -and ($_.NotActions).length -eq 0 })
    if (($customRolesOwnerHtAll).count -gt 0) {
        $tfCount = ($customRolesOwnerHtAll).count
        $htmlTableId = 'TenantSummary_CustomRoleOwner'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_CustomRoleOwner"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$(($customRolesOwnerHtAll).count) Custom Role definitions Owner permissions ($scopeNamingSummary) <abbr title="Custom 'Owner' Role definitions should not exist"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role assignments</th>
<th>Assignable Scopes</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityCustomRoles = $null
        foreach ($customRole in ($customRolesOwnerHtAll | Sort-Object -Property Name, Id)) {
            $customRoleOwnersAllAssignmentsCount = ((($customRolesOwnerAll.where( { $_.RoleDefinitionId -eq $customRole.Id })).RoleAssignmentId | Sort-Object -Unique)).count
            if ($customRoleOwnersAllAssignmentsCount -gt 0) {
                $customRoleRoleAssignmentsArray = [System.Collections.ArrayList]@()
                $customRoleRoleAssignmentIds = ($customRolesOwnerAll.where( { $_.RoleDefinitionId -eq $customRole.Id })).RoleAssignmentId | Sort-Object -Unique
                foreach ($customRoleRoleAssignmentId in $customRoleRoleAssignmentIds) {
                    $null = $customRoleRoleAssignmentsArray.Add($customRoleRoleAssignmentId)
                }
                $customRoleRoleAssignmentsOutput = "$customRoleOwnersAllAssignmentsCount ($($customRoleRoleAssignmentsArray -join "$CsvDelimiterOpposite "))"
            }
            else {
                $customRoleRoleAssignmentsOutput = "$customRoleOwnersAllAssignmentsCount"
            }
            $htmlSUMMARYSecurityCustomRoles += @"
<tr>
<td>$($customRole.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($customRole.Id)</td>
<td>$($customRoleRoleAssignmentsOutput)</td>
<td>$(($customRole.AssignableScopes).count) ($($customRole.AssignableScopes -join "$CsvDelimiterOpposite "))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityCustomRoles)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($customRolesOwnerHtAll).count) Custom Role definitions Owner permissions ($scopeNamingSummary)</span></p>
"@)
    }
    #endregion SUMMARYSecurityCustomRoles

    #region SUMMARYSecurityRolesCanDoRoleAssignments
    Write-Host '  processing TenantSummary Roles security (can apply Role assignments)'
    if ($tenantAllRolesCanDoRoleAssignmentsCount -gt 0) {

        #$roleAssignments4RolesCanDoRoleAssignments = (($rbacBaseQuery.where( { $_.RoleCanDoRoleAssignments -eq $true })) | Sort-Object -Property RoleAssignmentId -Unique) | Select-Object RoleAssignmentId, RoleDefinitionId
        $roleAssignments4RolesCanDoRoleAssignments = (($rbacBaseQuery | Sort-Object -Property RoleAssignmentId -Unique).where( { $_.RoleCanDoRoleAssignments -eq $true })) | Select-Object RoleAssignmentId, RoleDefinitionId
        $htRoleAssignments4RolesCanDoRoleAssignments = @{}
        foreach ($roleAssignment4RolesCanDoRoleAssignments in $roleAssignments4RolesCanDoRoleAssignments) {
            if (-not $htRoleAssignments4RolesCanDoRoleAssignments.($roleAssignment4RolesCanDoRoleAssignments.RoleDefinitionId)) {
                $htRoleAssignments4RolesCanDoRoleAssignments.($roleAssignment4RolesCanDoRoleAssignments.RoleDefinitionId) = @{}
                $htRoleAssignments4RolesCanDoRoleAssignments.($roleAssignment4RolesCanDoRoleAssignments.RoleDefinitionId).roleAssignments = [System.Collections.ArrayList]@()
            }
            $null = $htRoleAssignments4RolesCanDoRoleAssignments.($roleAssignment4RolesCanDoRoleAssignments.RoleDefinitionId).roleAssignments.Add($roleAssignment4RolesCanDoRoleAssignments.RoleAssignmentId)
        }

        $tfCount = $tenantAllRolesCanDoRoleAssignmentsCount
        $htmlTableId = 'TenantSummary_RolesCanDoRoleAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_RolesCanDoRoleAssignments"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$($tenantAllRolesCanDoRoleAssignmentsCount) Role definitions can apply Role assignments</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Type</th>
<th>Role assignments</th>
<th>Assignable Scopes</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityRolesCanDoRoleAssignments = $null
        foreach ($role in ($tenantAllRolesCanDoRoleAssignments | Sort-Object -Property Name)) {
            if ($role.IsCustom) {
                $roleType = 'Custom'
                $roleAssignableScopes = "$(($role.AssignableScopes).count) ($($role.AssignableScopes -join "$CsvDelimiterOpposite "))"
            }
            else {
                $roleType = 'BuiltIn'
                $roleAssignableScopes = ''
            }

            if ($htRoleAssignments4RolesCanDoRoleAssignments.($role.Id).roleAssignments.Count -gt 0) {
                $roleAssignments = "$($htRoleAssignments4RolesCanDoRoleAssignments.($role.Id).roleAssignments.Count) ($($htRoleAssignments4RolesCanDoRoleAssignments.($role.Id).roleAssignments -join ', '))"
            }
            else {
                $roleAssignments = 0
            }

            $htmlSUMMARYSecurityRolesCanDoRoleAssignments += @"
<tr>
<td>$($role.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($role.Id)</td>
<td>$($roleType)</td>
<td>$($roleAssignments)</td>
<td>$($roleAssignableScopes)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityRolesCanDoRoleAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_2: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($tenantAllRolesCanDoRoleAssignmentsCount) Role definitions can apply Role assignments</span></p>
"@)
    }
    #endregion SUMMARYSecurityRolesCanDoRoleAssignments

    #region SUMMARYSecurityOwnerAssignmentSP
    $startSUMMARYSecurityOwnerAssignmentSP = Get-Date
    Write-Host '  processing TenantSummary RoleAssignments security (owner SP)'
    $roleAssignmentsOwnerAssignmentSPAll = ($rbacBaseQuery.where( { $_.RoleSecurityOwnerAssignmentSP -eq 1 })) | Sort-Object -Property RoleAssignmentId
    $roleAssignmentsOwnerAssignmentSP = $roleAssignmentsOwnerAssignmentSPAll | Sort-Object -Property RoleAssignmentId -Unique
    if (($roleAssignmentsOwnerAssignmentSP).count -gt 0) {
        $tfCount = ($roleAssignmentsOwnerAssignmentSP).count
        $htmlTableId = 'TenantSummary_roleAssignmentsOwnerAssignmentSP'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsOwnerAssignmentSP"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOwnerAssignmentSP).count) Owner permission assignments to ServicePrincipal ($scopeNamingSummary) <abbr title="Owner permissions on Service Principals should be treated exceptional"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role Assignment</th>
<th>ServicePrincipal (ObjId)</th>
<th>Impacted Mg/Sub</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityOwnerAssignmentSP = $null
        $htmlSUMMARYSecurityOwnerAssignmentSP = foreach ($roleAssignmentOwnerAssignmentSP in ($roleAssignmentsOwnerAssignmentSP)) {
            $hlpRoleAssignmentsAll = $roleAssignmentsOwnerAssignmentSPAll.where( { $_.RoleAssignmentId -eq $roleAssignmentOwnerAssignmentSP.RoleAssignmentId })
            $impactedMgs = $hlpRoleAssignmentsAll.where( { [String]::IsNullOrEmpty($_.SubscriptionId) })
            $impactedSubs = $hlpRoleAssignmentsAll.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) })
            $servicePrincipal = $roleAssignmentsOwnerAssignmentSP.where( { $_.RoleAssignmentId -eq $roleAssignmentOwnerAssignmentSP.RoleAssignmentId }) | Get-Unique
            @"
<tr>
<td>$($roleAssignmentOwnerAssignmentSP.RoleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($roleAssignmentOwnerAssignmentSP.RoleDefinitionId)</td>
<td>$($roleAssignmentOwnerAssignmentSP.RoleAssignmentId)</td>
<td>$($servicePrincipal.RoleAssignmentIdentityDisplayname) ($($servicePrincipal.RoleAssignmentIdentityObjectId))</td>
<td>Mg: $(($impactedMgs.mgid | Sort-Object -unique).count); Sub: $(($impactedSubs.subscriptionId | Sort-Object -unique).count)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityOwnerAssignmentSP)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOwnerAssignmentSP).count) Owner permission assignments to ServicePrincipal ($scopeNamingSummary)</span></p>
"@)
    }
    $endSUMMARYSecurityOwnerAssignmentSP = Get-Date
    Write-Host "   TenantSummary RoleAssignments security (owner SP) duration: $((NEW-TIMESPAN -Start $startSUMMARYSecurityOwnerAssignmentSP -End $endSUMMARYSecurityOwnerAssignmentSP).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYSecurityOwnerAssignmentSP -End $endSUMMARYSecurityOwnerAssignmentSP).TotalSeconds) seconds)"
    #endregion SUMMARYSecurityOwnerAssignmentSP

    #region SUMMARYSecurityOwnerAssignmentNotGroup
    Write-Host '  processing TenantSummary RoleAssignments security (owner notGroup)'
    $startSUMMARYSecurityOwnerAssignmentNotGroup = Get-Date

    $roleAssignmentsOwnerAssignmentNotGroup = $rbacBaseQueryArrayListNotGroupOwner | Sort-Object -Property RoleAssignmentId -Unique
    $roleAssignmentsOwnerAssignmentNotGroupGrouped = ($rbacBaseQueryArrayListNotGroupOwner | Group-Object -property roleassignmentId)

    if (($roleAssignmentsOwnerAssignmentNotGroup).count -gt 0) {
        $tfCount = ($roleAssignmentsOwnerAssignmentNotGroup).count
        $htmlTableId = 'TenantSummary_roleAssignmentsOwnerAssignmentNotGroup'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsOwnerAssignmentNotGroup"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOwnerAssignmentNotGroup).count) Owner permission assignments to notGroup ($scopeNamingSummary)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role Assignment</th>
<th>Obj Type</th>
<th>Obj DisplayName</th>
<th>Obj SignInName</th>
<th>ObjId</th>
<th>Impacted Mg/Sub</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityOwnerAssignmentNotGroup = $null
        $htmlSUMMARYSecurityOwnerAssignmentNotGroup = foreach ($roleAssignmentOwnerAssignmentNotGroup in ($roleAssignmentsOwnerAssignmentNotGroup)) {
            $impactedMgSubBaseQuery = $roleAssignmentsOwnerAssignmentNotGroupGrouped.where( { $_.Name -eq $roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentId })
            $impactedMgs = $impactedMgSubBaseQuery.Group.where( { [String]::IsNullOrEmpty($_.SubscriptionId) })
            $impactedSubs = $impactedMgSubBaseQuery.Group.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) })
            @"
<tr>
<td>$($roleAssignmentOwnerAssignmentNotGroup.RoleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($roleAssignmentOwnerAssignmentNotGroup.RoleDefinitionId)</td>
<td class="breakwordall">$($roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentId)</td>
<td>$($roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentIdentityObjectType)</td>
<td>$($roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentIdentityDisplayname)</td>
<td class="breakwordall">$($roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentIdentitySignInName)</td>
<td class="breakwordall">$($roleAssignmentOwnerAssignmentNotGroup.RoleAssignmentIdentityObjectId)</td>
<td>Mg: $(($impactedMgs.mgid | Sort-Object -unique).count); Sub: $(($impactedSubs.subscriptionId | Sort-Object -unique).count)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityOwnerAssignmentNotGroup)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }

            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_3: 'multiple',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsOwnerAssignmentNotGroup).count) Owner permission assignments to notGroup ($scopeNamingSummary)</span></p>
"@)
    }
    $endSUMMARYSecurityOwnerAssignmentNotGroup = Get-Date
    Write-Host "   TenantSummary RoleAssignments security (owner notGroup) duration: $((NEW-TIMESPAN -Start $startSUMMARYSecurityOwnerAssignmentNotGroup -End $endSUMMARYSecurityOwnerAssignmentNotGroup).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYSecurityOwnerAssignmentNotGroup -End $endSUMMARYSecurityOwnerAssignmentNotGroup).TotalSeconds) seconds)"
    #endregion SUMMARYSecurityOwnerAssignmentNotGroup

    #region SUMMARYSecurityUserAccessAdministratorAssignmentNotGroup
    $startSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup = Get-Date
    Write-Host '  processing TenantSummary RoleAssignments security (userAccessAdministrator notGroup)'
    $roleAssignmentsUserAccessAdministratorAssignmentNotGroup = $rbacBaseQueryArrayListNotGroupUserAccessAdministrator | Sort-Object -Property RoleAssignmentId -Unique
    $roleAssignmentsUserAccessAdministratorAssignmentNotGroupGrouped = ($rbacBaseQueryArrayListNotGroupUserAccessAdministrator | Group-Object -property roleassignmentId)

    if (($roleAssignmentsUserAccessAdministratorAssignmentNotGroup).count -gt 0) {
        $tfCount = ($roleAssignmentsUserAccessAdministratorAssignmentNotGroup).count
        $htmlTableId = 'TenantSummary_roleAssignmentsUserAccessAdministratorAssignmentNotGroup'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_roleAssignmentsUserAccessAdministratorAssignmentNotGroup"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsUserAccessAdministratorAssignmentNotGroup).count) UserAccessAdministrator permission assignments to notGroup ($scopeNamingSummary)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role Assignment</th>
<th>Obj Type</th>
<th>Obj DisplayName</th>
<th>Obj SignInName</th>
<th>ObjId</th>
<th>Impacted Mg/Sub</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup = $null
        $htmlSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup = foreach ($roleAssignmentUserAccessAdministratorAssignmentNotGroup in ($roleAssignmentsUserAccessAdministratorAssignmentNotGroup)) {
            $impactedMgSubBaseQuery = $roleAssignmentsUserAccessAdministratorAssignmentNotGroupGrouped.where( { $_.Name -eq $roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentId })
            $impactedMgs = $impactedMgSubBaseQuery.Group.where( { [String]::IsNullOrEmpty($_.SubscriptionId) })
            $impactedSubs = $impactedMgSubBaseQuery.Group.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) })
            @"
<tr>
<td>$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleDefinitionId)</td>
<td class="breakwordall">$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentId)</td>
<td>$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentIdentityObjectType)</td>
<td>$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentIdentityDisplayname)</td>
<td class="breakwordall">$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentIdentitySignInName)</td>
<td class="breakwordall">$($roleAssignmentUserAccessAdministratorAssignmentNotGroup.RoleAssignmentIdentityObjectId)</td>
<td>Mg: $(($impactedMgs.mgid | Sort-Object -unique).count); Sub: $(($impactedSubs.subscriptionId | Sort-Object -unique).count)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_3: 'multiple',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$(($roleAssignmentsUserAccessAdministratorAssignmentNotGroup).count) UserAccessAdministrator permission assignments to notGroup ($scopeNamingSummary)</span></p>
"@)
    }
    $endSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup = Get-Date
    Write-Host "   TenantSummary RoleAssignments security (userAccessAdministrator notGroup) duration: $((NEW-TIMESPAN -Start $startSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup -End $endSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup -End $endSUMMARYSecurityUserAccessAdministratorAssignmentNotGroup).TotalSeconds) seconds)"
    #endregion SUMMARYSecurityUserAccessAdministratorAssignmentNotGroup

    #region SUMMARYSecurityGuestUserHighPriviledgesAssignments

    $startSUMMARYSecurityGuestUserHighPriviledgesAssignments = Get-Date
    Write-Host '  processing TenantSummary RoleAssignments security (high priviledged Guest User)'
    $highPriviledgedGuestUserRoleAssignments = $rbacAll.where( { ($_.RoleId -eq '8e3af657-a8ff-443c-a75c-2fe8c4bcb635' -or $_.RoleId -eq '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9') -and $_.ObjectType -eq 'User Guest' }) | Sort-Object -property RoleAssignmentId, ObjectId -Unique
    $highPriviledgedGuestUserRoleAssignmentsCount = ($highPriviledgedGuestUserRoleAssignments).Count
    if ($highPriviledgedGuestUserRoleAssignmentsCount -gt 0) {
        $tfCount = $highPriviledgedGuestUserRoleAssignmentsCount
        $htmlTableId = 'TenantSummary_SecurityGuestUserHighPriviledgesAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SecurityGuestUserHighPriviledgesAssignments"><i class="padlx fa fa-exclamation-triangle yellow" aria-hidden="true"></i> <span class="valignMiddle">$($highPriviledgedGuestUserRoleAssignmentsCount) Guest Users with high permissions ($scopeNamingSummary)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Role Assignment</th>
<th>Obj Type</th>
<th>Obj DisplayName</th>
<th>Obj SignInName</th>
<th>ObjId</th>
<th>Assignment direct/indirect</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSecurityGuestUserHighPriviledgesAssignments = $null
        $htmlSUMMARYSecurityGuestUserHighPriviledgesAssignments = foreach ($highPriviledgedGuestUserRoleAssignment in ($highPriviledgedGuestUserRoleAssignments)) {
            if ($highPriviledgedGuestUserRoleAssignment.AssignmentType -eq 'indirect') {
                $assignmentInfo = "indirect / AAD Group Membership '$($highPriviledgedGuestUserRoleAssignment.AssignmentInheritFrom)'"
            }
            else {
                $assignmentInfo = 'direct'
            }
            @"
<tr>
<td>$($highPriviledgedGuestUserRoleAssignment.Role <#-replace "<", "&lt;" -replace ">", "&gt;"#>)</td>
<td>$($highPriviledgedGuestUserRoleAssignment.RoleId)</td>
<td class="breakwordall">$($highPriviledgedGuestUserRoleAssignment.RoleAssignmentId)</td>
<td>$($highPriviledgedGuestUserRoleAssignment.ObjectType)</td>
<td>$($highPriviledgedGuestUserRoleAssignment.ObjectDisplayName)</td>
<td class="breakwordall">$($highPriviledgedGuestUserRoleAssignment.ObjectSignInName)</td>
<td class="breakwordall">$($highPriviledgedGuestUserRoleAssignment.ObjectId)</td>
<td>$assignmentInfo</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSecurityGuestUserHighPriviledgesAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$($highPriviledgedGuestUserRoleAssignmentsCount) Guest Users with high permissions ($scopeNamingSummary)</span></p>
"@)
    }
    $endSUMMARYSecurityGuestUserHighPriviledgesAssignments = Get-Date
    Write-Host "   TenantSummary RoleAssignments security (high priviledged Guest User) duration: $((NEW-TIMESPAN -Start $startSUMMARYSecurityGuestUserHighPriviledgesAssignments -End $endSUMMARYSecurityGuestUserHighPriviledgesAssignments).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYSecurityGuestUserHighPriviledgesAssignments -End $endSUMMARYSecurityGuestUserHighPriviledgesAssignments).TotalSeconds) seconds)"
    #endregion SUMMARYSecurityGuestUserHighPriviledgesAssignments


    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)
    #endregion tenantSummaryRBAC

    showMemoryUsage

    #region tenantSummaryBlueprints
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummaryBlueprints"><hr class="hr-textBlueprints" data-content="Blueprints" /></button>
<div class="content TenantSummaryContent">
'@)

    #region SUMMARYBlueprintDefinitions
    Write-Host '  processing TenantSummary Blueprints'
    $blueprintDefinitions = ($blueprintBaseQuery | Where-Object { [String]::IsNullOrEmpty($_.BlueprintAssignmentId) })
    $blueprintDefinitionsCount = ($blueprintDefinitions).count
    if ($blueprintDefinitionsCount -gt 0) {
        $htmlTableId = 'TenantSummary_BlueprintDefinitions'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_BlueprintDefinitions"><p><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> $blueprintDefinitionsCount Blueprint definitions</p></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th class="widthCustom">Blueprint Name</th>
<th>Blueprint DisplayName</th>
<th>Blueprint Description</th>
<th>BlueprintId</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYBlueprintDefinitions = $null
        $htmlSUMMARYBlueprintDefinitions = foreach ($blueprintDefinition in $blueprintDefinitions | Sort-Object -Property BlueprintName, BlueprintDisplayName) {
            @"
<tr>
<td>$($blueprintDefinition.BlueprintName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYBlueprintDefinitions)
        [void]$htmlTenantSummary.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
            <p><i class="padlx fa fa-ban" aria-hidden="true"></i> $blueprintDefinitionsCount Blueprint definitions</p>
"@)
    }
    #endregion SUMMARYBlueprintDefinitions

    #region SUMMARYBlueprintAssignments
    Write-Host '  processing TenantSummary BlueprintAssignments'
    $blueprintAssignments = ($blueprintBaseQuery | Where-Object { -not [String]::IsNullOrEmpty($_.BlueprintAssignmentId) })
    $blueprintAssignmentsCount = ($blueprintAssignments).count

    if ($blueprintAssignmentsCount -gt 0) {
        $htmlTableId = 'TenantSummary_BlueprintAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_BlueprintAssignments"><p><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> $blueprintAssignmentsCount Blueprint assignments</p></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th class="widthCustom">Blueprint Name</th>
<th>Blueprint DisplayName</th>
<th>Blueprint Description</th>
<th>BlueprintId</th>
<th>Blueprint Version</th>
<th>Blueprint AssignmentId</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYBlueprintAssignments = $null
        $htmlSUMMARYBlueprintAssignments = foreach ($blueprintAssignment in $blueprintAssignments | Sort-Object -Property level, BlueprintAssignmentId) {
            @"
<tr>
<td>$($blueprintAssignment.BlueprintName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssignment.BlueprintDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssignment.BlueprintDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssignment.BlueprintId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintAssignment.BlueprintAssignmentVersion)</td>
<td>$($blueprintAssignment.BlueprintAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYBlueprintAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
                </tbody>
            </table>
        </div>
        <script>
            function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
                window.helpertfConfig4$htmlTableId =1;
                var tfConfig4$htmlTableId = {
                base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
                col_types: [
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring',
                    'caseinsensitivestring'
                ],
extensions: [{ name: 'sort' }]
            };
            var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
            tf.init();}}
        </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
            <p><i class="padlx fa fa-ban" aria-hidden="true"></i> $blueprintAssignmentsCount Blueprint assignments</p>
"@)
    }
    #endregion SUMMARYBlueprintAssignments

    #region SUMMARYBlueprintsOrphaned
    Write-Host '  processing TenantSummary Blueprint definitions orphaned'
    $blueprintDefinitionsOrphanedArray = @()
    if ($blueprintDefinitionsCount -gt 0) {
        if ($blueprintAssignmentsCount -gt 0) {
            $blueprintDefinitionsOrphanedArray += foreach ($blueprintDefinition in $blueprintDefinitions) {
                if (($blueprintAssignments.BlueprintId) -notcontains ($blueprintDefinition.BlueprintId)) {
                    $blueprintDefinition
                }
            }
        }
        else {
            $blueprintDefinitionsOrphanedArray += foreach ($blueprintDefinition in $blueprintDefinitions) {
                $blueprintDefinition
            }
        }
    }
    $blueprintDefinitionsOrphanedCount = ($blueprintDefinitionsOrphanedArray).count

    if ($blueprintDefinitionsOrphanedCount -gt 0) {

        $htmlTableId = 'TenantSummary_BlueprintsOrphaned'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_BlueprintsOrphaned"><p><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> $blueprintDefinitionsOrphanedCount Orphaned Blueprints</p></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th class="widthCustom">Blueprint Name</th>
<th>Blueprint DisplayName</th>
<th>Blueprint Description</th>
<th>BlueprintId</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYBlueprintsOrphaned = $null
        $htmlSUMMARYBlueprintsOrphaned = foreach ($blueprintDefinition in $blueprintDefinitionsOrphanedArray | Sort-Object -Property BlueprintId) {
            @"
<tr>
<td>$($blueprintDefinition.BlueprintName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($blueprintDefinition.BlueprintId -replace '<', '&lt;' -replace '>', '&gt;')</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYBlueprintsOrphaned)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
                <p><i class="padlx fa fa-ban" aria-hidden="true"></i> $blueprintDefinitionsOrphanedCount Orphaned Blueprint definitions</p>
"@)
    }
    #endregion SUMMARYBlueprintsOrphaned

    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)
    #endregion tenantSummaryBlueprints

    showMemoryUsage

    #region tenantSummaryManagementGroups
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummaryManagementGroups"><hr class="hr-textManagementGroups" data-content="Management Groups" /></button>
<div class="content TenantSummaryContent">
'@)

    #region SUMMARYMGs
    $startSUMMARYMGs = Get-Date
    Write-Host '  processing TenantSummary ManagementGroups'

    $summaryManagementGroups = $optimizedTableForPathQueryMg | Sort-Object -Property Level, mgid, mgParentId
    $summaryManagementGroupsCount = ($summaryManagementGroups).Count
    if ($summaryManagementGroupsCount -gt 0) {
        $tfCount = $summaryManagementGroupsCount
        $htmlTableId = 'TenantSummary_ManagementGroups'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_Subs"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">$($summaryManagementGroupsCount) Management Groups</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Level</th>
<th>ManagementGroup</th>
<th>ManagementGroup Id</th>
<th>Mg children (total)</th>
<th>Mg children (direct)</th>
<th>Sub children (total)</th>
<th>Sub children (direct)</th>
"@)
        if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
<th>MG MDfC Score</th>
'@)
        }
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            [void]$htmlTenantSummary.AppendLine(@"
<th>Cost ($($AzureConsumptionPeriod)d)</th>
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
<th>Path</th>
</tr>
</thead>
<tbody>
'@)
        $htmlSUMMARYManagementGroups = $null
        $cnter = 0
        $htmlSUMMARYManagementGroups = foreach ($summaryManagementGroup in $summaryManagementGroups) {

            $mgPath = $htManagementGroupsMgPath.($summaryManagementGroup.mgId).pathDelimited

            if ($summaryManagementGroup.mgid -eq $mgSubPathTopMg -and ($azAPICallConf['checkContext']).Tenant.Id -ne $ManagementGroupId) {
                $pathhlper = "$($mgPath)"
                $arrayTotalCostSummaryMgSummary = 'n/a'
                $mgAllChildMgsCountTotal = 'n/a'
                $mgAllChildMgsCountDirect = 'n/a'
                $mgAllChildSubscriptionsCountTotal = 'n/a'
                $mgAllChildSubscriptionsCountDirect = 'n/a'
                $mgSecureScore = 'n/a'
            }
            else {

                if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
                    if ($allConsumptionDataCount -gt 0) {
                        $arrayTotalCostSummaryMgSummary = @()
                        if ($htManagementGroupsCost.($summaryManagementGroup.mgid)) {
                            foreach ($currency in $htManagementGroupsCost.($summaryManagementGroup.mgid).currencies) {
                                $hlper = $htManagementGroupsCost.($summaryManagementGroup.mgid)
                                $totalCost = $hlper."mgTotalCost_$($currency)"
                                if ([math]::Round($totalCost, 2) -eq 0) {
                                    $totalCost = $totalCost.ToString('0.0000')
                                }
                                else {
                                    $totalCost = [math]::Round($totalCost, 2).ToString('0.00')
                                }
                                $totalCostGeneratedByResourceTypes = ($hlper."resourceTypesThatGeneratedCost_$($currency)").Count
                                $totalCostGeneratedByResources = $hlper."resourcesThatGeneratedCost_$($currency)"
                                $totalCostGeneratedBySubscriptions = $hlper."subscriptionsThatGeneratedCost_$($currency)"
                                $arrayTotalCostSummaryMgSummary += "$($totalCost) $($currency) generated by $($totalCostGeneratedByResources) Resources ($($totalCostGeneratedByResourceTypes) ResourceTypes) in $($totalCostGeneratedBySubscriptions) Subscriptions"
                            }
                        }
                        else {
                            $arrayTotalCostSummaryMgSummary = 'no consumption data available'
                        }
                    }
                    else {
                        $arrayTotalCostSummaryMgSummary = 'no consumption data available'
                    }
                }
                $pathhlper = "<a href=`"#hierarchy_$($summaryManagementGroup.mgId)`"><i class=`"fa fa-eye`" aria-hidden=`"true`"></i></a> $($mgPath)"

                #childrenMgInfo
                $mgAllChildMgs = [System.Collections.ArrayList]@()
                foreach ($entry in $htManagementGroupsMgPath.keys) {
                    if (($htManagementGroupsMgPath.($entry).path) -contains $($summaryManagementGroup.mgid)) {
                        $null = $mgAllChildMgs.Add($entry)
                    }
                }
                $mgAllChildMgsCountTotal = (($mgAllChildMgs).Count - 1)
                $mgAllChildMgsCountDirect = $htMgDetails.($summaryManagementGroup.mgid).mgChildrenCount

                $mgAllChildSubscriptions = [System.Collections.ArrayList]@()
                $mgDirectChildSubscriptions = [System.Collections.ArrayList]@()
                foreach ($entry in $htSubscriptionsMgPath.keys) {
                    if (($htSubscriptionsMgPath.($entry).path) -contains $($summaryManagementGroup.mgid)) {
                        $null = $mgAllChildSubscriptions.Add($entry)
                    }
                    if (($htSubscriptionsMgPath.($entry).parent) -eq $($summaryManagementGroup.mgid)) {
                        $null = $mgDirectChildSubscriptions.Add($entry)
                    }
                }

                $mgAllChildSubscriptionsCountTotal = (($mgAllChildSubscriptions).Count)
                $mgAllChildSubscriptionsCountDirect = (($mgDirectChildSubscriptions).Count)

                if ($htMgASCSecureScore.($summaryManagementGroup.mgId).SecureScore) {
                    if ([string]::IsNullOrEmpty($htMgASCSecureScore.($summaryManagementGroup.mgId).SecureScore) -or [string]::IsNullOrWhiteSpace($htMgASCSecureScore.($summaryManagementGroup.mgId).SecureScore)) {
                        $mgSecureScore = 'n/a'
                    }
                    else {
                        $mgSecureScore = $htMgASCSecureScore.($summaryManagementGroup.mgId).SecureScore
                    }
                }
                else {
                    $mgSecureScore = 'n/a'
                }
            }

            @"
<tr>
<td>$($summaryManagementGroup.level)</td>
<td>$($summaryManagementGroup.mgName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($summaryManagementGroup.mgId)</td>
<td>$($mgAllChildMgsCountTotal)</td>
<td>$($mgAllChildMgsCountDirect)</td>
<td>$($mgAllChildSubscriptionsCountTotal)</td>
<td>$($mgAllChildSubscriptionsCountDirect)</td>
"@
            if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
                @"
<td>$($mgSecureScore)</td>
"@
            }
            if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
                @"
<td>$($arrayTotalCostSummaryMgSummary -join ', ')</td>
"@
            }
            @"
<td>$($pathhlper)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYManagementGroups)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'select',
            col_types: [
                'number',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number',
                'number',
                'number',
                'number',
'@)
        if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring',
'@)
        }
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring',
'@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">$($summaryManagementGroupsCount) Management Groups</span></p>
"@)
    }
    $endSUMMARYMGs = Get-Date
    Write-Host "   SUMMARYMGs duration: $((NEW-TIMESPAN -Start $startSUMMARYMGs -End $endSUMMARYMGs).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYMGs -End $endSUMMARYMGs).TotalSeconds) seconds)"
    #endregion SUMMARYMGs

    #region SUMMARYMGdefault
    Write-Host '  processing TenantSummary ManagementGroups - default Management Group'
    [void]$htmlTenantSummary.AppendLine(@"
    <p><img class="padlx imgSubTree defaultMG" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">Hierarchy Settings | Default Management Group Id: '<b>$($defaultManagementGroupId)</b>' <a class="externallink" href="https://docs.microsoft.com/en-us/azure/governance/management-groups/how-to/protect-resource-hierarchy#setting---default-management-group" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></span></p>
"@)
    #endregion SUMMARYMGdefault

    #region SUMMARYMGRequireAuthorizationForGroupCreation
    Write-Host '  processing TenantSummary ManagementGroups - requireAuthorizationForGroupCreation Management Group'
    [void]$htmlTenantSummary.AppendLine(@"
    <p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">Hierarchy Settings | Require authorization for Management Group creation: '<b>$($requireAuthorizationForGroupCreation)</b>' <a class="externallink" href="https://docs.microsoft.com/en-us/azure/governance/management-groups/how-to/protect-resource-hierarchy#setting---require-authorization" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></span></p>
"@)
    #endregion SUMMARYMGRequireAuthorizationForGroupCreation

    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)
    #endregion tenantSummaryManagementGroups

    showMemoryUsage

    #region tenantSummarySubscriptionsResourceDefenderPSRule
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummarySubscriptions"><hr class="hr-textSubscriptions" data-content="Subscriptions, Resources & Defender" /></button>
<div class="content TenantSummaryContent">
'@)

    #region SUMMARYSubs
    Write-Host '  processing TenantSummary Subscriptions'
    $summarySubscriptions = $optimizedTableForPathQueryMgAndSub | Sort-Object -Property Subscription
    $summarySubscriptionsCount = ($summarySubscriptions).Count
    if ($summarySubscriptionsCount -gt 0) {
        $tfCount = $summarySubscriptionsCount
        $htmlTableId = 'TenantSummary_subs'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_Subs"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle">$($summarySubscriptionsCount) Subscriptions (state: enabled)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Supported Microsoft Azure offers</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/cost-management-billing/costs/understand-cost-mgt-data#supported-microsoft-azure-offers" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Understand Microsoft Defender for Cloud Secure Score</span> <a class="externallink" href="https://www.youtube.com/watch?v=2EMnzxdqDhA" target="_blank" rel="noopener">Video <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://techcommunity.microsoft.com/t5/azure-security-center/security-controls-in-azure-security-center-enable-endpoint/ba-p/1624653" target="_blank" rel="noopener">Blog <i class="fa fa-external-link" aria-hidden="true"></i></a>, <a class="externallink" href="https://docs.microsoft.com/en-us/azure/security-center/secure-score-security-controls#how-your-secure-score-is-calculated" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>QuotaId</th>
<th>Role assignment limit</th>
<th>Tags</th>
<th>Sub MDfC Score</th>
"@)
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            [void]$htmlTenantSummary.AppendLine(@"
<th>Cost ($($AzureConsumptionPeriod)d)</th>
<th>Currency</th>
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
<th>Path</th>
</tr>
</thead>
<tbody>
'@)
        $htmlSUMMARYSubs = $null
        $htmlSUMMARYSubs = foreach ($summarySubscription in $summarySubscriptions) {
            $subPath = $htSubscriptionsMgPath.($summarySubscription.subscriptionId).pathDelimited
            $subscriptionTagsArray = [System.Collections.ArrayList]@()
            foreach ($tag in ($htSubscriptionTags).($summarySubscription.subscriptionId).keys) {
                $null = $subscriptionTagsArray.Add("'$($tag)':'$(($htSubscriptionTags).$($summarySubscription.subscriptionId).$tag)'")
            }

            if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
                if ($htAzureConsumptionSubscriptions.($summarySubscription.subscriptionId)) {
                    if ([math]::Round($htAzureConsumptionSubscriptions.($summarySubscription.subscriptionId).TotalCost, 2) -eq 0) {
                        $totalCost = $htAzureConsumptionSubscriptions.($summarySubscription.subscriptionId).TotalCost.ToString('0.0000')
                    }
                    else {
                        $totalCost = (([math]::Round($htAzureConsumptionSubscriptions.($summarySubscription.subscriptionId).TotalCost, 2))).ToString('0.00')
                    }
                    $currency = $htAzureConsumptionSubscriptions.($summarySubscription.subscriptionId).Currency
                }
                else {
                    $totalCost = '0'
                    $currency = 'n/a'
                }
            }
            else {
                $totalCost = 'n/a'
                $currency = 'n/a'
            }
            @"
<tr>
<td>$($summarySubscription.subscription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($summarySubscription.MgId)">$($summarySubscription.subscriptionId)</a></span></td>
<td>$($summarySubscription.SubscriptionQuotaId)</td>
<td>$($htSubscriptionsRoleAssignmentLimit.($summarySubscription.subscriptionId))</td>
<td>$(($subscriptionTagsArray | Sort-Object) -join "$CsvDelimiterOpposite ")</td>
<td>$($summarySubscription.SubscriptionASCSecureScore)</td>
"@
            if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
                @"
<td>$totalCost</td>
<td>$currency</td>
"@
            }
            @"
<td><a href="#hierarchySub_$($summarySubscription.MgId)"><i class="fa fa-eye" aria-hidden="true"></i></a> $subPath</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubs)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_2: 'select',
            col_3: 'select',
'@)
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            [void]$htmlTenantSummary.AppendLine(@'
            col_6: 'select',
'@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number',
                'caseinsensitivestring',
                'number',
'@)
        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            [void]$htmlTenantSummary.AppendLine(@'
                'number',
                'caseinsensitivestring',
'@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle">$($summarySubscriptionsCount) Subscriptions</span></p>
"@)
    }
    #endregion SUMMARYSubs

    #region SUMMARYOutOfScopeSubscriptions
    Write-Host '  processing TenantSummary Subscriptions (out-of-scope)'
    $outOfScopeSubscriptionsCount = ($outOfScopeSubscriptions).Count
    if ($outOfScopeSubscriptionsCount -gt 0) {
        $tfCount = $outOfScopeSubscriptionsCount
        $htmlTableId = 'TenantSummary_outOfScopeSubscriptions'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_outOfScopeSubscriptions"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg"> <span class="valignMiddle">$outOfScopeSubscriptionsCount Subscriptions out-of-scope</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription Name</th>
<th>SubscriptionId</th>
<th>out-of-scope reason</th>
<th>Management Group</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYOutOfScopeSubscriptions = $null
        $htmlSUMMARYOutOfScopeSubscriptions = foreach ($outOfScopeSubscription in $outOfScopeSubscriptions) {
            @"
<tr>
<td>$($outOfScopeSubscription.SubscriptionName)</td>
<td>$($outOfScopeSubscription.SubscriptionId)</td>
<td>$($outOfScopeSubscription.outOfScopeReason)</td>
<td><a href="#hierarchy_$($outOfScopeSubscription.ManagementGroupId)"><i class="fa fa-eye" aria-hidden="true"></i></a> $($outOfScopeSubscription.ManagementGroupName -replace '<', '&lt;' -replace '>', '&gt;') ($($outOfScopeSubscription.ManagementGroupId))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYOutOfScopeSubscriptions)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,

"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg"> <span class="valignMiddle">$outOfScopeSubscriptionsCount Subscriptions out-of-scope</span></p>
"@)
    }
    #endregion SUMMARYOutOfScopeSubscriptions

    #region SUMMARYTagNameUsage
    Write-Host '  processing TenantSummary TagsUsage'
    $tagsUsageCount = ($arrayTagList).Count
    if ($tagsUsageCount -gt 0) {
        $tagNamesUniqueCount = ($arrayTagList | Sort-Object -Property TagName -Unique).Count
        $tagNamesUsedInScopes = ($arrayTagList.where( { $_.Scope -ne 'AllScopes' }) | Sort-Object -Property Scope -Unique).scope -join "$($CsvDelimiterOpposite) "
        $tfCount = $tagsUsageCount
        $htmlTableId = 'TenantSummary_tagsUsage'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_tagsUsage"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Tag Name Usage ($tagNamesUniqueCount unique Tag Names applied at $($tagNamesUsedInScopes))</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Resource naming and tagging decision guide</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/resource-tagging" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>TagName</th>
<th>Count</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYtagsUsage = $null
        $htmlSUMMARYtagsUsage = foreach ($tagEntry in $arrayTagList | Sort-Object -Property Scope, TagName -CaseSensitive) {
            @"
<tr>
<td>$($tagEntry.Scope)</td>
<td>$($tagEntry.TagName)</td>
<td>$($tagEntry.TagCount)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYtagsUsage)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,

"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_0: 'multiple',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> Tag Name Usage ($tagsUsageCount Tags) <a class="externallink" href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/resource-tagging" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYTagNameUsage

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #region SUMMARYResources
        $startSUMMARYResources = Get-Date
        Write-Host '  processing TenantSummary Subscriptions Resources'
        if (($resourcesAll).count -gt 0) {
            $resourcesAllGroupedByType = $resourcesAll | Select-Object -Property type, count_ | Group-Object type
            $resourcesTotal = ($resourcesAll.count_ | Measure-Object -Sum).Sum
            $resourcesResourceTypeCount = ($resourcesAll.type | Sort-Object -Unique).Count

            if ($resourcesResourceTypeCount -gt 0) {
                $tfCount = ($resourcesAllGroupedByType | Measure-Object).Count
                $htmlTableId = 'TenantSummary_resources'
                [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_resources"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resources ($resourcesResourceTypeCount ResourceTypes) ($resourcesTotal Resources) ($scopeNamingSummary)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ResourceType</th>
<th>Resource Count</th>
</tr>
</thead>
<tbody>
"@)
                $htmlSUMMARYResources = $null
                $htmlSUMMARYResources = foreach ($resourceAllSummarized in $resourcesAllGroupedByType) {
                    $type = $resourceAllSummarized.Name
                    $script:htDailySummary."ResourceType_$($resourceAllSummarized.Name)" = ($resourceAllSummarized.group.count_ | Measure-Object -Sum).Sum
                    @"
<tr>
<td>$($type)</td>
<td>$(($resourceAllSummarized.group.count_ | Measure-Object -Sum).Sum)</td>
</tr>
"@

                }
                [void]$htmlTenantSummary.AppendLine($htmlSUMMARYResources)
                [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'number'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@"
        <p><i class="padlx fa fa-ban" aria-hidden="true"></i> Resources ($resourcesResourceTypeCount ResourceTypes)</p>
"@)
            }

        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> Resources (0 ResourceTypes)</p>
'@)
        }
        $endSUMMARYResources = Get-Date
        Write-Host "   SUMMARY Resources processing duration: $((NEW-TIMESPAN -Start $startSUMMARYResources -End $endSUMMARYResources).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYResources -End $endSUMMARYResources).TotalSeconds) seconds)"
        #endregion SUMMARYResources

        #region SUMMARYResourcesByLocation
        $startSUMMARYResources = Get-Date
        Write-Host '  processing TenantSummary Subscriptions Resources by Location'
        if (($resourcesAll | Measure-Object).count -gt 0) {
            $resourcesAllGroupedByTypeLocation = $resourcesAll | Select-Object -Property type, location, count_ | Group-Object type, location
            $resourcesTotal = ($resourcesAll.count_ | Measure-Object -Sum).Sum
            $resourcesResourceTypeCount = ($resourcesAll.type | Sort-Object -Unique).Count
            $resourcesLocationCount = ($resourcesAll.location | Sort-Object -Unique).Count

            if ($resourcesResourceTypeCount -gt 0) {
                $tfCount = ($resourcesAllGroupedByTypeLocation | Measure-Object).Count
                $htmlTableId = 'TenantSummary_resourcesByLocation'
                [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_resourcesByLocation"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resources byLocation ($resourcesResourceTypeCount ResourceTypes) ($resourcesTotal Resources) in $resourcesLocationCount Locations ($scopeNamingSummary)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ResourceType</th>
<th>Location</th>
<th>Resource Count</th>
</tr>
</thead>
<tbody>
"@)
                $htmlSUMMARYResources = $null
                $htmlSUMMARYResources = foreach ($resourceAllSummarized in $resourcesAllGroupedByTypeLocation) {
                    $typeLocation = $resourceAllSummarized.Name.Split(', ')
                    $type = $typeLocation[0]
                    $location = $typeLocation[1]
                    @"
<tr>
<td>$($type)</td>
<td>$($location)</td>
<td>$(($resourceAllSummarized.group.count_ | Measure-Object -Sum).Sum)</td>
</tr>
"@

                }
                [void]$htmlTenantSummary.AppendLine($htmlSUMMARYResources)
                [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'number'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@"
        <p><i class="padlx fa fa-ban" aria-hidden="true"></i> Resources ($resourcesResourceTypeCount ResourceTypes)</p>
"@)
            }

        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> Resources (0 ResourceTypes)</p>
'@)
        }
        $endSUMMARYResources = Get-Date
        Write-Host "   SUMMARY Resources ByLocation processing duration: $((NEW-TIMESPAN -Start $startSUMMARYResources -End $endSUMMARYResources).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYResources -End $endSUMMARYResources).TotalSeconds) seconds)"
        #endregion SUMMARYResourcesByLocation

        #region SUMMARYResourceFluctuation
        $startSUMMARYResourceFluctuation = Get-Date
        Write-Host '  processing TenantSummary Resource fluctuation'
        if (($arrayResourceFluctuationFinal).count -gt 0) {
            $resourceTypesCount = ($arrayResourceFluctuationFinal | Group-Object -Property ResourceType | Measure-Object).Count
            $addedCount = ($arrayResourceFluctuationFinal.where({$_.Event -eq 'Added'}).'Resource count' | Measure-Object -Sum).Sum
            $removedCount = ($arrayResourceFluctuationFinal.where({$_.Event -eq 'Removed'}).'Resource count' | Measure-Object -Sum).Sum

            $tfCount = ($arrayResourceFluctuationFinal).count
            $htmlTableId = 'TenantSummary_resourceFluctuation'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_resourceFluctuation"><i class="padlx fa fa-history" aria-hidden="true"></i> <span class="valignMiddle">Resource fluctuation - $resourceTypesCount Resource types (Resources: $addedCount added, $removedCount removed)</span>
</button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Event</th>
<th>ResourceType</th>
<th>Resource count</th>
<th>Subscription count</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYResourceFluctuation = $null
            $htmlSUMMARYResourceFluctuation = foreach ($entry in $arrayResourceFluctuationFinal | Sort-Object -Property ResourceType, Event) {
                @"
<tr>
<td>$($entry.Event)</td>
<td>$($entry.ResourceType)</td>
<td>$($entry.'Resource count')</td>
<td>$($entry.'Subscription count')</td>
</tr>
"@

            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYResourceFluctuation)
            [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_0: 'select',  
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'number',
            'number'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
                <p><i class="padlx fa fa-ban" aria-hidden="true"></i> No Resource fluctuation since last run</p>
'@)
        }
        $endSUMMARYResourceFluctuation = Get-Date
        Write-Host "   SUMMARY Resource fluctuation processing duration: $((NEW-TIMESPAN -Start $startSUMMARYResourceFluctuation -End $endSUMMARYResourceFluctuation).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYResourceFluctuation -End $endSUMMARYResourceFluctuation).TotalSeconds) seconds)"
        #endregion SUMMARYResourceFluctuation
    }

    #region SUMMARYOrphanedResources
    $startSUMMARYOrphanedResources = Get-Date
    Write-Host '  processing TenantSummary Orphaned Resources'
    if ($arrayOrphanedResources.count -gt 0) {
        $script:arrayOrphanedResourcesSlim = $arrayOrphanedResources | Sort-Object -Property type | Select-Object -Property type, subscriptionId, intent
        $arrayOrphanedResourcesGroupedByType = $arrayOrphanedResourcesSlim | Group-Object type
        $orphanedResourceTypesCount = ($arrayOrphanedResourcesGroupedByType | Measure-Object).Count

        $tfCount = $orphanedResourceTypesCount
        $htmlTableId = 'TenantSummary_orphanedResources'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_orphanedResources"><i class="padlx fa fa-trash-o" aria-hidden="true"></i> <span class="valignMiddle">Resources orphaned $($arrayOrphanedResources.count) ($orphanedResourceTypesCount ResourceTypes)</span>
</button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> 'Azure Orphan Resources' ARG queries and workbooks</span> <a class="externallink" href="https://github.com/dolevshor/azure-orphan-resources" target="_blank" rel="noopener">GitHub <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<span class="padlxx"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Resource details can be found in the CSV output *_ResourcesOrphaned.csv</span><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ResourceType</th>
<th>Resource count</th>
<th>Subscriptions count</th>
<th>Intent</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYOrphanedResources = $null
        $htmlSUMMARYOrphanedResources = foreach ($orphanedResourceType in $arrayOrphanedResourcesGroupedByType | Sort-Object -Property Name) {
            $script:htDailySummary."OrpanedResourceType_$($orphanedResourceType.Name)" = ($orphanedResourceType.count)
            @"
<tr>
<td>$($orphanedResourceType.Name)</td>
<td>$($orphanedResourceType.count)</td>
<td>$(($orphanedResourceType.Group.SubscriptionId | Sort-Object -Unique).Count)</td>
<td>$($orphanedResourceType.Group[0].Intent)</td>
</tr>
"@

        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYOrphanedResources)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_3: 'select',        
        col_types: [
            'caseinsensitivestring',
            'number',
            'number',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> No Resources orphaned</p>
'@)
    }
    $endSUMMARYOrphanedResources = Get-Date
    Write-Host "   SUMMARY Orphaned Resources processing duration: $((NEW-TIMESPAN -Start $startSUMMARYOrphanedResources -End $endSUMMARYOrphanedResources).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYOrphanedResources -End $endSUMMARYOrphanedResources).TotalSeconds) seconds)"
    #endregion SUMMARYOrphanedResources

    #region SUMMARYSubResourceProviders
    $startSUMMARYSubResourceProviders = Get-Date
    Write-Host '  processing TenantSummary Subscriptions Resource Providers'
    $resourceProvidersAllCount = (($htResourceProvidersAll).Keys | Measure-Object).count
    if ($resourceProvidersAllCount -gt 0) {
        $grped = (($htResourceProvidersAll).values.Providers) | Sort-Object -property namespace, registrationState | Group-Object namespace
        $htResProvSummary = @{}
        foreach ($grp in $grped) {
            $htResProvSummary.($grp.name) = @{}
            $regstates = ($grp.group | Sort-Object -property registrationState -unique).registrationstate
            foreach ($regstate in $regstates) {
                $htResProvSummary.($grp.name).$regstate = (($grp.group).where( { $_.registrationstate -eq $regstate }) | measure-object).count
            }
        }
        $providerSummary = [System.Collections.ArrayList]@()
        foreach ($provider in $htResProvSummary.keys) {
            $hlperProvider = $htResProvSummary.$provider
            if ($hlperProvider.registered) {
                $registered = $hlperProvider.registered
            }
            else {
                $registered = '0'
            }

            if ($hlperProvider.registering) {
                $registering = $hlperProvider.registering
            }
            else {
                $registering = '0'
            }

            if ($hlperProvider.notregistered) {
                $notregistered = $hlperProvider.notregistered
            }
            else {
                $notregistered = '0'
            }

            if ($hlperProvider.unregistering) {
                $unregistering = $hlperProvider.unregistering
            }
            else {
                $unregistering = '0'
            }

            $null = $providerSummary.Add([PSCustomObject]@{
                    Provider      = $provider
                    Registered    = $registered
                    NotRegistered = $notregistered
                    Registering   = $registering
                    Unregistering = $unregistering
                })
        }

        $uniqueNamespaces = (($htResourceProvidersAll).values.Providers) | Sort-Object -Property namespace -Unique
        $uniqueNamespacesCount = ($uniqueNamespaces | Measure-Object).count
        $uniqueNamespaceRegistrationState = (($htResourceProvidersAll).values.Providers) | Sort-Object -Property namespace, registrationState -Unique
        $providersRegistered = ($uniqueNamespaceRegistrationState.where( { $_.registrationState -eq 'registered' -or $_.registrationState -eq 'registering' }) | Sort-Object namespace -Unique).namespace
        $providersRegisteredCount = ($providersRegistered | Measure-Object).count

        $providersNotRegisteredUniqueCount = 0
        foreach ($uniqueNamespace in $uniqueNamespaces) {
            if ($providersRegistered -notcontains ($uniqueNamespace.namespace)) {
                $providersNotRegisteredUniqueCount++
            }
        }
        $tfCount = $uniqueNamespacesCount
        $htmlTableId = 'TenantSummary_SubResourceProviders'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubResourceProviders"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resource Providers Total: $uniqueNamespacesCount Registered/Registering: $providersRegisteredCount NotRegistered/Unregistering: $providersNotRegisteredUniqueCount</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Provider</th>
<th>Registered</th>
<th>Registering</th>
<th>NotRegistered</th>
<th>Unregistering</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubResourceProviders = $null
        $htmlSUMMARYSubResourceProviders = foreach ($provider in ($providerSummary | Sort-Object -Property Provider)) {
            @"
<tr>
<td>$($provider.Provider)</td>
<td>$($provider.Registered)</td>
<td>$($provider.Registering)</td>
<td>$($provider.NotRegistered)</td>
<td>$($provider.Unregistering)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubResourceProviders)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'number',
                'number',
                'number',
                'number'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$resourceProvidersAllCount Resource Providers</span></p>
"@)
    }
    $endSUMMARYSubResourceProviders = Get-Date
    Write-Host "   TenantSummary Subscriptions Resource Providers duration: $((NEW-TIMESPAN -Start $startSUMMARYSubResourceProviders -End $endSUMMARYSubResourceProviders).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYSubResourceProviders -End $endSUMMARYSubResourceProviders).TotalSeconds) seconds)"
    #endregion SUMMARYSubResourceProviders

    #region SUMMARYSubResourceProvidersDetailed
    if ($azAPICallConf['htParameters'].NoResourceProvidersDetailed -eq $false) {

        Write-Host '  processing TenantSummary Subscriptions Resource Providers detailed'
        $startsumRPDetailed = Get-Date
        $resourceProvidersAllCount = (($htResourceProvidersAll).Keys).count
        if ($resourceProvidersAllCount -gt 0) {
            $tfCount = ($htResourceProvidersAll).values.Providers.Count
            if ($tfCount -lt $HtmlTableRowsLimit) {
                $htmlTableId = 'TenantSummary_SubResourceProvidersDetailed'
                [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubResourceProvidersDetailed"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resource Providers Detailed</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Subscription MG path
<th>Provider</th>
<th>State</th>
</tr>
</thead>
<tbody>
"@)

            }
            else {
                Write-Host "   !Skipping TenantSummary ResourceProvidersDetailed HTML processing as $tfCount lines is exceeding the critical rows limit of $HtmlTableRowsLimit" -ForegroundColor Yellow
            }
            $cnter = 0
            $startResProvDetailed = Get-Date
            $htmlSUMMARYSubResourceProvidersDetailed = $null

            $arrayResourceProvidersDetailedForCSVExport = [System.Collections.ArrayList]@()
            $htmlSUMMARYSubResourceProvidersDetailed = foreach ($subscriptionResProv in (($htResourceProvidersAll).Keys | Sort-Object)) {
                $subscriptionResProvDetails = $htSubscriptionsMgPath.($subscriptionResProv)
                foreach ($provider in ($htResourceProvidersAll).($subscriptionResProv).Providers | Sort-Object @{Expression = { $_.namespace } }) {
                    $cnter++
                    if ($cnter % 1000 -eq 0) {
                        $etappeResProvDetailed = Get-Date
                        Write-Host "   $cnter ResProv processed; $((NEW-TIMESPAN -Start $startResProvDetailed -End $etappeResProvDetailed).TotalSeconds) seconds"
                    }

                    #array for exportCSV
                    if (-not $NoCsvExport) {
                        $null = $arrayResourceProvidersDetailedForCSVExport.Add([PSCustomObject]@{
                                Subscription       = $subscriptionResProvDetails.DisplayName
                                SubscriptionId     = $subscriptionResProv
                                SubscriptionMGpath = $subscriptionResProvDetails.pathDelimited
                                Provider           = $provider.namespace
                                State              = $provider.registrationState
                            })
                    }

                    @"
<tr>
<td>$($subscriptionResProvDetails.DisplayName)</td>
<td>$($subscriptionResProv)</td>
<td>$($subscriptionResProvDetails.pathDelimited)</td>
<td>$($provider.namespace)</td>
<td>$($provider.registrationState)</td>
</tr>
"@
                }
            }

            #region exportCSV
            if (-not $NoCsvExport) {
                $csvFilename = "$($filename)_ResourceProviders"
                Write-Host "   Exporting ResourceProviders CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
                $arrayResourceProvidersDetailedForCSVExport | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
                $arrayResourceProvidersDetailedForCSVExport = $null
            }
            #endregion exportCSV

            if ($tfCount -lt $HtmlTableRowsLimit) {
                [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubResourceProvidersDetailed)
                [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,

"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_4: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@"
            <button type="button" class="collapsible" id="buttonTenantSummary_SubResourceProvidersDetailed"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resource Providers Detailed</span></button>
                <div class="content TenantSummary padlxx">
                    <i class="fa fa-exclamation-triangle orange" aria-hidden="true"></i><span style="color:#ff0000"> Output of $tfCount lines would exceed the html rows limit of $HtmlTableRowsLimit (html file potentially would become unresponsive). Work with the CSV file <i>$($csvFilename).csv</i> | Note: the CSV file will only exist if you did NOT use parameter <i>-NoCsvExport</i></span><br>
                    <span style="color:#ff0000">You can adjust the html row limit by using parameter <i>-HtmlTableRowsLimit</i></span><br>
                    <span style="color:#ff0000">Check the parameters documentation</span> <a class="externallink" href="https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting#parameters" target="_blank" rel="noopener">AzGovViz docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
                </div>
"@)
            }
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$resourceProvidersAllCount Resource Providers</span></p>
"@)
        }
        $endsumRPDetailed = Get-Date
        Write-Host "   RP detailed processing duration: $((NEW-TIMESPAN -Start $startsumRPDetailed -End $endsumRPDetailed).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startsumRPDetailed -End $endsumRPDetailed).TotalSeconds) seconds)"
    }
    #endregion SUMMARYSubResourceProvidersDetailed

    #region SUMMARYSubFeatures
    Write-Host '  processing TenantSummary Subscriptions Features'
    $startSubFeatures = Get-Date
    $subFeaturesAllCount = $arrayFeaturesAll.count
    if ($subFeaturesAllCount -gt 0) {

        #region exportCSV
        if (-not $NoCsvExport) {
            $csvFilename = "$($filename)_SubscriptionsFeatures"
            Write-Host "   Exporting SubscriptionsFeatures CSV '$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv'"
            ($arrayFeaturesAll | Select-Object -ExcludeProperty mgPathArray | Sort-Object -Property feature) | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($csvFilename).csv" -Delimiter $csvDelimiter -Encoding utf8 -NoTypeInformation
        }
        #endregion exportCSV

        $subFeaturesGroupedByFeature = $arrayFeaturesAll | Group-Object -property feature
        $tfCount = ($subFeaturesGroupedByFeature | Measure-Object).Count
        $htmlTableId = 'TenantSummary_SubFeatures'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubFeatures"><i class="padlx fa fa-cube" aria-hidden="true"></i> <span class="valignMiddle">$tfCount enabled Subscriptions Features</span></button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Set up preview features in Azure subscription</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/preview-features" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Feature</th>
<th>Subscriptions</th>
</tr>
</thead>
<tbody>
"@)

        
        $cnter = 0
        $startResProvDetailed = Get-Date
        $htmlSUMMARYSubFeatures = $null
        $htmlSUMMARYSubFeatures = foreach ($feature in $subFeaturesGroupedByFeature | Sort-Object -Property name) {
            @"
<tr>
<td>$($feature.name)</td>
<td>$($feature.Count)</td>
</tr>
"@
        }

        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubFeatures)
        [void]$htmlTenantSummary.AppendLine(@"
            </tbody>
        </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,

"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'number'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)

    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No enabled Subscriptions Features</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/preview-features" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    $endSubFeatures = Get-Date
    Write-Host "   Subscriptions Features processing duration: $((NEW-TIMESPAN -Start $startSubFeatures -End $endSubFeatures).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSubFeatures -End $endSubFeatures).TotalSeconds) seconds)"
    #endregion SUMMARYSubFeatures

    #region SUMMARYSubResourceLocks
    Write-Host '  processing TenantSummary Subscriptions Resource Locks'
    $tfCount = 6
    $startResourceLocks = Get-Date

    if (($htResourceLocks.keys | Measure-Object).Count -gt 0) {
        $htmlTableId = 'TenantSummary_ResourceLocks'

        $subscriptionLocksCannotDeleteCount = ($htResourceLocks.Keys.where( { $htResourceLocks.($_).SubscriptionLocksCannotDeleteCount -gt 0 } )).Count
        $subscriptionLocksReadOnlyCount = ($htResourceLocks.Keys.where( { $htResourceLocks.($_).SubscriptionLocksReadOnlyCount -gt 0 } )).Count

        $resourceGroupsLocksCannotDeleteCount = ($htResourceLocks.Keys.where( { $htResourceLocks.($_).ResourceGroupsLocksCannotDeleteCount -gt 0 } )).Count
        $resourceGroupsLocksReadOnlyCount = ($htResourceLocks.Keys.where({ $htResourceLocks.($_).ResourceGroupsLocksReadOnlyCount -gt 0 } )).Count

        $resourcesLocksCannotDeleteCount = ($htResourceLocks.Keys.where( { $htResourceLocks.($_).ResourcesLocksCannotDeleteCount -gt 0 } )).Count
        $resourcesLocksReadOnlyCount = ($htResourceLocks.Keys.where( { $htResourceLocks.($_).ResourcesLocksReadOnlyCount -gt 0 } )).Count

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ResourceLocks"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resource Locks</span></button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Considerations before applying locks</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/lock-resources#considerations-before-applying-locks" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Lock scope</th>
<th>Lock type</th>
<th>presence</th>
</tr>
</thead>
<tbody>
<tr><td>Subscription</td><td>CannotDelete</td><td>$($subscriptionLocksCannotDeleteCount) of $totalSubCount Subscriptions</td></tr>
<tr><td>Subscription</td><td>ReadOnly</td><td>$($subscriptionLocksReadOnlyCount) of $totalSubCount Subscriptions</td></tr>
<tr><td>ResourceGroup</td><td>CannotDelete</td><td>$($resourceGroupsLocksCannotDeleteCount) of $totalSubCount Subscriptions (total: $(($htResourceLocks.Values.ResourceGroupsLocksCannotDeleteCount | Measure-Object -Sum).Sum))</td></tr>
<tr><td>ResourceGroup</td><td>ReadOnly</td><td>$($resourceGroupsLocksReadOnlyCount) of $totalSubCount Subscriptions (total: $(($htResourceLocks.Values.ResourceGroupsLocksReadOnlyCount | Measure-Object -Sum).Sum))</td></tr>
<tr><td>Resource</td><td>CannotDelete</td><td>$($resourcesLocksCannotDeleteCount) of $totalSubCount Subscriptions (total: $(($htResourceLocks.Values.ResourcesLocksCannotDeleteCount | Measure-Object -Sum).Sum))</td></tr>
<tr><td>Resource</td><td>ReadOnly</td><td>$($resourcesLocksReadOnlyCount) of $totalSubCount Subscriptions (total: $(($htResourceLocks.Values.ResourcesLocksReadOnlyCount | Measure-Object -Sum).Sum))</td></tr>
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_0: 'select',
            col_1: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No Resource Locks at all <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/lock-resources#considerations-before-applying-locks" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></span></p>
'@)
    }
    $endResourceLocks = Get-Date
    Write-Host "   ResourceLocks processing duration: $((NEW-TIMESPAN -Start $startResourceLocks -End $endResourceLocks).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startResourceLocks -End $endResourceLocks).TotalSeconds) seconds)"
    #endregion SUMMARYSubResourceLocks

    #SUMMARYSubDefenderPlansSubscriptionsSkipped
    if ($arrayDefenderPlansSubscriptionsSkipped.Count -gt 0) {
        #region SUMMARYSubDefenderPlansSubscriptionsSkipped
        Write-Host '  processing TenantSummary Subscriptions Microsoft Defender for Cloud plans SubscriptionsSkipped'

        $tfCount = $defenderPlansGroupedByPlanCount
        $startDefenderPlans = Get-Date

        $htmlTableId = 'TenantSummary_DefenderPlansSubscriptionsSkipped'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DefenderPlansSubscriptionsSkipped"><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">Microsoft Defender for Cloud plans - Subscriptions skipped</span></button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Register Resource Provider 'Microsoft.Security'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-providers-and-types#register-resource-provider" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Microsoft Defender for Cloud's enhanced security features</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/enhanced-security-features-overview" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription Name</th>
<th>Subscription Id</th>
<th>Subscription QuotaId</th>
<th>Subscription MG path</th>
<th>reason</th>
</tr>
</thead>
<tbody>
"@)

        foreach ($subscription in $arrayDefenderPlansSubscriptionsSkipped | Sort-Object -Property subscriptionName) {
            [void]$htmlTenantSummary.AppendLine(@"
                <tr>
                <td>$($subscription.subscriptionName)</td>
                <td>$($subscription.subscriptionId)</td>
                <td>$($subscription.subscriptionQuotaId)</td>
                <td>$($subscription.subscriptionMgPath)</td>
                <td>$($subscription.reason)</td>
                </tr>
"@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
            btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
            extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)

        $endDefenderPlans = Get-Date
        Write-Host "   Microsoft Defender for Cloud plans SubscriptionsSkipped processing duration: $((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalSeconds) seconds)"
        #endregion SUMMARYSubDefenderPlansSubscriptionsSkipped
    }

    #region SUMMARYSubDefenderPlansByPlan
    Write-Host '  processing TenantSummary Subscriptions Microsoft Defender for Cloud plans by plan'

    $tfCount = $defenderPlansGroupedByPlanCount
    $startDefenderPlans = Get-Date

    if ($defenderPlansGroupedByPlanCount -gt 0) {
        $htmlTableId = 'TenantSummary_DefenderPlans'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DefenderPlans"><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">Microsoft Defender for Cloud plans (by plan)</span></button>
<div class="content TenantSummary">
"@)

        if ($defenderPlanDeprecatedContainerRegistry) {
            [void]$htmlTenantSummary.AppendLine(@'
        <span class="padlxx"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Using deprecated plan 'Container registries'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
        }
        if ($defenderPlanDeprecatedKubernetesService) {
            [void]$htmlTenantSummary.AppendLine(@'
        <span class="padlxx"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>  Using deprecated plan 'Kubernetes'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Microsoft Defender for Cloud's enhanced security features</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/enhanced-security-features-overview" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Plan/Tier</th>
<th>Subscription Count</th>
</tr>
</thead>
<tbody>
"@)

        foreach ($defenderCapabilityAndTier in $defenderPlansGroupedByPlan | Sort-Object -Property Name) {
            if ($defenderCapabilityAndTier.Name -eq 'ContainerRegistry, Standard' -or $defenderCapabilityAndTier.Name -eq 'KubernetesService, Standard') {
                $thisDefenderPlan = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i> $($defenderCapabilityAndTier.Name)"
            }
            else {
                $thisDefenderPlan = $defenderCapabilityAndTier.Name
            }
            [void]$htmlTenantSummary.AppendLine(@"
                <tr>
                <td>$($thisDefenderPlan)</td>
                <td>$($defenderCapabilityAndTier.Count)</td>
                </tr>
"@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
            btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'number'
            ],
            extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">No Microsoft Defender for Cloud plans at all</span></p>
'@)
    }
    $endDefenderPlans = Get-Date
    Write-Host "   Microsoft Defender for Cloud plans by plan processing duration: $((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalSeconds) seconds)"
    #endregion SUMMARYSubDefenderPlansByPlan

    #region SUMMARYSubDefenderPlansBySubscription
    Write-Host '  processing TenantSummary Subscriptions Microsoft Defender for Cloud plans by Subscription'
    $tfCount = $subsDefenderPlansCount
    $startDefenderPlans = Get-Date

    if (($arrayDefenderPlans).Count -gt 0) {
        $htmlTableId = 'TenantSummary_DefenderPlansBySubscription'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DefenderPlansBySubscription"><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">Microsoft Defender for Cloud plans (by Subscription)</span></button>
<div class="content TenantSummary">
"@)

        if ($defenderPlanDeprecatedContainerRegistry) {
            [void]$htmlTenantSummary.AppendLine(@'
        <span class="padlxx"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Using deprecated plan 'Container registries'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
        }
        if ($defenderPlanDeprecatedKubernetesService) {
            [void]$htmlTenantSummary.AppendLine(@'
        <span class="padlxx"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>  Using deprecated plan 'Kubernetes'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/release-notes#microsoft-defender-for-containers-plan-released-for-general-availability-ga" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Microsoft Defender for Cloud's enhanced security features</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/defender-for-cloud/enhanced-security-features-overview" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Subscription MG path</th>
"@)

        foreach ($defenderCapability in $defenderCapabilities) {
            if (($defenderPlanDeprecatedContainerRegistry -and $defenderCapability -eq 'ContainerRegistry') -or ($defenderPlanDeprecatedKubernetesService -and $defenderCapability -eq 'KubernetesService')) {
                $thisDefenderCapability = "<i class=`"fa fa-exclamation-triangle`" aria-hidden=`"true`"></i> $($defenderCapability)"
            }
            else {
                $thisDefenderCapability = $defenderCapability
            }
            [void]$htmlTenantSummary.AppendLine(@"
            <th>$($thisDefenderCapability)</th>
"@)

        }

        [void]$htmlTenantSummary.AppendLine(@'
</tr>
</thead>
<tbody>
'@)

        foreach ($sub in $defenderPlansGroupedBySub) {
            $nameSplit = $sub.Name.split(', ')
            [void]$htmlTenantSummary.AppendLine(@"
            <tr>
            <td>$($nameSplit[0])</td>
            <td>$($nameSplit[1])</td>
            <td>$($nameSplit[2])</td>

"@)

            foreach ($plan in $sub.Group | Sort-Object -Property defenderPlan) {
                [void]$htmlTenantSummary.AppendLine(@"
                <td>$($plan.defenderPlanTier)</td>
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@'
            </tr>
'@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
'@)
        $cnt = 2
        foreach ($defenderCapability in $defenderCapabilities) {
            $cnt++
            [void]$htmlTenantSummary.AppendLine(@"
                    col_$($cnt): 'select',
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
'@)
        $cnt = 0
        foreach ($defenderCapability in $defenderCapabilities) {
            $cnt++
            if ($cnt -ne $defenderCapabilitiesCount) {
                [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring',
'@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring'
'@)
            }

        }
        [void]$htmlTenantSummary.AppendLine(@"
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">No Microsoft Defender for Cloud plans at all</span></p>
'@)
    }
    $endDefenderPlans = Get-Date
    Write-Host "   Microsoft Defender for Cloud plans by Subscription processing duration: $((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDefenderPlans -End $endDefenderPlans).TotalSeconds) seconds)"
    #endregion SUMMARYSubDefenderPlansBySubscription

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #region SUMMARYSubUserAssignedIdentities4Resources
        Write-Host '  processing TenantSummary Subscriptions UserAssigned Managed Identities assigned to Resources'
        $arrayUserAssignedIdentities4ResourcesCount = $arrayUserAssignedIdentities4Resources.Count
        $tfCount = $arrayUserAssignedIdentities4ResourcesCount
        $startUserAssignedIdentities4Resources = Get-Date

        if ($arrayUserAssignedIdentities4ResourcesCount -gt 0) {

            $script:htUserAssignedIdentitiesAssignedResources = @{}
            $script:htResourcesAssignedUserAssignedIdentities = @{}
            foreach ($entry in $arrayUserAssignedIdentities4Resources) {
                #UserAssignedIdentities
                if (-not $htUserAssignedIdentitiesAssignedResources.($entry.miPrincipalId)) {
                    $script:htUserAssignedIdentitiesAssignedResources.($entry.miPrincipalId) = @{}
                    $script:htUserAssignedIdentitiesAssignedResources.($entry.miPrincipalId).ResourcesCount = 1
                }
                else {
                    $script:htUserAssignedIdentitiesAssignedResources.($entry.miPrincipalId).ResourcesCount++
                }
                #Resources
                if (-not $htResourcesAssignedUserAssignedIdentities.(($entry.resourceId).tolower())) {
                    $script:htResourcesAssignedUserAssignedIdentities.(($entry.resourceId).tolower()) = @{}
                    $script:htResourcesAssignedUserAssignedIdentities.(($entry.resourceId).tolower()).UserAssignedIdentitiesCount = 1
                }
                else {
                    $script:htResourcesAssignedUserAssignedIdentities.(($entry.resourceId).tolower()).UserAssignedIdentitiesCount++
                }
            }

            $htmlTableId = 'TenantSummary_UserAssignedIdentities4Resources'

            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_UserAssignedIdentities4Resources"><i class="padlx fa fa-user-circle-o" aria-hidden="true"></i> <span class="valignMiddle">UserAssigned Managed Identities assigned to Resources / vice versa</span></button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Managed identity 'user-assigned' vs 'system-assigned'</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview#managed-identity-types" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>MI Name</th>
<th>MI MgPath</th>
<th>MI Subscription Name</th>
<th>MI Subscription Id</th>
<th>MI ResourceGroup</th>
<th>MI ResourceId</th>
<th>MI AAD SP objectId</th>
<th>MI AAD SP applicationId</th>
<th>MI count Res assignments</th>
<th class="uamiresaltbgc">Res Name</th>
<th class="uamiresaltbgc">Res Type</th>
<th class="uamiresaltbgc">Res MgPath</th>
<th class="uamiresaltbgc">Res Subscription Name</th>
<th class="uamiresaltbgc">Res Subscription Id</th>
<th class="uamiresaltbgc">Res ResourceGroup</th>
<th class="uamiresaltbgc">Res Id</th>
<th class="uamiresaltbgc">Res count assigned MIs</th>
"@)

            [void]$htmlTenantSummary.AppendLine(@'
</tr>
</thead>
<tbody>
'@)

            $userAssignedIdentities4Resources4CSVExport = [System.Collections.ArrayList]@()
            foreach ($miResEntry in $arrayUserAssignedIdentities4Resources | Sort-Object -Property miResourceId, resourceId) {
                [void]$htmlTenantSummary.AppendLine(@"
                    <tr>
                        <td>$($miResEntry.miResourceName)</td>
                        <td class="breakwordall">$($miResEntry.miMgPath)</td>
                        <td>$($miResEntry.miSubscriptionName)</td>
                        <td>$($miResEntry.miSubscriptionId)</td>
                        <td>$($miResEntry.miResourceGroupName)</td>
                        <td class="breakwordall">$($miResEntry.miResourceId)</td>
                        <td>$($miResEntry.miPrincipalId)</td>
                        <td>$($miResEntry.miClientId)</td>
                        <td>$($htUserAssignedIdentitiesAssignedResources.($miResEntry.miPrincipalId).ResourcesCount)</td>
                        <td>$($miResEntry.resourceName)</td>
                        <td class="breakwordall">$($miResEntry.resourceType)</td>
                        <td>$($miResEntry.resourceMgPath)</td>
                        <td>$($miResEntry.resourceSubscriptionName)</td>
                        <td>$($miResEntry.resourceSubscriptionId)</td>
                        <td>$($miResEntry.resourceResourceGroupName)</td>
                        <td class="breakwordall">$($miResEntry.resourceId)</td>
                        <td>$($htResourcesAssignedUserAssignedIdentities.(($miResEntry.resourceId).tolower()).UserAssignedIdentitiesCount)</td>
                    </tr>
"@)

                if (-not $NoCsvExport) {
                    $null = $userAssignedIdentities4Resources4CSVExport.Add([PSCustomObject]@{
                            MIName                = $miResEntry.miResourceName
                            MIMgPath              = $miResEntry.miMgPath
                            MISubscriptionName    = $miResEntry.miSubscriptionName
                            MISubscriptionId      = $miResEntry.miSubscriptionId
                            MIResourceGroup       = $miResEntry.miResourceGroupName
                            MIResourceId          = $miResEntry.miResourceId
                            MIAADSPObjectId       = $miResEntry.miPrincipalId
                            MIAADSPApplicationId  = $miResEntry.miClientId
                            MICountResAssignments = $htUserAssignedIdentitiesAssignedResources.($miResEntry.miPrincipalId).ResourcesCount
                            ResName               = $miResEntry.resourceName
                            ResType               = $miResEntry.resourceType
                            ResMgPath             = $miResEntry.resourceMgPath
                            ResSubscriptionName   = $miResEntry.resourceSubscriptionName
                            ResSubscriptionId     = $miResEntry.resourceSubscriptionId
                            ResResourceGroup      = $miResEntry.resourceResourceGroupName
                            ResId                 = $miResEntry.resourceId
                            ResCountAssignedMIs   = $htResourcesAssignedUserAssignedIdentities.(($miResEntry.resourceId).tolower()).UserAssignedIdentitiesCount
                        })
                }

            }

            if (-not $NoCsvExport) {
                Write-Host "Exporting UserAssignedIdentities4Resources CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_UserAssignedIdentities4Resources.csv'"
                $userAssignedIdentities4Resources4CSVExport | Sort-Object -Property miResourceId, resourceId | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_UserAssignedIdentities4Resources.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
            }

            [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_10: 'select',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'number'
            ],
            extensions: [{ name: 'colsVisibility', text: 'Columns: ', enable_tick_all: true },{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">No UserAssigned Managed Identities assigned to Resources / vice versa - at all</span></p>
'@)
        }
        $endUserAssignedIdentities4Resources = Get-Date
        Write-Host "   UserAssigned Managed Identities assigned to Resources processing duration: $((NEW-TIMESPAN -Start $startUserAssignedIdentities4Resources -End $endUserAssignedIdentities4Resources).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startUserAssignedIdentities4Resources -End $endUserAssignedIdentities4Resources).TotalSeconds) seconds)"
        #endregion SUMMARYSubUserAssignedIdentities4Resources

        #region SUMMARYPSRule
        if ($azAPICallConf['htParameters'].DoPSRule -eq $true) {
            $startPSRule = Get-Date
            Write-Host '  processing TenantSummary PSRule'
            $arrayPSRuleCount = $arrayPsRule.Count

            if ($arrayPSRuleCount -gt 0) {

                handlePSRuleData
                $grpPSRuleAll = $psRuleDataSelection | group-object -Property resourceType, pillar, category, severity, ruleId, result
                $tfCount = $grpPSRuleAll.Name.Count

                $htmlTableId = 'TenantSummary_PSRule'

                [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_PSRule"><i class="padlx fa fa-check-square-o" aria-hidden="true"></i> <span class="valignMiddle">$tfCount PSRule for Azure results</span></button>
<div class="content TenantSummary">
<span class="padlxx info"><i class="fa fa-lightbulb-o" aria-hidden="true"></i> Learn about </span> <a class="externallink" href="https://azure.github.io/PSRule.Rules.Azure" target="_blank" rel="noopener">PSRule for Azure <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Resource Type</th>
<th>Resource Count</th>
<th>Subscription Count</th>
<th>Pillar</th>
<th>Category</th>
<th>Severity</th>
<th>Rule</th>
<th>Recommendation</th>
<th>lnk</th>
<th>State</th>
</tr>
</thead>
<tbody>
"@)

                foreach ($result in $grpPSRuleAll | sort-Object -Property Name) {
                    $resultNameSplit = $result.Name.split(', ')
                    [void]$htmlTenantSummary.AppendLine(@"
                        <tr>
                            <td>$($resultNameSplit[0])</td>
                            <td>$($result.Group.Count)</td>
                            <td>$(($result.Group.subscriptionId | Sort-Object -Unique).Count)</td>
                            <td>$($resultNameSplit[1])</td>
                            <td>$($resultNameSplit[2])</td>
                            <td>$($resultNameSplit[3])</td>
                            <td>$(($result.Group[0].rule))</td>
                            <td>$(($result.Group[0].recommendation))</td>
                            <td><a href=`"$(($result.Group[0].link))`" target=`"_blank`"><i class="fa fa-external-link" aria-hidden="true"></i></a></td>
                            <td>$($resultNameSplit[5])</td>
                        </tr>
"@)

                }

                [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
<script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                if ($tfCount -gt 10) {
                    $spectrum = "10, $tfCount"
                    if ($tfCount -gt 50) {
                        $spectrum = "10, 25, 50, $tfCount"
                    }
                    if ($tfCount -gt 100) {
                        $spectrum = "10, 30, 50, 100, $tfCount"
                    }
                    if ($tfCount -gt 500) {
                        $spectrum = "10, 30, 50, 100, 250, $tfCount"
                    }
                    if ($tfCount -gt 1000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                    }
                    if ($tfCount -gt 2000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                    }
                    if ($tfCount -gt 3000) {
                        $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                    }
                    [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                }
                [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_3: 'select',
            col_4: 'select',
            col_5: 'select',
            col_9: 'select',
            col_types: [
                'caseinsensitivestring',
                'number',
                'number',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
            extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
</div>
"@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-shield" aria-hidden="true"></i> <span class="valignMiddle">No PSRule for Azure results</span></p>
'@)
            }
            $endPSRule = Get-Date
            Write-Host "   PSRule for Azure processing duration: $((NEW-TIMESPAN -Start $startPSRule -End $endPSRule).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPSRule -End $endPSRule).TotalSeconds) seconds)"
        }
        #endregion SUMMARYPSRule
    }

    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)
    #endregion tenantSummarySubscriptionsResourceDefenderPSRule

    showMemoryUsage

    #region tenantSummaryDiagnostics
    [void]$htmlTenantSummary.AppendLine(@'
    <button type="button" class="collapsible" id="tenantSummaryDiagnostics"><hr class="hr-textDiagnostics" data-content="Diagnostics" /></button>
    <div class="content TenantSummaryContent">
'@)

    [void]$htmlTenantSummary.AppendLine( @'
<p><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle"><b>Management Groups</b></span></p>
'@)

    #region SUMMARYDiagnosticsManagementGroups
    Write-Host '  processing TenantSummary Diagnostics Management Groups'

    #hasDiag
    if ($diagnosticSettingsMgCount -gt 0) {
        $tfCount = $diagnosticSettingsMgCount
        $htmlTableId = 'TenantSummary_DiagnosticsManagementGroups'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DiagnosticsManagementGroups"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$diagnosticSettingsMgManagementGroupsCount ($mgsDiagnosticsApplicableCount) Management Groups configured for Diagnostic settings ($diagnosticSettingsMgCount settings)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Management Group Diagnostic Settings - Create Or Update - REST API</span> <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Diagnostic setting</th>
<th>Inheritance</th>
<th>Inherited from</th>
<th>Target</th>
<th>TargetId</th>
"@)

        foreach ($logCategory in $diagnosticSettingsMgCategories) {
            [void]$htmlTenantSummary.AppendLine(@"
<th>$logCategory</th>
"@)
        }

        [void]$htmlTenantSummary.AppendLine(@'
</tr>
</thead>
<tbody>
'@)
        $htmlSUMMARYDiagnosticsManagementGroups = $null
        $htmlSUMMARYDiagnosticsManagementGroups = foreach ($entry in $diagnosticSettingsMg | Sort-Object -Property ScopeMgPath, DiagnosticsInheritedFrom, DiagnosticSettingName, DiagnosticTargetType, DiagnosticTargetId) {

            @"
<tr>
<td>$($entry.ScopeName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.ScopeId)</td>
<td>$($entry.DiagnosticSettingName)</td>
<td>$($entry.DiagnosticsInheritedOrnot)</td>
<td>$($entry.DiagnosticsInheritedFrom)</td>
<td>$($entry.DiagnosticTargetType)</td>
<td>$($entry.DiagnosticTargetId)</td>
"@
            foreach ($logCategory in $diagnosticSettingsMgCategories) {
                if ($entry.DiagnosticCategoriesHt.($logCategory)) {
                    @"
                    <td>$($entry.DiagnosticCategoriesHt.($logCategory))</td>
"@
                }
                else {
                    @'
                    <td>n/a</td>
'@
                }
            }
            @'
</tr>
'@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYDiagnosticsManagementGroups)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_3: 'select',
            col_5: 'select',
'@)
        $cnt = 6
        foreach ($logCategory in $diagnosticSettingsMgCategories) {
            $cnt++
            [void]$htmlTenantSummary.AppendLine(@"
                col_$($cnt): 'select',
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
'@)
        $cnt = 0
        foreach ($logCategory in $diagnosticSettingsMgCategories) {
            $cnt++
            if ($diagnosticSettingsMgCategories.Count -eq $cnt) {
                [void]$htmlTenantSummary.AppendLine(@'
                    'caseinsensitivestring'
'@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
                    'caseinsensitivestring',
'@)
            }
        }
        [void]$htmlTenantSummary.AppendLine(@"
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {

        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No Management Groups configured for Diagnostic settings</span> <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
    }

    #hasNoDiag
    if ($arrayMgsWithoutDiagnosticsCount -gt 0) {
        $tfCount = $arrayMgsWithoutDiagnosticsCount
        $htmlTableId = 'TenantSummary_NoDiagnosticsManagementGroups'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NoDiagnosticsManagementGroups"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$arrayMgsWithoutDiagnosticsCount Management Groups NOT configured for Diagnostic settings</span> <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Management Group Diagnostic Settings - Create Or Update - REST API</span> <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Management Group path</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNoDiagnosticsManagementGroups = $null
        $htmlSUMMARYNoDiagnosticsManagementGroups = foreach ($entry in $arrayMgsWithoutDiagnostics | Sort-Object -Property ScopeMgPath) {

            @"
<tr>
<td>$($entry.ScopeName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.ScopeId)</td>
<td>$($entry.ScopeMgPath)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNoDiagnosticsManagementGroups)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {

        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">All Management Groups are configured for Diagnostic settings</span> <a class="externallink" href="https://docs.microsoft.com/en-us/rest/api/monitor/managementgroupdiagnosticsettings/createorupdate" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
    }
    #endregion SUMMARYDiagnosticsManagementGroups

    #region subscriptions
    [void]$htmlTenantSummary.AppendLine( @'
<p><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle"><b>Subscriptions</b></span></p>
'@)

    #region SUMMARYDiagnosticsSubscriptions
    Write-Host '  processing TenantSummary Diagnostics Subscriptions'

    #hasDiag
    if ($diagnosticSettingsSubCount -gt 0) {
        $tfCount = $diagnosticSettingsSubCount
        $htmlTableId = 'TenantSummary_DiagnosticsSubscriptions'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DiagnosticsSubscriptions"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$diagnosticSettingsSubSubscriptionsCount Subscriptions configured for Diagnostic settings ($diagnosticSettingsSubCount settings)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Create diagnostic setting</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/quick-collect-activity-log-portal#create-diagnostic-setting" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Path</th>
<th>Diagnostic setting</th>
<th>Target</th>
<th>TargetId</th>
"@)

        foreach ($logCategory in $diagnosticSettingsSubCategories) {
            [void]$htmlTenantSummary.AppendLine(@"
<th>$logCategory</th>
"@)
        }

        [void]$htmlTenantSummary.AppendLine(@'
</tr>
</thead>
<tbody>
'@)
        $htmlSUMMARYDiagnosticsSubscriptions = $null
        $htmlSUMMARYDiagnosticsSubscriptions = foreach ($entry in $diagnosticSettingsSub | Sort-Object -Property ScopeName, DiagnosticTargetType, DiagnosticSettingName) {

            @"
<tr>
<td>$($entry.ScopeName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.ScopeId)</td>
<td><a href="#hierarchySub_$($entry.SubMgParent)"><i class="fa fa-eye" aria-hidden="true"></i></a> $($entry.ScopeMgPath)</td>
<td>$($entry.DiagnosticSettingName)</td>
<td>$($entry.DiagnosticTargetType)</td>
<td>$($entry.DiagnosticTargetId)</td>
"@
            foreach ($logCategory in $diagnosticSettingsSubCategories) {
                if ($entry.DiagnosticCategoriesHt.($logCategory)) {
                    @"
                    <td>$($entry.DiagnosticCategoriesHt.($logCategory))</td>
"@
                }
                else {
                    @'
                    <td>n/a</td>
'@
                }
            }
            @'
</tr>
'@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYDiagnosticsSubscriptions)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            linked_filters: true,
            col_4: 'select',
'@)
        $cnt = 5
        foreach ($logCategory in $diagnosticSettingsSubCategories) {
            $cnt++
            [void]$htmlTenantSummary.AppendLine(@"
                col_$($cnt): 'select',
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
'@)
        $cnt = 0
        foreach ($logCategory in $diagnosticSettingsSubCategories) {
            $cnt++
            if ($diagnosticSettingsSubCategories.Count -eq $cnt) {
                [void]$htmlTenantSummary.AppendLine(@'
                    'caseinsensitivestring'
'@)
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
                    'caseinsensitivestring',
'@)
            }
        }
        [void]$htmlTenantSummary.AppendLine(@"
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {

        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No Subscriptions configured for Diagnostic settings</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/quick-collect-activity-log-portal#create-diagnostic-setting" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
    }

    #hasNoDiag
    if ($diagnosticSettingsSubNoDiagCount -gt 0) {
        $tfCount = $diagnosticSettingsSubNoDiagCount
        $htmlTableId = 'TenantSummary_NoDiagnosticsSubscriptions'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NoDiagnosticsSubscriptions"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$diagnosticSettingsSubNoDiagCount Subscriptions NOT configured for Diagnostic settings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Create diagnostic setting</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/quick-collect-activity-log-portal#create-diagnostic-setting" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>Subscription Id</th>
<th>Subscription Mg path</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNoDiagnosticsSubscriptions = $null
        $htmlSUMMARYNoDiagnosticsSubscriptions = foreach ($entry in $diagnosticSettingsSubNoDiag | Sort-Object -Property ScopeMgPath) {

            @"
<tr>
<td>$($entry.ScopeName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.ScopeId)</td>
<td>$($entry.ScopeMgPath)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNoDiagnosticsSubscriptions)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {

        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">All Subscriptions are configured for Diagnostic settings</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/quick-collect-activity-log-portal#create-diagnostic-setting" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
'@)
    }
    #endregion SUMMARYDiagnosticsSubscriptions

    #endregion subscriptions

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #region resources
        [void]$htmlTenantSummary.AppendLine( @'
<p><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/10001-icon-service-All-Resources.svg"> <span class="valignMiddle"><b>Resources</b></span></p>
'@)

        #region SUMMARYResourcesDiagnosticsCapable
        Write-Host '  processing TenantSummary Diagnostics Resources Diagnostics Capable (1st party only)'
        $resourceTypesDiagnosticsArraySorted = $resourceTypesDiagnosticsArray | Sort-Object -Property ResourceType, ResourceCount, Metrics, Logs, LogCategories
        $resourceTypesDiagnosticsArraySortedCount = ($resourceTypesDiagnosticsArraySorted | measure-object).count
        $resourceTypesDiagnosticsMetricsTrueCount = ($resourceTypesDiagnosticsArray.where( { $_.Metrics -eq $True }) | Measure-Object).count
        $resourceTypesDiagnosticsLogsTrueCount = ($resourceTypesDiagnosticsArray.where( { $_.Logs -eq $True }) | Measure-Object).count
        $resourceTypesDiagnosticsMetricsLogsTrueCount = ($resourceTypesDiagnosticsArray.where( { $_.Metrics -eq $True -or $_.Logs -eq $True }) | Measure-Object).count
        if ($resourceTypesDiagnosticsArraySortedCount -gt 0) {
            $tfCount = $resourceTypesDiagnosticsArraySortedCount
            $htmlTableId = 'TenantSummary_ResourcesDiagnosticsCapable'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ResourcesDiagnosticsCapable"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">Resources (1st party) Diagnostics capable $resourceTypesDiagnosticsMetricsLogsTrueCount/$resourceTypesDiagnosticsArraySortedCount ResourceTypes ($resourceTypesDiagnosticsMetricsTrueCount Metrics, $resourceTypesDiagnosticsLogsTrueCount Logs)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Create Custom Policies for Azure ResourceTypes that support Diagnostics Logs and Metrics</span> <a class="externallink" href="https://github.com/JimGBritt/AzurePolicy/blob/master/AzureMonitor/Scripts/README.md#overview-of-create-azdiagpolicyps1" target="_blank" rel="noopener">Create-AzDiagPolicy <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Supported categories for Azure Resource Logs</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/platform/resource-logs-categories" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ResourceType</th>
<th>Resource Count</th>
<th>Diagnostics capable</th>
<th>Metrics</th>
<th>Logs</th>
<th>LogCategories</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYResourcesDiagnosticsCapable = $null
            $htmlSUMMARYResourcesDiagnosticsCapable = foreach ($resourceType in $resourceTypesDiagnosticsArraySorted) {
                if ($resourceType.Metrics -eq $true -or $resourceType.Logs -eq $true) {
                    $diagnosticsCapable = $true
                }
                else {
                    if ($resourceType.Metrics -eq 'n/a - resourcesMeanwhileDeleted' -or $resourceType.Logs -eq 'n/a - resourcesMeanwhileDeleted') {
                        $diagnosticsCapable = 'n/a'
                    }
                    else {
                        $diagnosticsCapable = $false
                    }
                }
                @"
<tr>
<td>$($resourceType.ResourceType)</td>
<td>$($resourceType.ResourceCount)</td>
<td>$diagnosticsCapable</td>
<td>$($resourceType.Metrics)</td>
<td>$($resourceType.Logs)</td>
<td>$($resourceType.LogCategories -join "$CsvDelimiterOpposite ")</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYResourcesDiagnosticsCapable)
            [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        linked_filters: true,
        col_2: 'select',
        col_3: 'select',
        col_4: 'select',
        col_types: [
            'caseinsensitivestring',
            'number',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
        }
        else {

            [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No Resources (1st party) Diagnostics capable</span></p>
'@)
        }
        #endregion SUMMARYResourcesDiagnosticsCapable

        #region SUMMARYDiagnosticsPolicyLifecycle
        if (-not $NoResourceDiagnosticsPolicyLifecycle) {
            Write-Host '  processing TenantSummary Diagnostics Resource Diagnostics Policy Lifecycle'
            $startsumDiagLifecycle = Get-Date

            if ($tenantCustomPoliciesCount -gt 0) {
                $policiesThatDefineDiagnostics = $tenantCustomPolicies.where( { $_.Type -eq 'custom' -and $_.Json.properties.policyrule.then.details.type -eq 'Microsoft.Insights/diagnosticSettings' -and $_.Json.properties.policyrule.then.details.deployment.properties.template.resources.type -match '/providers/diagnosticSettings' } )

                $policiesThatDefineDiagnosticsCount = ($policiesThatDefineDiagnostics).count
                if ($policiesThatDefineDiagnosticsCount -gt 0) {

                    $diagnosticsPolicyAnalysis = @()
                    $diagnosticsPolicyAnalysis = [System.Collections.ArrayList]@()
                    foreach ($policy in $policiesThatDefineDiagnostics) {

                        if (
                            (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.workspaceId -or
                            (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.eventHubAuthorizationRuleId -or
                            (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.storageAccountId
                        ) {
                            if ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.workspaceId) {
                                $diagnosticsDestination = 'LA'
                            }
                            if ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.eventHubAuthorizationRuleId) {
                                $diagnosticsDestination = 'EH'
                            }
                            if ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.storageAccountId) {
                                $diagnosticsDestination = 'SA'
                            }

                            if ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.logs ) {

                                $resourceType = ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).type -replace '/providers/diagnosticSettings')

                                $resourceTypeCountFromResourceTypesSummarizedArray = ($resourceTypesSummarizedArray.where( { $_.ResourceType -eq $resourceType })).ResourceCount
                                if ($resourceTypeCountFromResourceTypesSummarizedArray) {
                                    $resourceCount = $resourceTypeCountFromResourceTypesSummarizedArray
                                }
                                else {
                                    $resourceCount = '0'
                                }
                                $supportedLogs = $resourceTypesDiagnosticsArray | Where-Object { $_.ResourceType -eq ( (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).type -replace '/providers/diagnosticSettings') }

                                $diagnosticsLogCategoriesSupported = $supportedLogs.LogCategories
                                if (($supportedLogs | Measure-Object).count -gt 0) {
                                    $logsSupported = 'yes'
                                }
                                else {
                                    $logsSupported = 'no'
                                }

                                $roleDefinitionIdsArray = [System.Collections.ArrayList]@()
                                foreach ($roleDefinitionId in ($policy).Json.properties.policyrule.then.details.roleDefinitionIds) {
                                    if (($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/')) {
                                        $null = $roleDefinitionIdsArray.Add("<b>$(($htCacheDefinitionsRole).($roleDefinitionId -replace '.*/').Name)</b> ($($roleDefinitionId -replace '.*/'))")
                                    }
                                    else {
                                        Write-Host "  DiagnosticsLifeCycle: unknown RoleDefinition '$roleDefinitionId'"
                                        $null = $roleDefinitionIdsArray.Add("unknown RoleDefinition: '$roleDefinitionId'")
                                    }
                                }

                                $policyHasPolicyAssignments = $policyBaseQuery | Where-Object { $_.PolicyDefinitionId -eq $policy.Id } | Sort-Object -property PolicyDefinitionId, PolicyAssignmentId -unique
                                $policyHasPolicyAssignmentCount = ($policyHasPolicyAssignments | Measure-Object).count
                                if ($policyHasPolicyAssignmentCount -gt 0) {
                                    $policyAssignmentsArray = @()
                                    $policyAssignmentsArray += foreach ($policyAssignment in $policyHasPolicyAssignments) {
                                        "$($policyAssignment.PolicyAssignmentId) (<b>$($policyAssignment.PolicyAssignmentDisplayName)</b>)"
                                    }
                                    $policyAssignmentsCollCount = ($policyAssignmentsArray).count
                                    $policyAssignmentsColl = $policyAssignmentsCollCount
                                }
                                else {
                                    $policyAssignmentsColl = 0
                                }

                                #PolicyUsedinPolicySet
                                $policySetAssignmentsColl = 0
                                $policySetAssignmentsArray = @()
                                $policyUsedinPolicySets = 'n/a'

                                $usedInPolicySetArray = [System.Collections.ArrayList]@()
                                foreach ($customPolicySet in $tenantCustomPolicySets) {
                                    if ($customPolicySet.Type -eq 'Custom') {
                                        $hlpCustomPolicySet = ($customPolicySet)
                                        if (($hlpCustomPolicySet.PolicySetPolicyIds) -contains ($policy.Id)) {
                                            $null = $usedInPolicySetArray.Add("$($hlpCustomPolicySet.Id) (<b>$($hlpCustomPolicySet.DisplayName)</b>)")

                                            #PolicySetHasAssignments
                                            $policySetAssignments = ($htCacheAssignmentsPolicy).Values.where( { $_.Assignment.properties.policyDefinitionId -eq ($hlpCustomPolicySet.Id) } )
                                            $policySetAssignmentsCount = ($policySetAssignments).count
                                            if ($policySetAssignmentsCount -gt 0) {
                                                $policySetAssignmentsArray += foreach ($policySetAssignment in $policySetAssignments) {
                                                    "$(($policySetAssignment.Assignment.id).Tolower()) (<b>$($policySetAssignment.Assignment.properties.displayName)</b>)"
                                                }
                                                $policySetAssignmentsCollCount = ($policySetAssignmentsArray).Count
                                                $policySetAssignmentsColl = "$policySetAssignmentsCollCount [$($policySetAssignmentsArray -join "$CsvDelimiterOpposite ")]"
                                            }

                                        }
                                    }
                                }

                                if (($usedInPolicySetArray | Measure-Object).count -gt 0) {
                                    $policyUsedinPolicySets = "$(($usedInPolicySetArray | Measure-Object).count) [$($usedInPolicySetArray -join "$CsvDelimiterOpposite ")]"
                                }
                                else {
                                    $policyUsedinPolicySets = "$(($usedInPolicySetArray | Measure-Object).count)"
                                }

                                if ($recommendation -eq 'review the policy and add the missing categories as required') {
                                    if ($policyAssignmentsColl -gt 0 -or $policySetAssignmentsColl -gt 0) {
                                        $priority = '1-High'
                                    }
                                    else {
                                        $priority = '3-MediumLow'
                                    }
                                }
                                else {
                                    $priority = '4-Low'
                                }

                                $diagnosticsLogCategoriesCoveredByPolicy = (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.logs
                                if (($diagnosticsLogCategoriesCoveredByPolicy.category | Measure-Object).count -gt 0) {

                                    if (($supportedLogs | Measure-Object).count -gt 0) {
                                        $actionItems = @()
                                        $actionItems += foreach ($supportedLogCategory in $supportedLogs.LogCategories) {
                                            if ($diagnosticsLogCategoriesCoveredByPolicy.category -notcontains ($supportedLogCategory)) {
                                                $supportedLogCategory
                                            }
                                        }
                                        if (($actionItems | Measure-Object).count -gt 0) {
                                            $diagnosticsLogCategoriesNotCoveredByPolicy = $actionItems
                                            $recommendation = 'review the policy and add the missing categories as required'
                                        }
                                        else {
                                            $diagnosticsLogCategoriesNotCoveredByPolicy = 'all OK'
                                            $recommendation = 'no recommendation'
                                        }
                                    }
                                    else {
                                        $status = 'AzGovViz did not detect the resourceType'
                                        $diagnosticsLogCategoriesSupported = 'n/a'
                                        $diagnosticsLogCategoriesNotCoveredByPolicy = 'n/a'
                                        $recommendation = 'no recommendation as this resourceType seems not existing'
                                        $logsSupported = 'unknown'
                                    }

                                    $null = $diagnosticsPolicyAnalysis.Add([PSCustomObject]@{
                                            Priority                    = $priority
                                            PolicyId                    = ($policy).Id
                                            PolicyCategory              = ($policy).Category
                                            PolicyName                  = ($policy).DisplayName
                                            PolicyDeploysRoles          = $roleDefinitionIdsArray -join "$CsvDelimiterOpposite "
                                            PolicyForResourceTypeExists = $true
                                            ResourceType                = $resourceType
                                            ResourceTypeCount           = $resourceCount
                                            Status                      = $status
                                            LogsSupported               = $logsSupported
                                            LogCategoriesInPolicy       = ($diagnosticsLogCategoriesCoveredByPolicy.category | Sort-Object) -join "$CsvDelimiterOpposite "
                                            LogCategoriesSupported      = ($diagnosticsLogCategoriesSupported | Sort-Object) -join "$CsvDelimiterOpposite "
                                            LogCategoriesDelta          = ($diagnosticsLogCategoriesNotCoveredByPolicy | Sort-Object) -join "$CsvDelimiterOpposite "
                                            Recommendation              = $recommendation
                                            DiagnosticsTargetType       = $diagnosticsDestination
                                            PolicyAssignments           = $policyAssignmentsColl
                                            PolicyUsedInPolicySet       = $policyUsedinPolicySets
                                            PolicySetAssignments        = $policySetAssignmentsColl
                                        })

                                }
                                else {
                                    $status = 'no categories defined'
                                    $priority = '5-Low'
                                    $recommendation = 'Review the policy - the definition has key for categories, but there are none categories defined'
                                    $null = $diagnosticsPolicyAnalysis.Add([PSCustomObject]@{
                                            Priority                    = $priority
                                            PolicyId                    = ($policy).Id
                                            PolicyCategory              = ($policy).Category
                                            PolicyName                  = ($policy).DisplayName
                                            PolicyDeploysRoles          = $roleDefinitionIdsArray -join "$CsvDelimiterOpposite "
                                            PolicyForResourceTypeExists = $true
                                            ResourceType                = $resourceType
                                            ResourceTypeCount           = $resourceCount
                                            Status                      = $status
                                            LogsSupported               = $logsSupported
                                            LogCategoriesInPolicy       = 'none'
                                            LogCategoriesSupported      = ($diagnosticsLogCategoriesSupported | Sort-Object) -join "$CsvDelimiterOpposite "
                                            LogCategoriesDelta          = ($diagnosticsLogCategoriesSupported | Sort-Object) -join "$CsvDelimiterOpposite "
                                            Recommendation              = $recommendation
                                            DiagnosticsTargetType       = $diagnosticsDestination
                                            PolicyAssignments           = $policyAssignmentsColl
                                            PolicyUsedInPolicySet       = $policyUsedinPolicySets
                                            PolicySetAssignments        = $policySetAssignmentsColl
                                        })
                                }
                            }
                            else {
                                if (-not (($policy).Json.properties.policyrule.then.details.deployment.properties.template.resources | Where-Object { $_.type -match '/providers/diagnosticSettings' }).properties.metrics ) {
                                    Write-Host "  DiagnosticsLifeCycle check?!: $($policy.DisplayName) ($($policy.Id)) - something unexpected, no Logs and no Metrics defined"
                                }
                            }
                        }
                        else {
                            Write-Host "   DiagnosticsLifeCycle check?!: $($policy.DisplayName) ($($policy.Id)) - something unexpected - not EH, LA, SA"
                        }
                    }
                    #where no Policy exists
                    foreach ($resourceTypeDiagnosticsCapable in $resourceTypesDiagnosticsArray | Where-Object { $_.Logs -eq $true }) {
                        if (($diagnosticsPolicyAnalysis.ResourceType).ToLower() -notcontains ( ($resourceTypeDiagnosticsCapable.ResourceType).ToLower() )) {
                            $supportedLogs = ($resourceTypesDiagnosticsArray | Where-Object { $_.ResourceType -eq $resourceTypeDiagnosticsCapable.ResourceType }).LogCategories
                            $logsSupported = 'yes'
                            $resourceTypeCountFromResourceTypesSummarizedArray = ($resourceTypesSummarizedArray | Where-Object { $_.ResourceType -eq $resourceTypeDiagnosticsCapable.ResourceType }).ResourceCount
                            if ($resourceTypeCountFromResourceTypesSummarizedArray) {
                                $resourceCount = $resourceTypeCountFromResourceTypesSummarizedArray
                            }
                            else {
                                $resourceCount = '0'
                            }
                            $recommendation = "Create diagnostics policy for this ResourceType. To verify GA check <a class=`"externallink`" href=`"https://docs.microsoft.com/en-us/azure/azure-monitor/platform/resource-logs-categories`" target=`"_blank`" rel=`"noopener`">docs <i class=`"fa fa-external-link`" aria-hidden=`"true`"></i></a>"
                            $null = $diagnosticsPolicyAnalysis.Add([PSCustomObject]@{
                                    Priority                    = '2-Medium'
                                    PolicyId                    = 'n/a'
                                    PolicyCategory              = 'n/a'
                                    PolicyName                  = 'n/a'
                                    PolicyDeploysRoles          = 'n/a'
                                    ResourceType                = $resourceTypeDiagnosticsCapable.ResourceType
                                    ResourceTypeCount           = $resourceCount
                                    Status                      = 'n/a'
                                    LogsSupported               = $logsSupported
                                    LogCategoriesInPolicy       = 'n/a'
                                    LogCategoriesSupported      = $supportedLogs -join "$CsvDelimiterOpposite "
                                    LogCategoriesDelta          = 'n/a'
                                    Recommendation              = $recommendation
                                    DiagnosticsTargetType       = 'n/a'
                                    PolicyForResourceTypeExists = $false
                                    PolicyAssignments           = 'n/a'
                                    PolicyUsedInPolicySet       = 'n/a'
                                    PolicySetAssignments        = 'n/a'
                                })
                        }
                    }
                    $diagnosticsPolicyAnalysisCount = ($diagnosticsPolicyAnalysis | Measure-Object).count

                    if ($diagnosticsPolicyAnalysisCount -gt 0) {
                        $tfCount = $diagnosticsPolicyAnalysisCount

                        $htmlTableId = 'TenantSummary_DiagnosticsLifecycle'
                        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_DiagnosticsLifecycle"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">ResourceDiagnostics for Logs - Policy Lifecycle recommendations</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Create Custom Policies for Azure ResourceTypes that support Diagnostics Logs and Metrics</span> <a class="externallink" href="https://github.com/JimGBritt/AzurePolicy/blob/master/AzureMonitor/Scripts/README.md#overview-of-create-azdiagpolicyps1" target="_blank" rel="noopener">Create-AzDiagPolicy <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Supported categories for Azure Resource Logs</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/platform/resource-logs-categories" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Priority</th>
<th>Recommendation</th>
<th>ResourceType</th>
<th>Resource Count</th>
<th>Diagnostics capable (logs)</th>
<th>Policy Id</th>
<th>Policy DisplayName</th>
<th>Role definitions</th>
<th>Target</th>
<th>Log Categories not covered by Policy</th>
<th>Policy assignments</th>
<th>Policy used in PolicySet</th>
<th>PolicySet assignments</th>
</tr>
</thead>
<tbody>
"@)

                        foreach ($diagnosticsFinding in $diagnosticsPolicyAnalysis | Sort-Object -property @{Expression = { $_.Priority } }, @{Expression = { $_.Recommendation } }, @{Expression = { $_.ResourceType } }, @{Expression = { $_.PolicyName } }, @{Expression = { $_.PolicyId } }) {
                            [void]$htmlTenantSummary.AppendLine(@"
            <tr>
                <td>
                    $($diagnosticsFinding.Priority)
                </td>
                <td>
                    $($diagnosticsFinding.Recommendation)
                </td>
                <td>
                    <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-monitor/platform/resource-logs-categories#$(($diagnosticsFinding.ResourceType -replace '\.','' -replace '/','').ToLower())" target="_blank" rel="noopener">$($diagnosticsFinding.ResourceType)</a>
                </td>
                <td>
                    $($diagnosticsFinding.ResourceTypeCount)
                </td>
                <td>
                    $($diagnosticsFinding.LogsSupported)
                </td>
                <td class="breakwordall">
                    $($diagnosticsFinding.PolicyId)
                </td>
                <td class="breakwordall">
                    $($diagnosticsFinding.PolicyName)
                </td>
                <td class="breakwordall">
                    $($diagnosticsFinding.PolicyDeploysRoles)
                </td>
                <td>
                    $($diagnosticsFinding.DiagnosticsTargetType)
                </td>
                <td>
                    $($diagnosticsFinding.LogCategoriesDelta)
                </td>
                <td>
                    $($diagnosticsFinding.PolicyAssignments)
                </td>
                <td class="breakwordall">
                    $($diagnosticsFinding.PolicyUsedInPolicySet)
                </td>
                <td class="breakwordall">
                    $($diagnosticsFinding.PolicySetAssignments)
                </td>
            </tr>
"@)
                        }
                        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
                        if ($tfCount -gt 10) {
                            $spectrum = "10, $tfCount"
                            if ($tfCount -gt 50) {
                                $spectrum = "10, 25, 50, $tfCount"
                            }
                            if ($tfCount -gt 100) {
                                $spectrum = "10, 30, 50, 100, $tfCount"
                            }
                            if ($tfCount -gt 500) {
                                $spectrum = "10, 30, 50, 100, 250, $tfCount"
                            }
                            if ($tfCount -gt 1000) {
                                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                            }
                            if ($tfCount -gt 2000) {
                                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                            }
                            if ($tfCount -gt 3000) {
                                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                            }

                            [void]$htmlTenantSummary.AppendLine(@"
            paging: {
                results_per_page: ['Records: ', [$spectrum]]
            },
            /*state: { types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
                        }
                        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_0: 'select',
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'number',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'number',
            'number',
            'number'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
                    }
                    else {
                        [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No ResourceDiagnostics Policy Lifecycle recommendations</span></p>
'@)
                    }
                }
                else {
                    [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No ResourceDiagnostics Policy Lifecycle recommendations</span></p>
'@)
                }
            }
            else {
                [void]$htmlTenantSummary.AppendLine(@'
    <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No ResourceDiagnostics Policy Lifecycle recommendations</span></p>
'@)
            }
            $endsumDiagLifecycle = Get-Date
            Write-Host "   Resource Diagnostics Policy Lifecycle processing duration: $((NEW-TIMESPAN -Start $startsumDiagLifecycle -End $endsumDiagLifecycle).TotalSeconds) seconds"
        }
        #endregion SUMMARYDiagnosticsPolicyLifecycle

        #endregion resources
    }

    [void]$htmlTenantSummary.AppendLine(@'
    </div>
'@)

    #endregion tenantSummaryDiagnostics

    showMemoryUsage

    #region tenantSummaryLimits
    [void]$htmlTenantSummary.AppendLine(@"
<button type="button" class="collapsible" id="tenantSummaryLimits"><hr class="hr-textLimits" data-content="Limits | $($LimitCriticalPercentage)%" /></button>
<div class="content TenantSummaryContent">
"@)

    #region tenantSummaryLimitsTenant
    [void]$htmlTenantSummary.AppendLine( @'
<p><i class="fa fa-home" aria-hidden="true"></i> <span class="valignMiddle"><b>Tenant</b></span></p>
'@)

    #policySets
    if ($tenantCustompolicySetsCount -gt (($LimitPOLICYPolicySetDefinitionsScopedTenant * $LimitCriticalPercentage) / 100)) {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> PolicySet definitions: $tenantCustompolicySetsCount/$LimitPOLICYPolicySetDefinitionsScopedTenant <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> PolicySet definitions: $tenantCustompolicySetsCount/$LimitPOLICYPolicySetDefinitionsScopedTenant <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }

    #CustomRoleDefinitions
    if ($tenantCustomRolesCount -gt (($LimitRBACCustomRoleDefinitionsTenant * $LimitCriticalPercentage) / 100)) {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> Custom Role definitions: $tenantCustomRolesCount/$LimitRBACCustomRoleDefinitionsTenant <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> Custom Role definitions: $tenantCustomRolesCount/$LimitRBACCustomRoleDefinitionsTenant <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }

    #endregion tenantSummaryLimitsTenant

    #region tenantSummaryLimitsManagementGroups
    [void]$htmlTenantSummary.AppendLine( @'
<p><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle"><b>Management Groups</b></span></p>
'@)

    #region SUMMARYMgsapproachingLimitsPolicyAssignments
    Write-Host '  processing TenantSummary ManagementGroups Limit PolicyAssignments'
    $mgsApproachingLimitPolicyAssignments = (($policyBaseQueryManagementGroups.where( { [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicyAndPolicySetAssignmentAtScopeCount -gt 0 -and (($_.PolicyAndPolicySetAssignmentAtScopeCount -gt ($LimitPOLICYPolicyAssignmentsManagementGroup * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, MgName, PolicyAssignmentAtScopeCount, PolicySetAssignmentAtScopeCount, PolicyAndPolicySetAssignmentAtScopeCount, PolicyAssignmentLimit -Unique)
    if (($mgsApproachingLimitPolicyAssignments | measure-object).count -gt 0) {
        $tfCount = ($mgsApproachingLimitPolicyAssignments | measure-object).count
        $htmlTableId = 'TenantSummary_MgsapproachingLimitsPolicyAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_MgsapproachingLimitsPolicyAssignments"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingLimitPolicyAssignments | measure-object).count) Management Groups approaching Limit ($LimitPOLICYPolicyAssignmentsManagementGroup) for PolicyAssignment</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYMgsapproachingLimitsPolicyAssignments = $null
        $htmlSUMMARYMgsapproachingLimitsPolicyAssignments = foreach ($mgApproachingLimitPolicyAssignments in $mgsApproachingLimitPolicyAssignments) {
            @"
<tr>
<td><span class="valignMiddle">$($mgApproachingLimitPolicyAssignments.MgName -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($mgApproachingLimitPolicyAssignments.MgId)">$($mgApproachingLimitPolicyAssignments.MgId)</a></span></td>
<td>$(($mgApproachingLimitPolicyAssignments.PolicyAndPolicySetAssignmentAtScopeCount/$LimitPOLICYPolicyAssignmentsManagementGroup).tostring('P')) ($($mgApproachingLimitPolicyAssignments.PolicyAndPolicySetAssignmentAtScopeCount)/$($LimitPOLICYPolicyAssignmentsManagementGroup)) ($($mgApproachingLimitPolicyAssignments.PolicyAssignmentAtScopeCount) Policy assignments, $($mgApproachingLimitPolicyAssignments.PolicySetAssignmentAtScopeCount) PolicySet assignments)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYMgsapproachingLimitsPolicyAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingLimitPolicyAssignments | measure-object).count) Management Groups approaching Limit ($LimitPOLICYPolicyAssignmentsManagementGroup) for PolicyAssignment</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYMgsapproachingLimitsPolicyAssignments

    #region SUMMARYMgsapproachingLimitsPolicyScope
    Write-Host '  processing TenantSummary ManagementGroups Limit PolicyScope'
    $mgsApproachingLimitPolicyScope = (($policyBaseQueryManagementGroups.where( { [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicyDefinitionsScopedCount -gt 0 -and (($_.PolicyDefinitionsScopedCount -gt ($LimitPOLICYPolicyDefinitionsScopedManagementGroup * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, MgName, PolicyDefinitionsScopedCount, PolicyDefinitionsScopedLimit -Unique)
    if (($mgsApproachingLimitPolicyScope | measure-object).count -gt 0) {
        $tfCount = ($mgsApproachingLimitPolicyScope | measure-object).count
        $htmlTableId = 'TenantSummary_MgsapproachingLimitsPolicyScope'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_MgsapproachingLimitsPolicyScope"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingLimitPolicyScope | measure-object).count) Management Groups approaching Limit ($LimitPOLICYPolicyDefinitionsScopedManagementGroup) for Policy Scope</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYMgsapproachingLimitsPolicyScope = $null
        $htmlSUMMARYMgsapproachingLimitsPolicyScope = foreach ($mgApproachingLimitPolicyScope in $mgsApproachingLimitPolicyScope) {
            @"
<tr>
<td><span class="valignMiddle">$($mgApproachingLimitPolicyScope.MgName -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($mgApproachingLimitPolicyScope.MgId)">$($mgApproachingLimitPolicyScope.MgId)</a></span></td>
<td>$(($mgApproachingLimitPolicyScope.PolicyDefinitionsScopedCount/$LimitPOLICYPolicyDefinitionsScopedManagementGroup).tostring('P')) $($mgApproachingLimitPolicyScope.PolicyDefinitionsScopedCount)/$($LimitPOLICYPolicyDefinitionsScopedManagementGroup)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYMgsapproachingLimitsPolicyScope)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$($mgsApproachingLimitPolicyScope.count) Management Groups approaching Limit ($LimitPOLICYPolicyDefinitionsScopedManagementGroup) for Policy Scope</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYMgsapproachingLimitsPolicyScope

    #region SUMMARYMgsapproachingLimitsPolicySetScope
    Write-Host '  processing TenantSummary ManagementGroups Limit PolicySetScope'
    $mgsApproachingLimitPolicySetScope = (($policyBaseQueryManagementGroups.where( { [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicySetDefinitionsScopedCount -gt 0 -and (($_.PolicySetDefinitionsScopedCount -gt ($LimitPOLICYPolicySetDefinitionsScopedManagementGroup * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, MgName, PolicySetDefinitionsScopedCount, PolicySetDefinitionsScopedLimit -Unique)
    if ($mgsApproachingLimitPolicySetScope.count -gt 0) {
        $tfCount = ($mgsApproachingLimitPolicySetScope | measure-object).count
        $htmlTableId = 'TenantSummary_MgsapproachingLimitsPolicySetScope'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_MgsapproachingLimitsPolicySetScope"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingLimitPolicySetScope | measure-object).count) Management Groups approaching Limit ($LimitPOLICYPolicySetDefinitionsScopedManagementGroup) for PolicySet Scope</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYMgsapproachingLimitsPolicySetScope = $null
        $htmlSUMMARYMgsapproachingLimitsPolicySetScope = foreach ($mgApproachingLimitPolicySetScope in $mgsApproachingLimitPolicySetScope) {
            @"
<tr>
<td><span class="valignMiddle">$($mgApproachingLimitPolicySetScope.MgName -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($mgApproachingLimitPolicySetScope.MgId)">$($mgApproachingLimitPolicySetScope.MgId)</a></span></td>
<td>$(($mgApproachingLimitPolicySetScope.PolicySetDefinitionsScopedCount/$LimitPOLICYPolicySetDefinitionsScopedManagementGroup).tostring('P')) ($($mgApproachingLimitPolicySetScope.PolicySetDefinitionsScopedCount)/$($LimitPOLICYPolicySetDefinitionsScopedManagementGroup))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYMgsapproachingLimitsPolicySetScope)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingLimitPolicySetScope | measure-object).count) Management Groups approaching Limit ($LimitPOLICYPolicySetDefinitionsScopedManagementGroup) for PolicySet Scope</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYMgsapproachingLimitsPolicySetScope

    #region SUMMARYMgsapproachingLimitsRoleAssignment
    Write-Host '  processing TenantSummary ManagementGroups Limit RoleAssignments'
    $mgsApproachingRoleAssignmentLimit = $rbacBaseQuery.where( { [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.RoleAssignmentsCount -gt ($LimitRBACRoleAssignmentsManagementGroup * $LimitCriticalPercentage / 100) }) | Sort-Object -Property MgId -Unique | select-object -Property MgId, MgName, RoleAssignmentsCount, RoleAssignmentsLimit

    if (($mgsApproachingRoleAssignmentLimit).count -gt 0) {
        $tfCount = ($mgsApproachingRoleAssignmentLimit).count
        $htmlTableId = 'TenantSummary_MgsapproachingLimitsRoleAssignment'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_MgsapproachingLimitsRoleAssignment"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($mgsApproachingRoleAssignmentLimit | measure-object).count) Management Groups approaching Limit ($LimitRBACRoleAssignmentsManagementGroup) for RoleAssignment</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure RBAC Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Management Group Name</th>
<th>Management Group Id</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYMgsapproachingLimitsRoleAssignment = $null
        $htmlSUMMARYMgsapproachingLimitsRoleAssignment = foreach ($mgApproachingRoleAssignmentLimit in $mgsApproachingRoleAssignmentLimit) {
            @"
<tr>
<td><span class="valignMiddle">$($mgApproachingRoleAssignmentLimit.MgName -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($mgApproachingRoleAssignmentLimit.MgId)">$($mgApproachingRoleAssignmentLimit.MgId)</a></span></td>
<td>$(($mgApproachingRoleAssignmentLimit.RoleAssignmentsCount/$LimitRBACRoleAssignmentsManagementGroup).tostring('P')) ($($mgApproachingRoleAssignmentLimit.RoleAssignmentsCount)/$($LimitRBACRoleAssignmentsManagementGroup))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYMgsapproachingLimitsRoleAssignment)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($mgApproachingRoleAssignmentLimit | measure-object).count) Management Groups approaching Limit ($LimitRBACRoleAssignmentsManagementGroup) for RoleAssignment</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYMgsapproachingLimitsRoleAssignment

    #endregion tenantSummaryLimitsManagementGroups

    #region tenantSummaryLimitsSubscriptions
    [void]$htmlTenantSummary.AppendLine( @'
<p><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle"><b>Subscriptions</b></span></p>
'@)

    #region SUMMARYSubsapproachingLimitsResourceGroups
    Write-Host '  processing TenantSummary Subscriptions Limit Resource Groups'
    $subscriptionsApproachingLimitFromResourceGroupsAll = $resourceGroupsAll.where( { $_.count_ -gt ($LimitResourceGroups * ($LimitCriticalPercentage / 100)) })
    if (($subscriptionsApproachingLimitFromResourceGroupsAll | measure-object).count -gt 0) {
        $tfCount = ($subscriptionsApproachingLimitFromResourceGroupsAll | measure-object).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsResourceGroups'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsResourceGroups"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitFromResourceGroupsAll | measure-object).count) Subscriptions approaching Limit ($LimitResourceGroups) for ResourceGroups</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Subscription Resource Group Limit</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#subscription-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsResourceGroups = $null
        $htmlSUMMARYSubsapproachingLimitsResourceGroups = foreach ($subscriptionApproachingLimitFromResourceGroupsAll in $subscriptionsApproachingLimitFromResourceGroupsAll) {
            $subscriptionData = $htSubDetails.($subscriptionApproachingLimitFromResourceGroupsAll.subscriptionId).details
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionData.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionData.MgId)">$($subscriptionData.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingLimitFromResourceGroupsAll.count_/$LimitResourceGroups).tostring('P')) ($($subscriptionApproachingLimitFromResourceGroupsAll.count_)/$($LimitResourceGroups))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsResourceGroups)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p"><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitFromResourceGroupsAll | measure-object).count) Subscriptions approaching Limit ($LimitResourceGroups) for ResourceGroups</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#subscription-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsResourceGroups

    #region SUMMARYSubsapproachingLimitsSubscriptionTags
    Write-Host '  processing TenantSummary Subscriptions Limit Subscription Tags'
    $subscriptionsApproachingLimitTags = ($optimizedTableForPathQueryMgAndSub.where( { (($_.SubscriptionTagsCount -gt ($LimitTagsSubscription * ($LimitCriticalPercentage / 100)))) }))
    if (($subscriptionsApproachingLimitTags | measure-object).count -gt 0) {
        $tfCount = ($subscriptionsApproachingLimitTags | measure-object).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsSubscriptionTags'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsSubscriptionTags"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitTags | measure-object).count) Subscriptions approaching Limit ($LimitTagsSubscription) for Tags</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Subscription Tag Limit</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#subscription-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsSubscriptionTags = $null
        $htmlSUMMARYSubsapproachingLimitsSubscriptionTags = foreach ($subscriptionApproachingLimitTags in $subscriptionsApproachingLimitTags) {
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionApproachingLimitTags.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionApproachingLimitTags.MgId)">$($subscriptionApproachingLimitTags.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingLimitTags.SubscriptionTagsCount/$LimitTagsSubscription).tostring('P')) ($($subscriptionApproachingLimitTags.SubscriptionTagsCount)/$($LimitTagsSubscription))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsSubscriptionTags)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$($subscriptionsApproachingLimitTags.count) Subscriptions approaching Limit ($LimitTagsSubscription) for Tags</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#subscription-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsSubscriptionTags

    #region SUMMARYSubsapproachingLimitsPolicyAssignments
    Write-Host '  processing TenantSummary Subscriptions Limit PolicyAssignments'
    $subscriptionsApproachingLimitPolicyAssignments = (($policyBaseQuerySubscriptions.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicyAndPolicySetAssignmentAtScopeCount -gt 0 -and (($_.PolicyAndPolicySetAssignmentAtScopeCount -gt ($_.PolicyAssignmentLimit * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, Subscription, SubscriptionId, PolicyAssignmentAtScopeCount, PolicySetAssignmentAtScopeCount, PolicyAndPolicySetAssignmentAtScopeCount, PolicyAssignmentLimit -Unique)
    if ($subscriptionsApproachingLimitPolicyAssignments.count -gt 0) {
        $tfCount = ($subscriptionsApproachingLimitPolicyAssignments | measure-object).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsPolicyAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsPolicyAssignments"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitPolicyAssignments | measure-object).count) Subscriptions approaching Limit ($LimitPOLICYPolicyAssignmentsSubscription) for PolicyAssignment</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsPolicyAssignments = $null
        $htmlSUMMARYSubsapproachingLimitsPolicyAssignments = foreach ($subscriptionApproachingLimitPolicyAssignments in $subscriptionsApproachingLimitPolicyAssignments) {
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionApproachingLimitPolicyAssignments.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionApproachingLimitPolicyAssignments.MgId)">$($subscriptionApproachingLimitPolicyAssignments.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingLimitPolicyAssignments.PolicyAndPolicySetAssignmentAtScopeCount/$subscriptionApproachingLimitPolicyAssignments.PolicyAssignmentLimit).tostring('P')) ($($subscriptionApproachingLimitPolicyAssignments.PolicyAndPolicySetAssignmentAtScopeCount)/$($subscriptionApproachingLimitPolicyAssignments.PolicyAssignmentLimit)) ($($subscriptionApproachingLimitPolicyAssignments.PolicyAssignmentAtScopeCount) Policy assignments, $($subscriptionApproachingLimitPolicyAssignments.PolicySetAssignmentAtScopeCount) PolicySet assignments)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsPolicyAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitPolicyAssignments | measure-object).count) Subscriptions approaching Limit ($LimitPOLICYPolicyAssignmentsSubscription) for PolicyAssignment</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsPolicyAssignments

    #region SUMMARYSubsapproachingLimitsPolicyScope
    Write-Host '  processing TenantSummary Subscriptions Limit PolicyScope'
    $subscriptionsApproachingLimitPolicyScope = (($policyBaseQuerySubscriptions.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicyDefinitionsScopedCount -gt 0 -and (($_.PolicyDefinitionsScopedCount -gt ($_.PolicyDefinitionsScopedLimit * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, Subscription, SubscriptionId, PolicyDefinitionsScopedCount, PolicyDefinitionsScopedLimit -Unique)
    if (($subscriptionsApproachingLimitPolicyScope | measure-object).count -gt 0) {
        $tfCount = ($subscriptionsApproachingLimitPolicyScope | measure-object).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsPolicyScope'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsPolicyScope"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitPolicyScope | measure-object).count) Subscriptions approaching Limit ($LimitPOLICYPolicyDefinitionsScopedSubscription) for Policy Scope</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsPolicyScope = $null
        $htmlSUMMARYSubsapproachingLimitsPolicyScope = foreach ($subscriptionApproachingLimitPolicyScope in $subscriptionsApproachingLimitPolicyScope) {
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionApproachingLimitPolicyScope.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionApproachingLimitPolicyScope.MgId)">$($subscriptionApproachingLimitPolicyScope.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingLimitPolicyScope.PolicyDefinitionsScopedCount/$subscriptionApproachingLimitPolicyScope.PolicyDefinitionsScopedLimit).tostring('P')) ($($subscriptionApproachingLimitPolicyScope.PolicyDefinitionsScopedCount)/$($subscriptionApproachingLimitPolicyScope.PolicyDefinitionsScopedLimit))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsPolicyScope)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$($subscriptionsApproachingLimitPolicyScope.count) Subscriptions approaching Limit ($LimitPOLICYPolicyDefinitionsScopedSubscription) for Policy Scope</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsPolicyScope

    #region SUMMARYSubsapproachingLimitsPolicySetScope
    Write-Host '  processing TenantSummary Subscriptions Limit PolicySetScope'
    $subscriptionsApproachingLimitPolicySetScope = (($policyBaseQuerySubscriptions.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.PolicySetDefinitionsScopedCount -gt 0 -and (($_.PolicySetDefinitionsScopedCount -gt ($_.PolicySetDefinitionsScopedLimit * ($LimitCriticalPercentage / 100)))) })) | Select-Object MgId, Subscription, SubscriptionId, PolicySetDefinitionsScopedCount, PolicySetDefinitionsScopedLimit -Unique)
    if ($subscriptionsApproachingLimitPolicySetScope.count -gt 0) {
        $tfCount = ($subscriptionsApproachingLimitPolicySetScope | measure-object).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsPolicySetScope'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsPolicySetScope"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitPolicyScope | measure-object).count) Subscriptions approaching Limit ($LimitPOLICYPolicySetDefinitionsScopedSubscription) for PolicySet Scope</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure Policy Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsPolicySetScope = $null
        $htmlSUMMARYSubsapproachingLimitsPolicySetScope = foreach ($subscriptionApproachingLimitPolicySetScope in $subscriptionsApproachingLimitPolicySetScope) {
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionApproachingLimitPolicySetScope.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionApproachingLimitPolicySetScope.MgId)">$($subscriptionApproachingLimitPolicySetScope.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingLimitPolicySetScope.PolicySetDefinitionsScopedCount/$subscriptionApproachingLimitPolicySetScope.PolicySetDefinitionsScopedLimit).tostring('P')) ($($subscriptionApproachingLimitPolicySetScope.PolicySetDefinitionsScopedCount)/$($subscriptionApproachingLimitPolicySetScope.PolicySetDefinitionsScopedLimit))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsPolicySetScope)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingLimitPolicyScope | measure-object).count) Subscriptions approaching Limit ($LimitPOLICYPolicySetDefinitionsScopedSubscription) for PolicySet Scope</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-policy-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsPolicySetScope

    #region SUMMARYSubsapproachingLimitsRoleAssignment
    Write-Host '  processing TenantSummary Subscriptions Limit RoleAssignments'
    $subscriptionsApproachingRoleAssignmentLimit = $rbacBaseQuery.where( { -not [String]::IsNullOrEmpty($_.SubscriptionId) -and $_.RoleAssignmentsCount -gt ($_.RoleAssignmentsLimit * $LimitCriticalPercentage / 100) }) | Sort-Object -Property SubscriptionId -Unique | select-object -Property MgId, SubscriptionId, Subscription, RoleAssignmentsCount, RoleAssignmentsLimit

    $availableSubscriptionsRoleAssignmentLimits = ($htSubscriptionsRoleAssignmentLimit.values | Sort-Object -Unique) -join ' | '

    if (($subscriptionsApproachingRoleAssignmentLimit).count -gt 0) {
        $tfCount = ($subscriptionsApproachingRoleAssignmentLimit).count
        $htmlTableId = 'TenantSummary_SubsapproachingLimitsRoleAssignment'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_SubsapproachingLimitsRoleAssignment"><i class="padlx fa fa-exclamation-triangle" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingRoleAssignmentLimit | measure-object).count) Subscriptions approaching Limit ($($availableSubscriptionsRoleAssignmentLimits)) for RoleAssignment</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Azure RBAC Limits</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id= "$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Subscription</th>
<th>SubscriptionId</th>
<th>Limit</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYSubsapproachingLimitsRoleAssignment = $null
        $htmlSUMMARYSubsapproachingLimitsRoleAssignment = foreach ($subscriptionApproachingRoleAssignmentLimit in $subscriptionsApproachingRoleAssignmentLimit) {
            @"
<tr>
<td><span class="valignMiddle">$($subscriptionApproachingRoleAssignmentLimit.subscription -replace '<', '&lt;' -replace '>', '&gt;')</span></td>
<td><span class="valignMiddle"><a class="internallink" href="#table_$($subscriptionApproachingRoleAssignmentLimit.MgId)">$($subscriptionApproachingRoleAssignmentLimit.subscriptionId)</a></span></td>
<td>$(($subscriptionApproachingRoleAssignmentLimit.RoleAssignmentsCount/$subscriptionApproachingRoleAssignmentLimit.RoleAssignmentsLimit).tostring('P')) ($($subscriptionApproachingRoleAssignmentLimit.RoleAssignmentsCount)/$($subscriptionApproachingRoleAssignmentLimit.RoleAssignmentsLimit))</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYSubsapproachingLimitsRoleAssignment)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
    </div>
    <script>
        function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
            window.helpertfConfig4$htmlTableId =1;
            var tfConfig4$htmlTableId = {
            base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring'
            ],
extensions: [{ name: 'sort' }]
        };
        var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
        tf.init();}}
    </script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
    <p"><i class="padlx fa fa-check green" aria-hidden="true"></i> <span class="valignMiddle">$(($subscriptionsApproachingRoleAssignmentLimit | measure-object).count) Subscriptions approaching Limit ($availableSubscriptionsRoleAssignmentLimits) for RoleAssignment</span> <a class="externallink" href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-rbac-limits" target="_blank" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p>
"@)
    }
    #endregion SUMMARYSubsapproachingLimitsRoleAssignment

    #endregion tenantSummaryLimitsSubscriptions

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)
    #endregion tenantSummaryLimits

    showMemoryUsage

    #region tenantSummaryAAD
    [void]$htmlTenantSummary.AppendLine(@'
<button type="button" class="collapsible" id="tenantSummaryAAD"><hr class="hr-textAAD" data-content="Azure Active Directory" /></button>
<div class="content TenantSummaryContent">
<i class="padlx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Check out <b>AzADServicePrincipalInsights</b> POC</span> <a class="externallink" href="https://aka.ms/azadserviceprincipalinsights" target="_blank" rel="noopener">GitHub <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Demystifying Service Principals - Managed Identities</span> <a class="externallink" href="https://devblogs.microsoft.com/devops/demystifying-service-principals-managed-identities/" target="_blank" rel="noopener">devBlogs <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
<i class="padlx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">John Savill - Azure AD App Registrations, Enterprise Apps and Service Principals</span> <a class="externallink" href="https://www.youtube.com/watch?v=WVNvoiA_ktw" target="_blank" rel="noopener">YouTube <i class="fa fa-external-link" aria-hidden="true"></i></a><br>
'@)

    #region AADSPNotFound
    Write-Host '  processing TenantSummary AAD ServicePrincipals - not found'

    if ($servicePrincipalRequestResourceNotFoundCount -gt 0) {
        $tfCount = $servicePrincipalRequestResourceNotFoundCount
        $htmlTableId = 'TenantSummary_AADSPNotFound'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_AADSPNotFound"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($servicePrincipalRequestResourceNotFoundCount) AAD ServicePrincipals 'Request_ResourceNotFound'</span> <abbr title="API return: Request_ResourceNotFound"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Service Principal Object Id</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYAADSPNotFound = $null
        $htmlSUMMARYAADSPNotFound = foreach ($serviceprincipal in $arrayServicePrincipalRequestResourceNotFound | Sort-Object) {

            @"
<tr>
<td>$($serviceprincipal)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYAADSPNotFound)
        [void]$htmlTenantSummary.AppendLine(@"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_types: [
        'caseinsensitivestring'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
            <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No ServicePrincipals where the API returned 'Request_ResourceNotFound'</span></p>
'@)
    }
    #endregion AADSPNotFound

    #region AADAppNotFound
    Write-Host '  processing TenantSummary AAD Applications - not found'

    if ($applicationRequestResourceNotFoundCount -gt 0) {
        $tfCount = $applicationRequestResourceNotFoundCount
        $htmlTableId = 'TenantSummary_AADAppNotFound'

        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_AADAppNotFound"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($applicationRequestResourceNotFoundCount) AAD Applications 'Request_ResourceNotFound'</span> <abbr title="API return: Request_ResourceNotFound"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Application (Client) Id</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYAADAppNotFound = $null
        $htmlSUMMARYAADAppNotFound = foreach ($app in $arrayApplicationRequestResourceNotFound | Sort-Object) {

            @"
<tr>
<td>$($app)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYAADAppNotFound)
        [void]$htmlTenantSummary.AppendLine(@"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_types: [
        'caseinsensitivestring'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
            <p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No Applications where the API returned 'Request_ResourceNotFound'</span></p>
'@)
    }
    #endregion AADAppNotFound

    #region AADSPManagedIdentity
    $startAADSPManagedIdentityLoop = Get-Date
    Write-Host '  processing TenantSummary AAD SP Managed Identities'

    if ($servicePrincipalsOfTypeManagedIdentityCount -gt 0) {
        $tfCount = $servicePrincipalsOfTypeManagedIdentityCount
        $htmlTableId = 'TenantSummary_AADSPManagedIdentities'

        if ($htOrphanedSPMI.keys.Count -gt 0) {
            $orphanedSPMIPresent = $true
        }

        $abbr = " <abbr title=`"Relevant for UserAssigned MI's &#13;Check 'TenantSummary/Subscription, Resources & Defender/UserAssigned Managed Identities assigned to Resources' for more details`"><i class=`"fa fa-question-circle`" aria-hidden=`"true`"></i></abbr>"
        $abbrOrphanedSPMI = " <abbr title=`"Policy assignment related Managed Identities &#13;The related Policy assignment does not exist`"><i class=`"fa fa-question-circle`" aria-hidden=`"true`"></i></abbr>"
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_AADSPManagedIdentities"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($servicePrincipalsOfTypeManagedIdentityCount) AAD ServicePrincipals type=ManagedIdentity</span> <abbr title="ServicePrincipals where a Role assignment exists &#13;(including ResourceGroups and Resources)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ApplicationId</th>
<th>DisplayName</th>
<th>SP ObjectId</th>
<th>Type</th>
<th>Usage</th>
<th>Usage info</th>
<th>Policy assignment details</th>
<th>Role assignments</th>
<th>Assigned to resources$($abbr)</th>
<th>Orphaned$($abbrOrphanedSPMI)</td>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYAADSPManagedIdentities = $null
        $htmlSUMMARYAADSPManagedIdentities = foreach ($serviceprincipalMI in $servicePrincipalsOfTypeManagedIdentity | Sort-Object) {

            $serviceprincipalMIDetailed = $htServicePrincipals.($serviceprincipalMI)
            $miRoleAssignments = 'n/a'
            $miType = 'unknown'
            $userMiAssignedToResourcesCount = ''
            foreach ($altName in $serviceprincipalMIDetailed.alternativeNames) {
                if ($altName -like 'isExplicit=*') {
                    $splitAltName = $altName.split('=')
                    if ($splitAltName[1] -eq 'true') {
                        $miType = 'User assigned'
                        if ($htUserAssignedIdentitiesAssignedResources.($serviceprincipalMI)) {
                            $userMiAssignedToResourcesCount = $htUserAssignedIdentitiesAssignedResources.($serviceprincipalMI).ResourcesCount
                        }
                    }
                    if ($splitAltName[1] -eq 'false') {
                        $miType = 'System assigned'
                    }
                }
                else {
                    $s1 = $altName -replace '.*/providers/'; $rm = $s1 -replace '.*/'; $resourceType = $s1 -replace "/$($rm)"
                    $miAlternativeName = $altname
                    $miResourceType = $resourceType
                }
            }

            if ($miResourceType -eq 'Microsoft.Authorization/policyAssignments') {
                $policyAssignmentId = $miAlternativeName.ToLower()
                if ($policyAssignmentId -like '/providers/Microsoft.Management/managementGroups/*') {
                    if (-not ($htCacheAssignmentsPolicy).($policyAssignmentId)) {
                        $assignmentInfo = 'n/a'
                    }
                    else {
                        $assignmentInfo = ($htCacheAssignmentsPolicy).($policyAssignmentId).Assignment
                    }
                }
                else {
                    #sub
                    if (((($policyAssignmentId).Split('/') | Measure-Object).Count - 1) -eq 6) {
                        if (-not ($htCacheAssignmentsPolicy).($policyAssignmentId)) {
                            $assignmentInfo = 'n/a'
                        }
                        else {
                            $assignmentInfo = ($htCacheAssignmentsPolicy).($policyAssignmentId).Assignment
                        }
                    }
                    else {
                        #rg
                        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                            if (-not ($htCacheAssignmentsPolicyOnResourceGroupsAndResources).($policyAssignmentId)) {
                                $assignmentInfo = 'n/a'
                            }
                            else {
                                $assignmentInfo = ($htCacheAssignmentsPolicyOnResourceGroupsAndResources).($policyAssignmentId)
                            }
                        }
                        else {
                            if (-not ($htCacheAssignmentsPolicy).($policyAssignmentId)) {
                                $assignmentInfo = 'n/a'
                            }
                            else {
                                $assignmentInfo = ($htCacheAssignmentsPolicy).($policyAssignmentId).Assignment
                            }
                        }
                    }
                }

                if ($assignmentinfo -ne 'n/a') {

                    if ($assignmentinfo.id -like '/subscriptions/*/resourcegroups/*') {

                        if ($assignmentInfo.properties.policyDefinitionId -like '*/providers/Microsoft.Authorization/policyDefinitions/*') {
                            $policyAssignmentsPolicyVariant = 'Policy'
                            $policyAssignmentsPolicyVariant4ht = 'policy'
                        }

                        if ($assignmentInfo.properties.policyDefinitionId -like '*/providers/Microsoft.Authorization/policySetDefinitions/*') {
                            $policyAssignmentsPolicyVariant = 'PolicySet'
                            $policyAssignmentsPolicyVariant4ht = 'policySet'
                        }

                        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                            $policyAssignmentsPolicyDefinitionId = ($assignmentInfo.properties.policyDefinitionId).ToLower()
                            $policyAssignmentspolicyDefinitionIdGuid = $policyAssignmentsPolicyDefinitionId -replace '.*/'

                            if ($policyAssignmentsPolicyVariant4ht -eq 'policy') {
                                if (($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)) {
                                    $definitionInfo = ($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)
                                }
                                else {
                                    $definitionInfo = 'unknown'
                                }
                            }
                            if ($policyAssignmentsPolicyVariant4ht -eq 'policySet') {
                                if (($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)) {
                                    $definitionInfo = ($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)
                                }
                                else {
                                    $definitionInfo = 'unknown'
                                }
                            }

                        }
                        else {
                            $policyAssignmentsPolicyDefinitionId = ($assignmentInfo.properties.policyDefinitionId).ToLower()
                            $policyAssignmentspolicyDefinitionIdGuid = $policyAssignmentsPolicyDefinitionId -replace '.*/'

                            if ($policyAssignmentsPolicyVariant4ht -eq 'policy') {
                                if (($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)) {
                                    $definitionInfo = ($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)
                                }
                                else {
                                    $definitionInfo = 'unknown'
                                }
                            }
                            if ($policyAssignmentsPolicyVariant4ht -eq 'policySet') {
                                if (($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)) {
                                    $definitionInfo = ($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)
                                }
                                else {
                                    $definitionInfo = 'unknown'
                                }
                            }
                        }
                    }
                    else {
                        if ($assignmentInfo.properties.policyDefinitionId -like '*/providers/Microsoft.Authorization/policyDefinitions/*') {
                            $policyAssignmentsPolicyVariant = 'Policy'
                            $policyAssignmentsPolicyVariant4ht = 'policy'
                        }
                        if ($assignmentInfo.properties.policyDefinitionId -like '*/providers/Microsoft.Authorization/policySetDefinitions/*') {
                            $policyAssignmentsPolicyVariant = 'PolicySet'
                            $policyAssignmentsPolicyVariant4ht = 'policySet'
                        }

                        $policyAssignmentsPolicyDefinitionId = ($assignmentInfo.properties.policyDefinitionId).Tolower()
                        $policyAssignmentspolicyDefinitionIdGuid = $policyAssignmentsPolicyDefinitionId -replace '.*/'

                        if ($policyAssignmentsPolicyVariant4ht -eq 'policy') {
                            if (($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)) {
                                $definitionInfo = ($htCacheDefinitionsPolicy).($policyAssignmentsPolicyDefinitionId)
                            }
                            else {
                                $definitionInfo = 'unknown'
                            }
                        }
                        if ($policyAssignmentsPolicyVariant4ht -eq 'policySet') {
                            if (($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)) {
                                $definitionInfo = ($htCacheDefinitionsPolicySet).($policyAssignmentsPolicyDefinitionId)
                            }
                            else {
                                $definitionInfo = 'unknown'
                            }
                        }
                    }

                    if ($definitionInfo -eq 'unknown') {
                        $policyAssignmentMoreInfo = "unknown definition ($($policyAssignmentsPolicyDefinitionId))"
                    }
                    else {
                        if ($definitionInfo.type -eq 'BuiltIn') {
                            $policyAssignmentMoreInfo = "$($definitionInfo.Type) $($policyAssignmentsPolicyVariant): $($definitionInfo.LinkToAzAdvertizer) ($policyAssignmentspolicyDefinitionIdGuid)"
                        }
                        else {
                            $policyAssignmentMoreInfo = "$($definitionInfo.Type) $($policyAssignmentsPolicyVariant): <b>$($definitionInfo.DisplayName -replace '<', '&lt;' -replace '>', '&gt;')</b> ($($policyAssignmentsPolicyDefinitionId))"
                        }
                    }
                }
                else {
                    $policyAssignmentMoreInfo = 'n/a'
                }

            }
            else {
                $policyAssignmentMoreInfo = 'n/a'
            }

            if ($htRoleAssignmentsForServicePrincipals.($serviceprincipalMI)) {

                $arrayMiRoleAssignments = @()
                $helperMiRoleAssignments = $htRoleAssignmentsForServicePrincipals.($serviceprincipalMI).RoleAssignments

                foreach ($roleAssignment in $helperMiRoleAssignments) {
                    if ($roleAssignment.RoleIsCustom -eq 'False') {
                        $arrayMiRoleAssignments += "$(($htCacheDefinitionsRole).($roleAssignment.roleDefinitionId).LinkToAzAdvertizer) ($($roleAssignment.roleassignmentId))"
                    }
                    else {
                        $arrayMiRoleAssignments += "<b>$($roleAssignment.roleDefinitionName -replace '<', '&lt;' -replace '>', '&gt;')</b>; $($roleAssignment.roleDefinitionId) ($($roleAssignment.roleassignmentId))"
                    }
                }
                $miRoleAssignments = "$(($arrayMiRoleAssignments).Count) ($($arrayMiRoleAssignments -join ', '))"
            }

            $orphanedMI = ''
            if ($miResourceType -eq 'Microsoft.Authorization/policyAssignments') {
                $orphanedMI = 'false'
                if ($htOrphanedSPMI.($serviceprincipalMI)) {
                    $orphanedMI = 'true'
                }
            }

            @"
<tr>
<td>$($serviceprincipalMIDetailed.appId)</td>
<td>$($serviceprincipalMIDetailed.displayName)</td>
<td class="breakwordall">$($serviceprincipalMI)</td>
<td>$miType</td>
<td>$miResourceType</td>
<td class="breakwordall">$($serviceprincipalMIDetailed.alternativeNames -join ', ')</td>
<td class="breakwordall">$($policyAssignmentMoreInfo)</td>
<td class="breakwordall">$($miRoleAssignments)</td>
<td>$userMiAssignedToResourcesCount</td>
<td>$orphanedMI</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYAADSPManagedIdentities)
        [void]$htmlTenantSummary.AppendLine(@"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_3: 'select',
    col_4: 'select',
    col_9: 'select',
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'caseinsensitivestring'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$servicePrincipalsOfTypeManagedIdentityCount AAD ServicePrincipals type=ManagedIdentity</span></p>
"@)
    }

    $endAADSPManagedIdentityLoop = Get-Date
    Write-Host "   TenantSummary AAD SP Managed Identities processing duration: $((NEW-TIMESPAN -Start $startAADSPManagedIdentityLoop -End $endAADSPManagedIdentityLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startAADSPManagedIdentityLoop -End $endAADSPManagedIdentityLoop).TotalSeconds) seconds)"
    #endregion AADSPManagedIdentity

    #region AADSPCredExpiry
    if (-not $skipApplications) {
        $startAADSPCredExpiryLoop = Get-Date
        Write-Host '  processing TenantSummary AAD SP Apps CredExpiry'

        $servicePrincipalsOfTypeApplicationCount = ($servicePrincipalsOfTypeApplication).Count

        if ($servicePrincipalsOfTypeApplicationCount -gt 0) {
            $tfCount = $servicePrincipalsOfTypeApplicationCount
            $htmlTableId = 'TenantSummary_AADSPCredExpiry'

            $servicePrincipalsOfTypeApplicationSecretsExpiring = $servicePrincipalsOfTypeApplication.where( { $htAppDetails.($_).appPasswordCredentialsGracePeriodExpiryCount -gt 0 } )
            $servicePrincipalsOfTypeApplicationSecretsExpiringCount = ($servicePrincipalsOfTypeApplicationSecretsExpiring).Count
            $servicePrincipalsOfTypeApplicationCertificatesExpiring = $servicePrincipalsOfTypeApplication.where( { $htAppDetails.($_).appKeyCredentialsGracePeriodExpiryCount -gt 0 } )
            $servicePrincipalsOfTypeApplicationCertificatesExpiringCount = ($servicePrincipalsOfTypeApplicationCertificatesExpiring).Count
            if ($servicePrincipalsOfTypeApplicationSecretsExpiringCount -gt 0 -or $servicePrincipalsOfTypeApplicationCertificatesExpiringCount -gt 0) {
                $warningOrNot = "<i class=`"padlx fa fa-exclamation-triangle yellow`" aria-hidden=`"true`"></i>"
            }
            else {
                $warningOrNot = "<i class=`"padlx fa fa-check-circle blue`" aria-hidden=`"true`"></i>"
            }
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_AADSPCredExpiry">$warningOrNot <span class="valignMiddle">$($servicePrincipalsOfTypeApplicationCount) AAD ServicePrincipals type=Application | $servicePrincipalsOfTypeApplicationSecretsExpiringCount Secrets expire < $($AADServicePrincipalExpiryWarningDays)d | $servicePrincipalsOfTypeApplicationCertificatesExpiringCount Certificates expire < $($AADServicePrincipalExpiryWarningDays)d</span> <abbr title="ServicePrincipals where a Role assignment exists &#13;(including ResourceGroups and Resources)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ApplicationId</th>
<th>DisplayName</th>
<th>Notes</th>
<th>SP ObjectId</th>
<th>App ObjectId</th>
<th>Secrets</th>
<th>Secrets expired</th>
<th>Secrets expiry<br><$($AADServicePrincipalExpiryWarningDays)d</th>
<th>Secrets expiry<br>>$($AADServicePrincipalExpiryWarningDays)d & <2y</th>
<th>Secrets expiry<br>>2y</th>
<th>Certs</th>
<th>Certs expired</th>
<th>Certs expiry<br><$($AADServicePrincipalExpiryWarningDays)d</th>
<th>Certs expiry<br>>$($AADServicePrincipalExpiryWarningDays)d & <2y</th>
<th>Certs expiry<br>>2y</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYAADSPCredExpiry = $null
            $htmlSUMMARYAADSPCredExpiry = foreach ($serviceprincipalApp in $servicePrincipalsOfTypeApplication | Sort-Object) {
                @"
<tr>
<td>$($htAppDetails.$serviceprincipalApp.spGraphDetails.appId)</td>
<td>$($htAppDetails.$serviceprincipalApp.spGraphDetails.displayName)</td>
<td>$($htAppDetails.$serviceprincipalApp.spGraphDetails.notes)</td>
<td>$($htAppDetails.$serviceprincipalApp.spGraphDetails.Id)</td>
<td>$($htAppDetails.$serviceprincipalApp.appGraphDetails.Id)</td>
"@
                if ($htAppDetails.$serviceprincipalApp.appPasswordCredentialsCount) {
                    @"
<td>$($htAppDetails.$serviceprincipalApp.appPasswordCredentialsCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appPasswordCredentialsExpiredCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appPasswordCredentialsGracePeriodExpiryCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appPasswordCredentialsExpiryOKCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appPasswordCredentialsExpiryOKMoreThan2YearsCount)</td>
"@
                }
                else {
                    @'
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
'@
                }

                if ($htAppDetails.$serviceprincipalApp.appKeyCredentialsCount) {
                    @"
<td>$($htAppDetails.$serviceprincipalApp.appKeyCredentialsCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appKeyCredentialsExpiredCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appKeyCredentialsGracePeriodExpiryCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appKeyCredentialsExpiryOKCount)</td>
<td>$($htAppDetails.$serviceprincipalApp.appKeyCredentialsExpiryOKMoreThan2YearsCount)</td>
"@
                }
                else {
                    @'
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
'@
                }

                @'
</tr>
'@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYAADSPCredExpiry)
            [void]$htmlTenantSummary.AppendLine(@"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number',
        'number'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$servicePrincipalsOfTypeApplicationCount AAD ServicePrincipals type=Application</span></p>
"@)
        }

        $endAADSPCredExpiryLoop = Get-Date
        Write-Host "   TenantSummary AAD SP Apps CredExpiry processing duration: $((NEW-TIMESPAN -Start $startAADSPCredExpiryLoop -End $endAADSPCredExpiryLoop).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startAADSPCredExpiryLoop -End $endAADSPCredExpiryLoop).TotalSeconds) seconds)"
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No information on AAD ServicePrincipals type=Application as Guest account does not have enough permissions</span></p>
'@)
    }
    #endregion AADSPCredExpiry

    #region AADSPExternalSP
    Write-Host '  processing TenantSummary AAD External ServicePrincipals'
    $startAADSPExternalSP = Get-Date

    $htRoleAssignmentsForServicePrincipalsRgRes = @{}
    $roleAssignmentsForServicePrincipalsRgRes = (((($htCacheAssignmentsRBACOnResourceGroupsAndResources).values).where( { $_.ObjectType -eq 'ServicePrincipal' })) | Sort-Object -Property RoleAssignmentId -Unique)
    foreach ($spWithRoleAssignment in $roleAssignmentsForServicePrincipalsRgRes | Group-Object -Property ObjectId) {
        if (-not $htRoleAssignmentsForServicePrincipalsRgRes.($spWithRoleAssignment.Name)) {
            $htRoleAssignmentsForServicePrincipalsRgRes.($spWithRoleAssignment.Name) = @{}
            $htRoleAssignmentsForServicePrincipalsRgRes.($spWithRoleAssignment.Name).RoleAssignments = $spWithRoleAssignment.group
        }
    }

    $appsWithOtherOrgId = $htServicePrincipals.Keys.where( { $htServicePrincipals.($_).servicePrincipalType -eq 'Application' -and $htServicePrincipals.($_).appOwnerOrganizationId -ne $azAPICallConf['checkContext'].Tenant.Id } )
    $appsWithOtherOrgIdCount = ($appsWithOtherOrgId).Count

    if ($appsWithOtherOrgIdCount -gt 0) {
        $tfCount = $appsWithOtherOrgIdCount
        $htmlTableId = 'TenantSummary_AADSPExternal'

        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
            $abbr = " <abbr title=`"Lists only RoleAssignmentIds for scope RG/Resource &#13;Check TenantSummary/RBAC to find the RoleAssignmentIds for MG/Sub scopes`"><i class=`"fa fa-question-circle`" aria-hidden=`"true`"></i></abbr>"
        }
        else {
            $abbr = ''
        }
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_AADSPExternal"><i class="padlx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle">$($appsWithOtherOrgIdCount) External (appOwnerOrganizationId) AAD ServicePrincipals type=Application</span> <abbr title="External (appOwnerOrganizationId != $($azAPICallConf['checkContext'].Subscription.TenantId)) ServicePrincipals where a Role assignment exists &#13;(including ResourceGroups and Resources)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ApplicationId</th>
<th>DisplayName</th>
<th>SP ObjectId</th>
<th>OrganizationId</th>
<th>Role assignments$($abbr)</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYAADSPExternal = $null
        $htmlSUMMARYAADSPExternal = foreach ($serviceprincipalApp in $appsWithOtherOrgId | Sort-Object) {
            $arrayRoleAssignments4ExternalApp = [System.Collections.ArrayList]@()
            $roleAssignmentsMgSub = $htRoleAssignmentsForServicePrincipals.($serviceprincipalApp).RoleAssignments
            $roleAssignmentsMgSubCount = ($roleAssignmentsMgSub).Count
            $roleAssignments4ExternalApp = 'n/a'
            if ($roleAssignmentsMgSubCount -gt 0) {
                $roleAssignments4ExternalApp = $roleAssignmentsMgSubCount
            }
            $roleAssignmentsRgRes = $htRoleAssignmentsForServicePrincipalsRgRes.($serviceprincipalApp).RoleAssignments
            $roleAssignmentsRgResCount = ($roleAssignmentsRgRes).Count
            if ($roleAssignmentsRgResCount -gt 0) {
                foreach ($roleAssignmentRgRes in $roleAssignmentsRgRes) {
                    $null = $arrayRoleAssignments4ExternalApp.Add([PSCustomObject]@{
                            roleAssignmentId = $roleAssignmentRgRes.RoleAssignmentId
                        })
                }
                $roleAssignments4ExternalApp = "$roleAssignmentsRgResCount ($($arrayRoleAssignments4ExternalApp.roleAssignmentId -join ', '))"
            }

            @"
<tr>
<td>$($htServicePrincipals.($serviceprincipalApp).appId)</td>
<td>$($htServicePrincipals.($serviceprincipalApp).displayName)</td>
<td>$($htServicePrincipals.($serviceprincipalApp).id)</td>
<td>$($htServicePrincipals.($serviceprincipalApp).appOwnerOrganizationId)</td>
<td>$roleAssignments4ExternalApp</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYAADSPExternal)
        [void]$htmlTenantSummary.AppendLine(@"
    </tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
    window.helpertfConfig4$htmlTableId =1;
    var tfConfig4$htmlTableId = {
    base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
    col_types: [
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring',
        'caseinsensitivestring'
    ],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">$appsWithOtherOrgIdCount External (appOwnerOrganizationId) AAD ServicePrincipals type=Application</span></p>
"@)
    }

    $endAADSPExternalSP = Get-Date
    Write-Host "   TenantSummary AAD External ServicePrincipals processing duration: $((NEW-TIMESPAN -Start $startAADSPExternalSP -End $endAADSPExternalSP).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startAADSPExternalSP -End $endAADSPExternalSP).TotalSeconds) seconds)"
    #endregion AADSPExternalSP

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)
    #endregion tenantSummaryAAD

    showMemoryUsage

    #region tenantSummaryConsumption
    [void]$htmlTenantSummary.AppendLine(@'
    <button type="button" class="collapsible" id="tenantSummaryConsumption"><hr class="hr-textConsumption" data-content="Consumption" /></button>
    <div class="content TenantSummaryContent">
    <i class="padlx fa fa-lightbulb-o" aria-hidden="true"></i> <span class="info">Customize your Azure environment optimizations (Cost, Reliability & more) with</span> <a class="externallink" href="https://github.com/helderpinto/AzureOptimizationEngine" target="_blank" rel="noopener">Azure Optimization Engine (AOE) <i class="fa fa-external-link" aria-hidden="true"></i></a>
'@)

    if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
        $startConsumption = Get-Date
        Write-Host '  processing TenantSummary Consumption'

        if (($arrayConsumptionData | Measure-Object).Count -gt 0) {
            $tfCount = ($arrayConsumptionData | Measure-Object).Count
            $htmlTableId = 'TenantSummary_Consumption'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_Consumption"><i class="padlx fa fa-credit-card blue" aria-hidden="true"></i> <span class="valignMiddle">Total cost $($arrayTotalCostSummary -join "$CsvDelimiterOpposite ") last $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ChargeType</th>
<th>ResourceType</th>
<th>Category</th>
<th>ResourceCount</th>
<th>Cost ($($AzureConsumptionPeriod)d)</th>
<th>Currency</th>
<th>Subscriptions</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYConsumption = $null
            $htmlSUMMARYConsumption = foreach ($consumptionLine in $arrayConsumptionData) {
                @"
<tr>
<td>$($consumptionLine.ConsumedServiceChargeType)</td>
<td>$($consumptionLine.ResourceType)</td>
<td>$($consumptionLine.ConsumedServiceCategory)</td>
<td>$($consumptionLine.ConsumedServiceInstanceCount)</td>
<td>$($consumptionLine.ConsumedServiceCost)</td>
<td>$($consumptionLine.ConsumedServiceCurrency)</td>
<td>$($consumptionLine.ConsumedServiceSubscriptions)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYConsumption)
            [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
col_5: 'select',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'number',
    'number',
    'caseinsensitivestring',
    'number'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No information on Consumption</span></p>
'@)
        }

        $endConsumption = Get-Date
        Write-Host "   TenantSummary Consumption processing duration: $((NEW-TIMESPAN -Start $startConsumption -End $endConsumption).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startConsumption -End $endConsumption).TotalSeconds) seconds)"

    }
    else {
        [void]$htmlTenantSummary.AppendLine(@'
<p><i class="padlx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle">No information on Consumption as switch parameter -DoAzureConsumption was not applied</span></p>
'@)
    }

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)
    #endregion tenantSummaryConsumption

    showMemoryUsage

    #region tenantSummaryChangeTracking
    Write-Host '  processing TenantSummary ChangeTracking'
    $startChangeTracking = Get-Date
    $xdaysAgo = (Get-Date).AddDays(-$ChangeTrackingDays)

    #region ctpolicydata
    write-host '   processing Policy'
    $customPolicyCreatedOrUpdated = ($customPoliciesDetailed.where( { (-not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo) -or (-not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo) }))
    $customPolicyCreatedOrUpdatedCount = $customPolicyCreatedOrUpdated.Count
    $customPolicyCreatedMgSub = ($customPolicyCreatedOrUpdated.where( { -not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo }))
    $customPolicyCreatedMg = ($customPolicyCreatedMgSub.where( { $_.Scope -eq 'Mg' }))
    $customPolicyCreatedMgCount = ($customPolicyCreatedMg).count
    $customPolicyCreatedSub = ($customPolicyCreatedMgSub.where( { $_.Scope -eq 'Sub' }))
    $customPolicyCreatedSubCount = ($customPolicyCreatedSub).count

    $customPolicyUpdatedMgSub = ($customPolicyCreatedOrUpdated.where( { -not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo }))
    $customPolicyUpdatedMg = ($customPolicyUpdatedMgSub.where( { $_.Scope -eq 'Mg' }))
    $customPolicyUpdatedMgCount = ($customPolicyUpdatedMg).count
    $customPolicyUpdatedSub = ($customPolicyUpdatedMgSub.where( { $_.Scope -eq 'Sub' }))
    $customPolicyUpdatedSubCount = ($customPolicyUpdatedSub).count
    #endregion ctpolicydata

    #region ctpolicySetdata
    write-host '   processing PolicySet'
    $customPolicySetCreatedOrUpdated = ($customPolicySetsDetailed.where( { (-not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo) -or (-not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo) }))
    $customPolicySetCreatedOrUpdatedCount = $customPolicySetCreatedOrUpdated.Count

    $customPolicySetCreatedMgSub = ($customPolicySetCreatedOrUpdated.where( { -not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo }))
    $customPolicySetCreatedMg = ($customPolicySetCreatedMgSub.where( { $_.Scope -eq 'Mg' }))
    $customPolicySetCreatedMgCount = ($customPolicySetCreatedMg).count
    $customPolicySetCreatedSub = ($customPolicySetCreatedMgSub.where( { $_.Scope -eq 'Sub' }))
    $customPolicySetCreatedSubCount = ($customPolicySetCreatedSub).count

    $customPolicySetUpdatedMgSub = ($customPolicySetCreatedOrUpdated.where( { -not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo }))
    $customPolicySetUpdatedMg = ($customPolicySetUpdatedMgSub.where( { $_.Scope -eq 'Mg' }))
    $customPolicySetUpdatedMgCount = ($customPolicySetUpdatedMg).count
    $customPolicySetUpdatedSub = ($customPolicySetUpdatedMgSub.where( { $_.Scope -eq 'Sub' }))
    $customPolicySetUpdatedSubCount = ($customPolicySetUpdatedSub).count
    #endregion ctpolicySetdata

    #region ctpolicyAssignmentsData
    write-host '   processing Policy assignment'
    $policyAssignmentsCreatedOrUpdated = (($arrayPolicyAssignmentsEnriched.where( { $_.Inheritance -notlike 'inherited*' } )).where( { (-not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo) -or (-not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo) }))
    $policyAssignmentsCreatedOrUpdatedCount = $policyAssignmentsCreatedOrUpdated.Count

    $policyAssignmentsCreatedMgSub = $policyAssignmentsCreatedOrUpdated.where( { (-not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo) })
    $policyAssignmentsCreatedMg = ($policyAssignmentsCreatedMgSub.where( { $_.mgOrSubOrRG -eq 'Mg' }))
    $policyAssignmentsCreatedMgCount = ($policyAssignmentsCreatedMg).count
    $policyAssignmentsCreatedSub = ($policyAssignmentsCreatedMgSub.where( { $_.mgOrSubOrRG -eq 'Sub' }))
    $policyAssignmentsCreatedSubCount = ($policyAssignmentsCreatedSub).count
    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
        $policyAssignmentsCreatedRg = ($policyAssignmentsUpdatedMgSub.where( { $_.mgOrSubOrRG -eq 'RG' }))
        $policyAssignmentsCreatedRgCount = ($policyAssignmentsCreatedRg).count
    }

    $policyAssignmentsUpdatedMgSub = $policyAssignmentsCreatedOrUpdated.where( { (-not [string]::IsNullOrEmpty($_.UpdatedOn) -and [datetime]$_.UpdatedOn -gt $xdaysAgo) })
    $policyAssignmentsUpdatedMg = ($policyAssignmentsUpdatedMgSub.where( { $_.mgOrSubOrRG -eq 'Mg' }))
    $policyAssignmentsUpdatedMgCount = ($policyAssignmentsUpdatedMg).count
    $policyAssignmentsUpdatedSub = ($policyAssignmentsUpdatedMgSub.where( { $_.mgOrSubOrRG -eq 'Sub' }))
    $policyAssignmentsUpdatedSubCount = ($policyAssignmentsUpdatedSub).count
    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
        $policyAssignmentsUpdatedRg = ($policyAssignmentsUpdatedMgSub.where( { $_.mgOrSubOrRG -eq 'RG' }))
        $policyAssignmentsUpdatedRgCount = ($policyAssignmentsUpdatedRg).count
    }


    if ($customPolicyCreatedOrUpdatedCount -gt 0 -or $customPolicySetCreatedOrUpdatedCount -gt 0 -or $policyAssignmentsCreatedOrUpdatedCount -gt 0) {
        $ctContenIndicatorPolicy = 'ctContenPolicyTrue'
        if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
            $policyAssignmentSummaryCt = "(Mg: C:$($policyAssignmentsCreatedMgCount), U:$($policyAssignmentsUpdatedMgCount); Sub: C:$($policyAssignmentsCreatedSubCount), U:$($policyAssignmentsUpdatedSubCount)); RG: C:$($policyAssignmentsCreatedRgCount), U:$($policyAssignmentsUpdatedRgCount)"
        }
        else {
            $policyAssignmentSummaryCt = "(Mg: C:$($policyAssignmentsCreatedMgCount), U:$($policyAssignmentsUpdatedMgCount); Sub: C:$($policyAssignmentsCreatedSubCount), U:$($policyAssignmentsUpdatedSubCount))"
        }

    }
    else {
        $ctContenIndicatorPolicy = 'ctContenPolicyFalse'
        $policyAssignmentSummaryCt = ''
    }
    #endregion ctpolicyAssignmentsData

    ##RBAC
    #region ctRbacData
    #rbac defs
    write-host '   processing RBAC'
    $customRoleDefinitionsCreatedOrUpdated = $tenantCustomRoles.where( { $_.IsCustom -eq $true -and $_.Json.properties.createdOn -gt $xdaysAgo -or $_.Json.properties.updatedOn -gt $xdaysAgo })
    $customRoleDefinitionsCreatedOrUpdatedCount = $customRoleDefinitionsCreatedOrUpdated.Count

    #rbac defs created
    write-host '   processing RBAC Role definition created'
    $customRoleDefinitionsCreated = $customRoleDefinitionsCreatedOrUpdated.where( { $_.Json.properties.createdOn -gt $xdaysAgo })
    $customRoleDefinitionsCreatedCount = $customRoleDefinitionsCreated.Count

    #rbac defs updated
    write-host '   processing RBAC Role definition updated'
    $customRoleDefinitionsUpdated = $customRoleDefinitionsCreatedOrUpdated.where( { $_.Json.properties.updatedOn -ne $_.Json.properties.createdOn -and $_.Json.properties.updatedOn -gt $xdaysAgo })
    $customRoleDefinitionsUpdatedCount = $customRoleDefinitionsUpdated.Count
    #endregion ctRbacData

    #region ctrbacassignments
    #rbac roleassignments
    write-host '   processing RBAC Role assignments'
    $roleAssignmentsCreated = ($rbacAll | Sort-Object -Property RoleAssignmentId, ObjectId -Unique).where( { -not [string]::IsNullOrEmpty($_.CreatedOn) -and [datetime]$_.CreatedOn -gt $xdaysAgo })
    $roleAssignmentsCreatedUnique = ($roleAssignmentsCreated | Sort-Object -Property RoleAssignmentId -Unique)
    $roleAssignmentsCreatedCount = ($roleAssignmentsCreated | Sort-Object -Property RoleAssignmentId -Unique).Count
    $roleAssignmentsCreatedImpactedIdentitiesCount = $roleAssignmentsCreated.Count

    #rbac assignments createdMg
    $roleAssignmentsCreatedMg = $roleAssignmentsCreatedUnique.where( { $_.TenOrMgOrSubOrRGOrRes -eq 'MG' -or $_.TenOrMgOrSubOrRGOrRes -eq 'Ten' })
    $roleAssignmentsCreatedMgCount = $roleAssignmentsCreatedMg.Count
    #rbac assignments createdSub
    $roleAssignmentsCreatedSub = $roleAssignmentsCreatedUnique.where( { $_.TenOrMgOrSubOrRGOrRes -eq 'Sub' })
    $roleAssignmentsCreatedSubCount = $roleAssignmentsCreatedSub.Count
    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
        $roleAssignmentsCreatedSubRg = $roleAssignmentsCreatedUnique.where( { $_.TenOrMgOrSubOrRGOrRes -eq 'RG' })
        $roleAssignmentsCreatedSubRgCount = $roleAssignmentsCreatedSubRg.Count
        $roleAssignmentsCreatedSubRgRes = $roleAssignmentsCreatedUnique.where( { $_.TenOrMgOrSubOrRGOrRes -eq 'Res' })
        $roleAssignmentsCreatedSubRgResCount = $roleAssignmentsCreatedSubRgRes.Count
    }

    if ($customRoleDefinitionsCreatedOrUpdatedCount -gt 0 -or $roleAssignmentsCreatedCount -gt 0) {
        $ctContenIndicatorRBAC = 'ctContenRBACTrue'
        if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
            $rbacAssignmentSummaryCt = "(Mg: $roleAssignmentsCreatedMgCount; Sub: $roleAssignmentsCreatedSubCount; RG: $roleAssignmentsCreatedSubRgCount; Res: $roleAssignmentsCreatedSubRgResCount)"
        }
        else {
            $rbacAssignmentSummaryCt = "(Mg: $roleAssignmentsCreatedMgCount; Sub: $roleAssignmentsCreatedSubCount)"
        }
    }
    else {
        $ctContenIndicatorRBAC = 'ctContenRBACFalse'
        $rbacAssignmentSummaryCt = ''
    }
    #endregion ctrbacassignments


    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #region ctresources
        write-host '   processing Resources'
        $resourcesCreatedOrChanged = $resourcesIdsAll.where( { $_.createdTime -gt $xdaysAgo -or $_.changedTime -gt $xdaysAgo })
        $resourcesCreatedOrChangedCount = $resourcesCreatedOrChanged.Count

        $resourcesCreatedAndChanged = $resourcesIdsAll.where( { $_.createdTime -gt $xdaysAgo -and $_.changedTime -gt $xdaysAgo })
        $resourcesCreatedAndChangedCount = $resourcesCreatedAndChanged.Count

        $resourcesCreated = $resourcesCreatedOrChanged.where( { $_.createdTime -gt $xdaysAgo })
        $resourcesCreatedCount = $resourcesCreated.Count
        $resourcesChanged = $resourcesCreatedOrChanged.where( { $_.changedTime -gt $xdaysAgo })
        $resourcesChangedCount = $resourcesChanged.Count

        if ($resourcesCreatedOrChangedCount -gt 0) {
            $ctContenIndicatorResources = 'ctContenResourcesTrue'
            $resourcesCreatedOrChangedGrouped = $resourcesCreatedOrChanged | Group-Object -Property type
            $resourcesCreatedOrChangedGroupedCount = ($resourcesCreatedOrChangedGrouped | Measure-Object).Count
        }
        else {
            $ctContenIndicatorResources = 'ctContenResourcesFalse'
        }
        #endregion ctresources
    }



    [void]$htmlTenantSummary.AppendLine(@"
    <button type="button" class="collapsible" id="tenantSummaryChangeTracking"><hr class="hr-textChangeTracking" data-content="Change tracking | last $($ChangeTrackingDays) days; after $($xdaysAgo.ToString('dd-MMM-yyyy HH:mm:ss'))" /></button>
    <div class="content TenantSummaryContent">
"@)

    #region ctpolicy
    [void]$htmlTenantSummary.AppendLine(@"
    <button type="button" class="collapsible" id="tenantSummaryChangeTrackingPolicy"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/10316-icon-service-Policy.svg"> <span class="$ctContenIndicatorPolicy">Policy</span></button>
    <div class="content TenantSummaryContent">
"@)

    #region ChangeTrackingCustomPolicy
    if ($customPolicyCreatedOrUpdatedCount -gt 0) {
        $tfCount = $customPolicyCreatedOrUpdatedCount
        $htmlTableId = 'TenantSummary_ChangeTrackingCustomPolicy'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingCustomPolicy"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $customPolicyCreatedOrUpdatedCount Created/Updated custom Policy definitions (Mg: C:$($customPolicyCreatedMgCount), U:$($customPolicyUpdatedMgCount); Sub: C:$($customPolicyCreatedSubCount), U:$($customPolicyUpdatedSubCount))</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Scope Id</th>
<th>Policy DisplayName</th>
<th>PolicyId</th>
<th>Category</th>
<th>Effect</th>
<th>Role definitions</th>
<th>Unique assignments</th>
<th>Used in PolicySets</th>
<th>Created/Updated</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYChangeTrackingCustomPolicy = $null
        $htmlSUMMARYChangeTrackingCustomPolicy = foreach ($entry in $customPolicyCreatedOrUpdated | Sort-Object -Property CreatedOn, UpdatedOn -Descending) {
            $createdOnGt = $false
            if ($entry.CreatedOn -ne '') {
                $createdOn = ($entry.CreatedOn)
                if ([datetime]($entry.CreatedOn) -gt $xdaysAgo) {
                    $createdOnGt = $true
                }
            }
            else {
                $createdOn = ''
            }

            $updatedOnGt = $false
            if ($entry.updatedOn -ne '') {
                $updatedOn = ($entry.UpdatedOn)
                if ([datetime]($entry.UpdatedOn) -gt $xdaysAgo) {
                    $updatedOnGt = $true
                }
                $updatedOnGt = $true
            }
            else {
                $updatedOn = ''
            }

            $createOnUpdatedOn = $null
            if ($createdOnGt) {
                $createOnUpdatedOn = 'Created'
            }
            if ($updatedOnGt) {
                $createOnUpdatedOn = 'Updated'
            }
            if ($createdOnGt -and $updatedOnGt) {
                $createOnUpdatedOn = 'Created&Updated'
            }

            if ($entry.UsedInPolicySetsCount -gt 0) {
                $customPolicyUsedInPolicySets = "$($entry.UsedInPolicySetsCount) ($($entry.UsedInPolicySets))"
            }
            else {
                $customPolicyUsedInPolicySets = $($entry.UsedInPolicySetsCount)
            }

            @"
<tr>
<td>$($entry.Scope)</td>
<td>$($entry.ScopeId)</td>
<td>$($entry.PolicyDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($entry.PolicyDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.PolicyEffect)</td>
<td>$($entry.RoleDefinitions)</td>
<td class="breakwordall">$($entry.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($customPolicyUsedInPolicySets)</td>
<td>$createOnUpdatedOn</td>
<td>$($entry.CreatedOn)</td>
<td>$($entry.CreatedBy)</td>
<td>$($entry.UpdatedOn)</td>
<td>$($entry.UpdatedBy)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingCustomPolicy)
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
linked_filters: true,
col_0: 'select',
col_9: 'multiple',
locale: 'en-US',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $customPolicyCreatedOrUpdatedCount Created/Updated custom Policy definitions</span></p>
"@)
    }
    #endregion ChangeTrackingCustomPolicy

    #region ChangeTrackingCustomPolicySet
    if ($customPolicySetCreatedOrUpdatedCount -gt 0) {
        $tfCount = $customPolicySetCreatedOrUpdatedCount
        $htmlTableId = 'TenantSummary_ChangeTrackingCustomPolicySet'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingCustomPolicySet"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $customPolicySetCreatedOrUpdatedCount Created/Updated custom PolicySet definitions (Mg: C:$($customPolicySetCreatedMgCount), U:$($customPolicySetUpdatedMgCount); Sub: C:$($customPolicySetCreatedSubCount), U:$($customPolicySetUpdatedSubCount))</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>ScopeId</th>
<th>PolicySet DisplayName</th>
<th>PolicySetId</th>
<th>Category</th>
<th>Unique assignments</th>
<th>Policies used in PolicySet</th>
<th>Created/Updated</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYChangeTrackingCustomPolicySet = $null
        $htmlSUMMARYChangeTrackingCustomPolicySet = foreach ($entry in $customPolicySetCreatedOrUpdated | Sort-Object -Property CreatedOn, UpdatedOn -Descending) {
            $createdOnGt = $false
            if ($entry.CreatedOn -ne '') {
                $createdOn = ($entry.CreatedOn)
                if ([datetime]($entry.CreatedOn) -gt $xdaysAgo) {
                    $createdOnGt = $true
                }
            }
            else {
                $createdOn = ''
            }

            $updatedOnGt = $false
            if ($entry.updatedOn -ne '') {
                $updatedOn = ($entry.UpdatedOn)
                if ([datetime]($entry.UpdatedOn) -gt $xdaysAgo) {
                    $updatedOnGt = $true
                }
                $updatedOnGt = $true
            }
            else {
                $updatedOn = ''
            }

            $createOnUpdatedOn = $null
            if ($createdOnGt) {
                $createOnUpdatedOn = 'Created'
            }
            if ($updatedOnGt) {
                $createOnUpdatedOn = 'Updated'
            }
            if ($createdOnGt -and $updatedOnGt) {
                $createOnUpdatedOn = 'Created&Updated'
            }

            @"
<tr>
<td>$($entry.Scope)</td>
<td>$($entry.ScopeId)</td>
<td>$($entry.PolicySetDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($entry.PolicySetDefinitionId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($entry.PolicySetCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($entry.UniqueAssignments -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($entry.PoliciesUsed)</td>
<td>$createOnUpdatedOn</td>
<td>$($entry.CreatedOn)</td>
<td>$($entry.CreatedBy)</td>
<td>$($entry.UpdatedOn)</td>
<td>$($entry.UpdatedBy)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingCustomPolicySet)
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
linked_filters: true,
col_0: 'select',
col_7: 'multiple',
locale: 'en-US',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $customPolicySetCreatedOrUpdatedCount Created/Updated custom PolicySet definitions</span></p>
"@)
    }
    #endregion ChangeTrackingCustomPolicySet

    #region ChangeTrackingPolicyAssignments
    if ($policyAssignmentsCreatedOrUpdatedCount -gt 0) {
        $tfCount = $policyAssignmentsCreatedOrUpdatedCount
        $htmlTableId = 'TenantSummary_ChangeTrackingPolicyAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingPolicyAssignments"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $policyAssignmentsCreatedOrUpdatedCount Created/Updated Policy assignments ($policyAssignmentSummaryCt)</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Management Group Id</th>
<th>Management Group Name</th>
<th>SubscriptionId</th>
<th>Subscription Name</th>
<th>Inheritance</th>
<th>ScopeExcluded</th>
<th>Exemption applies</th>
<th>Policy/Set DisplayName</th>
<th>Policy/Set Description</th>
<th>Policy/SetId</th>
<th>Policy/Set</th>
<th>Type</th>
<th>Category</th>
<th>Effect</th>
<th>Parameters</th>
<th>Enforcement</th>
<th>NonCompliance Message</th>
"@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
<th>Policies NonCmplnt</th>
<th>Policies Compliant</th>
<th>Resources NonCmplnt</th>
<th>Resources Compliant</th>
<th>Resources Conflicting</th>
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
<th>Role/Assignment $noteOrNot</th>
<th>Assignment DisplayName</th>
<th>Assignment Description</th>
<th>AssignmentId</th>
<th>Created/Updated</th>
<th>AssignedBy</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYChangeTrackingPolicyAssignments = $null
        $htmlSUMMARYChangeTrackingPolicyAssignments = foreach ($policyAssignment in $policyAssignmentsCreatedOrUpdated | Sort-Object -Property CreatedOn, UpdatedOn -Descending) {
            $createdOnGt = $false
            if ($policyAssignment.CreatedOn -ne '') {
                $createdOn = ($policyAssignment.CreatedOn)
                if ([datetime]($policyAssignment.CreatedOn) -gt $xdaysAgo) {
                    $createdOnGt = $true
                }
            }
            else {
                $createdOn = ''
            }

            $updatedOnGt = $false
            if ($policyAssignment.updatedOn -ne '') {
                $updatedOn = ($policyAssignment.UpdatedOn)
                if ([datetime]($policyAssignment.UpdatedOn) -gt $xdaysAgo) {
                    $updatedOnGt = $true
                }
                $updatedOnGt = $true
            }
            else {
                $updatedOn = ''
            }

            $createOnUpdatedOn = $null
            if ($createdOnGt) {
                $createOnUpdatedOn = 'Created'
            }
            if ($updatedOnGt) {
                $createOnUpdatedOn = 'Updated'
            }
            if ($createdOnGt -and $updatedOnGt) {
                $createOnUpdatedOn = 'Created&Updated'
            }

            if ($policyAssignment.PolicyType -eq 'Custom') {
                $policyName = ($policyAssignment.PolicyName -replace '<', '&lt;' -replace '>', '&gt;')
            }
            else {
                $policyName = $policyAssignment.PolicyName
            }

            @"
<tr>
<td>$($policyAssignment.mgOrSubOrRG)</td>
<td>$($policyAssignment.MgId)</td>
<td>$($policyAssignment.MgName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.SubscriptionId)</td>
<td>$($policyAssignment.SubscriptionName)</td>
<td>$($policyAssignment.Inheritance)</td>
<td>$($policyAssignment.ExcludedScope)</td>
<td>$($policyAssignment.ExemptionScope)</td>
<td>$($policyName)</td>
<td>$($policyAssignment.PolicyDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.PolicyVariant)</td>
<td>$($policyAssignment.PolicyType)</td>
<td>$($policyAssignment.PolicyCategory -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($policyAssignment.Effect)</td>
<td>$($policyAssignment.PolicyAssignmentParameters)</td>
<td>$($policyAssignment.PolicyAssignmentEnforcementMode)</td>
<td>$($policyAssignment.PolicyAssignmentNonComplianceMessages)</td>
"@

            if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
                @"
<td>$($policyAssignment.NonCompliantPolicies)</td>
<td>$($policyAssignment.CompliantPolicies)</td>
<td>$($policyAssignment.NonCompliantResources)</td>
<td>$($policyAssignment.CompliantResources)</td>
<td>$($policyAssignment.ConflictingResources)</td>
"@
            }

            @"
<td class="breakwordall">$($policyAssignment.RelatedRoleAssignments)</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDisplayName -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentDescription -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td class="breakwordall">$($policyAssignment.PolicyAssignmentId -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$createOnUpdatedOn</td>
<td>$($policyAssignment.AssignedBy)</td>
<td>$($policyAssignment.CreatedOn)</td>
<td>$($policyAssignment.CreatedBy)</td>
<td>$($policyAssignment.UpdatedOn)</td>
<td>$($policyAssignment.UpdatedBy)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingPolicyAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
linked_filters: true,
col_0: 'select',
            col_6: 'select',
            col_7: 'select',
            col_11: 'select',
            col_12: 'select',
            col_14: 'select',
            col_16: 'select',
'@)
        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
                col_27: 'multiple',
'@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
                col_22: 'multiple',
'@)
        }
        [void]$htmlTenantSummary.AppendLine(@'
            locale: 'en-US',
            col_types: [
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
'@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
                'number',
                'number',
                'number',
                'number',
                'number',
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@'
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring',
                'date',
                'caseinsensitivestring'
            ],
'@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
            watermark: ['', '', '', 'try [nonempty]', '', 'thisScope', '', '', '', '', '', '','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
'@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
            watermark: ['', '', '', 'try [nonempty]', '', 'thisScope', '', '', '', '', '', '','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@'
        extensions: [
            {
                name: 'colsVisibility',
'@)

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            [void]$htmlTenantSummary.AppendLine(@'
                at_start: [9, 23, 24],
'@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@'
                at_start: [9, 18, 19],
'@)
        }

        [void]$htmlTenantSummary.AppendLine(@"
                text: 'Columns: ',
                enable_tick_all: true
            },
            { name: 'sort'
            }
        ]
    };
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $policyAssignmentsCreatedOrUpdatedCount Created/Updated Policy assignments</span></p>
"@)
    }
    #endregion ChangeTrackingPolicyAssignments

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)

    #endregion ctpolicy

    #region ctrbac
    [void]$htmlTenantSummary.AppendLine(@"
<button type="button" class="collapsible" id="tenantSummaryChangeTrackingRBAC"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/rbacrole.svg"> <span class="$ctContenIndicatorRBAC">RBAC</span></button>
<div class="content TenantSummaryContent">
"@)

    #region ChangeTrackingCustomRoles
    if ($customRoleDefinitionsCreatedOrUpdatedCount -gt 0) {
        $tfCount = $customRoleDefinitionsCreatedOrUpdatedCount
        $htmlTableId = 'TenantSummary_ChangeTrackingCustomRoles'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingCustomRoles"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $customRoleDefinitionsCreatedOrUpdatedCount Created/Updated custom Role definitions (Created: $customRoleDefinitionsCreatedCount; Updated: $customRoleDefinitionsUpdatedCount)</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Role Name</th>
<th>RoleId</th>
<th>Assignable Scopes</th>
<th>Data</th>
<th>Created/Updated</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
<th>UpdatedOn</th>
<th>UpdatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYChangeTrackingCustomRoles = $null
        $htmlSUMMARYChangeTrackingCustomRoles = foreach ($entry in $customRoleDefinitionsCreatedOrUpdated | Sort-Object @{Expression = { $_.Json.properties.createdOn } }, @{Expression = { $_.Json.properties.updatedOn } } -Descending) {
            $createdBy = $entry.Json.properties.createdBy
            if ($htIdentitiesWithRoleAssignmentsUnique.($createdBy)) {
                $createdBy = $htIdentitiesWithRoleAssignmentsUnique.($createdBy).details
            }

            $createdOn = $entry.Json.properties.createdOn
            $createdOnFormated = $createdOn
            $createdOnUpdatedOn = 'Created'

            $updatedOn = $entry.Json.properties.updatedOn
            if ($updatedOn -eq $createdOn) {
                $updatedOnFormated = ''
                $updatedByRemoveNoiseOrNot = ''
            }
            else {
                if ($createdOn -gt $xdaysAgo) {
                    $createdOnUpdatedOn = 'Created&Updated'
                }
                else {
                    $createdOnUpdatedOn = 'Updated'
                }
                $updatedOnFormated = $updatedOn
                $updatedByRemoveNoiseOrNot = $entry.Json.properties.updatedBy
                if ($htIdentitiesWithRoleAssignmentsUnique.($updatedByRemoveNoiseOrNot)) {
                    $updatedByRemoveNoiseOrNot = $htIdentitiesWithRoleAssignmentsUnique.($updatedByRemoveNoiseOrNot).details
                }
            }

            @"
<tr>
<td>$($entry.Name -replace '<', '&lt;' -replace '>', '&gt;')</td>
<td>$($entry.Id)</td>
<td>$(($entry.AssignableScopes | Measure-Object).count) ($($entry.AssignableScopes -join "$CsvDelimiterOpposite "))</td>
<td>$($roleManageData)</td>
<td>$createdOnUpdatedOn</td>
<td>$createdOnFormated</td>
<td>$createdBy</td>
<td>$updatedOnFormated</td>
<td>$updatedByRemoveNoiseOrNot</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingCustomRoles)
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
linked_filters: true,
col_3: 'select',
col_4: 'select',
locale: 'en-US',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $customRoleDefinitionsCreatedOrUpdatedCount Created/Updated custom Role definitions</span></p>
"@)
    }
    #endregion ChangeTrackingCustomRoles

    #region ChangeTrackingRoleAssignments
    if ($roleAssignmentsCreatedCount -gt 0) {
        $tfCount = $roleAssignmentsCreatedCount
        $htmlTableId = 'TenantSummary_ChangeTrackingRoleAssignments'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingRoleAssignments"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $roleAssignmentsCreatedCount Created Role assignments $rbacAssignmentSummaryCt (impacted identities: $roleAssignmentsCreatedImpactedIdentitiesCount)</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Scope</th>
<th>Role</th>
<th>Role Id</th>
<th>Role Type</th>
<th>Data</th>
<th>Identity Displayname</th>
<th>Identity SignInName</th>
<th>Identity ObjectId</th>
<th>Identity Type</th>
<th>Applicability</th>
<th>Applies through membership <abbr title="Note: the identity might not be a direct member of the group it could also be member of a nested group"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr></th>
<th>Group Details</th>
<th>PIM</th>
<th>PIM assignment type</th>
<th>PIM start</th>
<th>PIM end</th>
<th>Role AssignmentId</th>
<th>Related Policy Assignment $noteOrNot</th>
<th>CreatedOn</th>
<th>CreatedBy</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYChangeTrackingRoleAssignments = $null
        $htmlSUMMARYChangeTrackingRoleAssignments = [System.Text.StringBuilder]::new()
        foreach ($entry in $roleAssignmentsCreated | Sort-Object -Property CreatedOn -Descending) {
            if ($entry.RoleType -eq 'Custom') {
                $roleName = ($entry.Role -replace '<', '&lt;' -replace '>', '&gt;')
            }
            else {
                $roleName = $entry.Role
            }
            [void]$htmlSUMMARYChangeTrackingRoleAssignments.AppendFormat(
                @'
<tr>
<td>{0}</td>
<td>{1}</td>
<td>{2}</td>
<td>{3}</td>
<td>{4}</td>
<td class="breakwordall">{5}</td>
<td class="breakwordall">{6}</td>
<td class="breakwordall">{7}</td>
<td>{8}</td>
<td>{9}</td>
<td>{10}</td>
<td>{11}</td>
<td>{12}</td>
<td>{13}</td>
<td>{14}</td>
<td>{15}</td>
<td class="breakwordall">{16}</td>
<td class="breakwordall">{17}</td>
<td class="breakwordall">{18}</td>
<td class="breakwordall">{19}</td>
</tr>
'@, $entry.TenOrMgOrSubOrRGOrRes,
                $roleName,
                $entry.RoleId,
                $entry.RoleType,
                $entry.RoleDataRelated,
                $entry.ObjectDisplayName,
                $entry.ObjectSignInName,
                $entry.ObjectId,
                $entry.ObjectType,
                $entry.AssignmentType,
                $entry.AssignmentInheritFrom,
                $entry.GroupMembersCount,
                $entry.RoleAssignmentPIMRelated,
                $entry.RoleAssignmentPIMAssignmentType,
                $entry.RoleAssignmentPIMAssignmentSlotStart,
                $entry.RoleAssignmentPIMAssignmentSlotEnd,
                $entry.RoleAssignmentId,
                ($entry.RbacRelatedPolicyAssignment -replace '<', '&lt;' -replace '>', '&gt;'),
                $entry.CreatedOn,
                $entry.CreatedBy
            )
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingRoleAssignments)
        [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
linked_filters: true,
col_0: 'select',
col_3: 'select',
col_4: 'select',
col_8: 'multiple',
col_9: 'select',
col_12: 'select',
col_13: 'select',
locale: 'en-US',
col_types: [
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'date',
    'date',
    'caseinsensitivestring',
    'caseinsensitivestring',
    'date',
    'caseinsensitivestring'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $customRoleDefinitionsCreatedOrUpdatedCount Created/Updated custom Role definitions</span></p>
"@)
    }
    #endregion ChangeTrackingRoleAssignments

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)

    #endregion ctrbac

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        #region ctresources
        [void]$htmlTenantSummary.AppendLine(@"
<button type="button" class="collapsible" id="tenantSummaryChangeTrackingResources"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/10001-icon-service-All-Resources.svg"> <span class="$ctContenIndicatorResources">Resources</span></button>
<div class="content TenantSummaryContent">
"@)

        #region ChangeTrackingResources
        if ($resourcesCreatedOrChangedCount -gt 0) {
            $tfCount = $resourcesCreatedOrChangedGroupedCount
            $htmlTableId = 'TenantSummary_ChangeTrackingResources'
            [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_ChangeTrackingResources"><i class="padlxx fa fa-check-circle blue" aria-hidden="true"></i> <span class="valignMiddle"> $resourcesCreatedOrChangedCount Created/Changed Resources ($resourcesCreatedOrChangedGroupedCount ResourceTypes) (Created&Changed: $resourcesCreatedAndChangedCount; Created: $resourcesCreatedCount; Changed: $resourcesChangedCount)</span></button>
<div class="content TenantSummary">
<i class="padlxxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>ResourceType</th>
<th>Resource Count</th>
<th>Created&Changed</th>
<th>Created&Changed Subs</th>
<th>Created</th>
<th>Created Subs</th>
<th>Changed</th>
<th>Changed Subs</th>
</tr>
</thead>
<tbody>
"@)
            $htmlSUMMARYChangeTrackingResources = $null
            $htmlSUMMARYChangeTrackingResources = foreach ($entry in $resourcesCreatedOrChangedGrouped) {
                $createdAndChanged = $entry.group.where( { $_.createdTime -gt $xdaysAgo -and $_.changedTime -gt $xdaysAgo })
                $createdAndChangedCount = $createdAndChanged.Count
                $createdAndChangedInSubscriptionsCount = ($createdAndChanged | Group-Object -Property subscriptionId | Measure-Object).Count

                $created = $entry.group.where( { $_.createdTime -gt $xdaysAgo })
                $createdCount = $created.Count
                $createdInSubscriptionsCount = ($created | Group-Object -Property subscriptionId | Measure-Object).Count

                $changed = $entry.group.where( { $_.changedTime -gt $xdaysAgo })
                $changedCount = $changed.Count
                $changedInSubscriptionsCount = ($changed | Group-Object -Property subscriptionId | Measure-Object).Count

                @"
<tr>
<td>$($entry.Name)</td>
<td>$($entry.Count)</td>
<td>$($createdAndChangedCount)</td>
<td>$($createdAndChangedInSubscriptionsCount)</td>
<td>$($createdCount)</td>
<td>$($createdInSubscriptionsCount)</td>
<td>$($changedCount)</td>
<td>$($changedInSubscriptionsCount)</td>
</tr>
"@
            }
            [void]$htmlTenantSummary.AppendLine($htmlSUMMARYChangeTrackingResources)
            [void]$htmlTenantSummary.AppendLine(@"
</tbody>
</table>
</div>
<script>
function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
window.helpertfConfig4$htmlTableId =1;
var tfConfig4$htmlTableId = {
base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
            if ($tfCount -gt 10) {
                $spectrum = "10, $tfCount"
                if ($tfCount -gt 50) {
                    $spectrum = "10, 25, 50, $tfCount"
                }
                if ($tfCount -gt 100) {
                    $spectrum = "10, 30, 50, 100, $tfCount"
                }
                if ($tfCount -gt 500) {
                    $spectrum = "10, 30, 50, 100, 250, $tfCount"
                }
                if ($tfCount -gt 1000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
                }
                if ($tfCount -gt 2000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
                }
                if ($tfCount -gt 3000) {
                    $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
                }
                [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
            }
            [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
col_types: [
    'caseinsensitivestring',
    'number',
    'number',
    'number',
    'number',
    'number',
    'number',
    'number'
],
extensions: [{ name: 'sort' }]
};
var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
tf.init();}}
</script>
"@)
        }
        else {
            [void]$htmlTenantSummary.AppendLine(@"
<p><i class="padlxx fa fa-ban" aria-hidden="true"></i> <span class="valignMiddle"> $resourcesCreatedOrChangedCount Created/Changed Resources</span></p>
"@)
        }
        #endregion ChangeTrackingResources

        [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)

        #endregion ctresources
    }

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)

    $endChangeTracking = Get-Date
    Write-Host "   ChangeTracking duration: $((NEW-TIMESPAN -Start $startChangeTracking -End $endChangeTracking).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startChangeTracking -End $endChangeTracking).TotalSeconds) seconds)"
    #endregion tenantSummaryChangeTracking

    showMemoryUsage

    #region tenantSummaryNaming
    [void]$htmlTenantSummary.AppendLine(@'
    <button type="button" class="collapsible" id="tenantSummaryFindings"><hr class="hr-textFindings" data-content="Findings" /></button>
    <div class="content TenantSummaryContent">
'@)

    $startSUMMARYNaming = Get-Date
    Write-Host '  processing TenantSummary Findings'


    $namingPolicyCount = $htNamingValidation.Policy.values.count
    if ($namingPolicyCount -gt 0) {
        $tfCount = $namingPolicyCount
        $htmlTableId = 'TenantSummary_NamingPolicy'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingPolicy"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policydefinition.svg"> <span class="valignMiddle"><b>Policy</b> $($namingPolicyCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Name Invalid chars</th>
<th>DisplayName</th>
<th>DisplayName Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingPolicy = $null
        $cnter = 0
        $htmlSUMMARYNamingPolicy = foreach ($key in $htNamingValidation.Policy.Keys | Sort-Object) {
            $id = $key -replace '<', '&lt;' -replace '>', '&gt;'
            if ($htNamingValidation.Policy.($key).name) {
                $name = $htNamingValidation.Policy.($key).name -replace '<', '&lt;' -replace '>', '&gt;'
                $nameInvalidChars = $htNamingValidation.Policy.($key).nameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $name = ''
                $nameInvalidChars = ''
            }

            if ($htNamingValidation.Policy.($key).displayName) {
                $displayName = $htNamingValidation.Policy.($key).displayName -replace '<', '&lt;' -replace '>', '&gt;'
                $displayNameInvalidChars = $htNamingValidation.Policy.($key).displayNameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $displayName = ''
                $displayNameInvalidChars = ''
            }


            @"
<tr>
<td>$($id)</td>
<td>$($name)</td>
<td>$($nameInvalidChars)</td>
<td>$($displayName)</td>
<td>$($displayNameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingPolicy)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_0: 'select',
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policydefinition.svg"> <span class="valignMiddle">Policy $($namingPolicyCount) Naming findings</span></p>
"@)
    }

    $namingPolicySetCount = $htNamingValidation.PolicySet.values.count
    if ($namingPolicySetCount -gt 0) {
        $tfCount = $namingPolicySetCount
        $htmlTableId = 'TenantSummary_NamingPolicySet'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingPolicySet"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policysetdefinition.svg"> <span class="valignMiddle"><b>PolicySet</b> $($namingPolicySetCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Name Invalid chars</th>
<th>DisplayName</th>
<th>DisplayName Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingPolicySet = $null
        $cnter = 0
        $htmlSUMMARYNamingPolicySet = foreach ($key in $htNamingValidation.PolicySet.Keys | Sort-Object) {
            $id = $key -replace '<', '&lt;' -replace '>', '&gt;'
            if ($htNamingValidation.PolicySet.($key).name) {
                $name = $htNamingValidation.PolicySet.($key).name -replace '<', '&lt;' -replace '>', '&gt;'
                $nameInvalidChars = $htNamingValidation.PolicySet.($key).nameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $name = ''
                $nameInvalidChars = ''
            }

            if ($htNamingValidation.PolicySet.($key).displayName) {
                $displayName = $htNamingValidation.PolicySet.($key).displayName -replace '<', '&lt;' -replace '>', '&gt;'
                $displayNameInvalidChars = $htNamingValidation.PolicySet.($key).displayNameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $displayName = ''
                $displayNameInvalidChars = ''
            }


            @"
<tr>
<td>$($id)</td>
<td>$($name)</td>
<td>$($nameInvalidChars)</td>
<td>$($displayName)</td>
<td>$($displayNameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingPolicySet)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policysetdefinition.svg"> <span class="valignMiddle">PolicySet $($namingPolicySetCount) Naming findings</span></p>
"@)
    }

    $namingPolicyAssignmentCount = $htNamingValidation.PolicyAssignment.values.count
    if ($namingPolicyAssignmentCount -gt 0) {
        $tfCount = $namingPolicyAssignmentCount
        $htmlTableId = 'TenantSummary_NamingPolicyAssignment'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingPolicyAssignment"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policyassignment.svg"> <span class="valignMiddle"><b>Policy assignment</b> $($namingPolicyAssignmentCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Name Invalid chars</th>
<th>DisplayName</th>
<th>DisplayName Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingPolicyAssignment = $null
        $cnter = 0
        $htmlSUMMARYNamingPolicyAssignment = foreach ($key in $htNamingValidation.PolicyAssignment.Keys | Sort-Object) {
            $id = $key -replace '<', '&lt;' -replace '>', '&gt;'
            if ($htNamingValidation.PolicyAssignment.($key).name) {
                $name = $htNamingValidation.PolicyAssignment.($key).name -replace '<', '&lt;' -replace '>', '&gt;'
                $nameInvalidChars = $htNamingValidation.PolicyAssignment.($key).nameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $name = ''
                $nameInvalidChars = ''
            }

            if ($htNamingValidation.PolicyAssignment.($key).displayName) {
                $displayName = $htNamingValidation.PolicyAssignment.($key).displayName -replace '<', '&lt;' -replace '>', '&gt;'
                $displayNameInvalidChars = $htNamingValidation.PolicyAssignment.($key).displayNameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $displayName = ''
                $displayNameInvalidChars = ''
            }


            @"
<tr>
<td>$($id)</td>
<td>$($name)</td>
<td>$($nameInvalidChars)</td>
<td>$($displayName)</td>
<td>$($displayNameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingPolicyAssignment)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/policyassignment.svg"> <span class="valignMiddle">Policy assignment $($namingPolicyAssignmentCount) Naming findings</span></p>
"@)
    }

    $namingManagementGroupCount = $htNamingValidation.ManagementGroup.values.count
    if ($namingManagementGroupCount -gt 0) {
        $tfCount = $namingManagementGroupCount
        $htmlTableId = 'TenantSummary_NamingManagementGroup'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingManagementGroup"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle"><b>Management Group</b> $($namingManagementGroupCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Name Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingManagementGroup = $null
        $cnter = 0
        $htmlSUMMARYNamingManagementGroup = foreach ($key in $htNamingValidation.ManagementGroup.Keys | Sort-Object) {
            $id = $key -replace '<', '&lt;' -replace '>', '&gt;'
            if ($htNamingValidation.ManagementGroup.($key).name) {
                $name = $htNamingValidation.ManagementGroup.($key).name -replace '<', '&lt;' -replace '>', '&gt;'
                $nameInvalidChars = $htNamingValidation.ManagementGroup.($key).nameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $name = ''
                $nameInvalidChars = ''
            }

            @"
<tr>
<td>$($id)</td>
<td>$($name)</td>
<td>$($nameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingManagementGroup)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">Management Group $($namingManagementGroupCount) Naming findings</span></p>
"@)
    }


    $namingSubscriptionCount = $htNamingValidation.Subscription.values.count
    if ($namingSubscriptionCount -gt 0) {
        $tfCount = $namingSubscriptionCount
        $htmlTableId = 'TenantSummary_NamingSubscription'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingSubscription"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle"><b>Subscription</b> $($namingSubscriptionCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>DisplayName</th>
<th>DisplayName Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingSubscription = $null
        $htmlSUMMARYNamingSubscription = foreach ($key in $htNamingValidation.Subscription.Keys | Sort-Object) {

            if ($htNamingValidation.Subscription.($key).displayName) {
                $displayName = $htNamingValidation.Subscription.($key).displayName -replace '<', '&lt;' -replace '>', '&gt;'
                $displayNameInvalidChars = $htNamingValidation.Subscription.($key).displayNameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $displayName = ''
                $displayNameInvalidChars = ''
            }

            @"
<tr>
<td>$($key)</td>
<td>$($displayName)</td>
<td>$($displayNameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingSubscription)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle">Subscription $($namingSubscriptionCount) Naming findings</span></p>
"@)
    }


    $namingRoleCount = $htNamingValidation.Role.values.count
    if ($namingRoleCount -gt 0) {
        $tfCount = $namingRoleCount
        $htmlTableId = 'TenantSummary_NamingRole'
        [void]$htmlTenantSummary.AppendLine(@"
<button onclick="loadtf$("func_$htmlTableId")()" type="button" class="collapsible" id="buttonTenantSummary_NamingRole"><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/rbacrole.svg"> <span class="valignMiddle"><b>RBAC</b> $($namingRoleCount) Naming findings</span></button>
<div class="content TenantSummary">
<i class="padlxx fa fa-table" aria-hidden="true"></i> Download CSV <a class="externallink" href="#" onclick="download_table_as_csv_semicolon('$htmlTableId');">semicolon</a> | <a class="externallink" href="#" onclick="download_table_as_csv_comma('$htmlTableId');">comma</a>
<table id="$htmlTableId" class="summaryTable">
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Name Invalid chars</th>
</tr>
</thead>
<tbody>
"@)
        $htmlSUMMARYNamingRole = $null
        $htmlSUMMARYNamingRole = foreach ($key in $htNamingValidation.Role.Keys | Sort-Object) {

            if ($htNamingValidation.Role.($key).roleName) {
                $roleName = $htNamingValidation.Role.($key).roleName -replace '<', '&lt;' -replace '>', '&gt;'
                $roleNameInvalidChars = $htNamingValidation.Role.($key).roleNameInvalidChars -replace '<', '&lt;' -replace '>', '&gt;'
            }
            else {
                $roleName = ''
                $roleNameInvalidChars = ''
            }

            @"
<tr>
<td>$($key)</td>
<td>$($roleName)</td>
<td>$($roleNameInvalidChars)</td>
</tr>
"@
        }
        [void]$htmlTenantSummary.AppendLine($htmlSUMMARYNamingRole)
        [void]$htmlTenantSummary.AppendLine(@"
        </tbody>
    </table>
</div>
<script>
    function loadtf$("func_$htmlTableId")() { if (window.helpertfConfig4$htmlTableId !== 1) {
        window.helpertfConfig4$htmlTableId =1;
        var tfConfig4$htmlTableId = {
        base_path: 'https://www.azadvertizer.net/azgovvizv4/tablefilter/', rows_counter: true,
"@)
        if ($tfCount -gt 10) {
            $spectrum = "10, $tfCount"
            if ($tfCount -gt 50) {
                $spectrum = "10, 25, 50, $tfCount"
            }
            if ($tfCount -gt 100) {
                $spectrum = "10, 30, 50, 100, $tfCount"
            }
            if ($tfCount -gt 500) {
                $spectrum = "10, 30, 50, 100, 250, $tfCount"
            }
            if ($tfCount -gt 1000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, $tfCount"
            }
            if ($tfCount -gt 2000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, $tfCount"
            }
            if ($tfCount -gt 3000) {
                $spectrum = "10, 30, 50, 100, 250, 500, 750, 1000, 1500, 3000, $tfCount"
            }
            [void]$htmlTenantSummary.AppendLine(@"
paging: {results_per_page: ['Records: ', [$spectrum]]},/*state: {types: ['local_storage'], filters: true, page_number: true, page_length: true, sort: true},*/
"@)
        }
        [void]$htmlTenantSummary.AppendLine(@"
btn_reset: true, highlight_keywords: true, alternate_rows: true, auto_filter: { delay: 1100 }, no_results_message: true,
        col_types: [
            'caseinsensitivestring',
            'caseinsensitivestring',
            'caseinsensitivestring'
        ],
extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('$htmlTableId', tfConfig4$htmlTableId);
    tf.init();}}
</script>

"@)
    }
    else {
        [void]$htmlTenantSummary.AppendLine(@"
<p><img class="padlx imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/rbacrole.svg"> <span class="valignMiddle">RBAC $($namingRoleCount) Naming Findings</span></p>
"@)
    }

    $endSUMMARYNaming = Get-Date
    Write-Host "   SUMMARYMGs duration: $((NEW-TIMESPAN -Start $startSUMMARYNaming -End $endSUMMARYNaming).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSUMMARYNaming -End $endSUMMARYNaming).TotalSeconds) seconds)"

    [void]$htmlTenantSummary.AppendLine(@'
</div>
'@)
    #endregion tenantSummaryNaming

    $script:html += $htmlTenantSummary
    $htmlTenantSummary = $null
    $script:html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $script:html = $null

}
function removeInvalidFileNameChars {
    param(
        [Parameter(Mandatory = $true,
            Position = 0,
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true)]
        [String]$Name
    )
    if ($Name -like '`[Deprecated`]:*') {
        $Name = $Name -replace '\[Deprecated\]\:', '[Deprecated]'
    }
    if ($Name -like '`[Preview`]:*') {
        $Name = $Name -replace '\[Preview\]\:', '[Preview]'
    }
    if ($Name -like '`[ASC Private Preview`]:*') {
        $Name = $Name -replace '\[ASC Private Preview\]\:', '[ASC Private Preview]'
    }
    return ($Name -replace ':', '_' -replace '/', '_' -replace '\\', '_' -replace '<', '_' -replace '>', '_' -replace '\*', '_' -replace '\?', '_' -replace '\|', '_' -replace '"', '_')
}
function ResolveObjectIds($objectIds) {

    $arrayObjectIdsToCheck = @()
    $arrayObjectIdsToCheck = foreach ($objectToCheckIfAlreadyResolved in $objectIds) {
        if (-not $htPrincipals.($objectToCheckIfAlreadyResolved)) {
            $objectToCheckIfAlreadyResolved
        }
        else {
            #Write-Host "$objectToCheckIfAlreadyResolved already resolved"
        }
    }

    if ($arrayObjectIdsToCheck.Count -gt 0) {

        $counterBatch = [PSCustomObject] @{ Value = 0 }
        $batchSize = 1000
        $ObjectBatch = $arrayObjectIdsToCheck | Group-Object -Property { [math]::Floor($counterBatch.Value++ / $batchSize) }
        $ObjectBatchCount = ($ObjectBatch | Measure-Object).Count
        $batchCnt = 0

        foreach ($batch in $ObjectBatch) {
            $batchCnt++
            $objectsToProcess = '"{0}"' -f ($batch.Group -join '","')
            $currentTask = " Resolving ObjectIds - Batch #$batchCnt/$($ObjectBatchCount) ($(($batch.Group).Count)"
            $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/beta/directoryObjects/getByIds"
            $method = 'POST'
            $body = @"
        {
            "ids":[$($objectsToProcess)]
        }
"@
            $resolveObjectIds = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -body $body -currentTask $currentTask

            foreach ($identity in $resolveObjectIds) {
                if (-not $htPrincipals.($identity.id)) {
                    $arrayIdentityObject = [System.Collections.ArrayList]@()
                    if ($identity.'@odata.type' -eq '#microsoft.graph.user') {
                        if ($identity.userType -eq 'Guest') {
                            $script:htUserTypesGuest.($identity.id) = @{}
                            $script:htUserTypesGuest.($identity.id).userType = 'Guest'
                        }
                        $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                type        = 'User'
                                userType    = $identity.userType
                                id          = $identity.id
                                displayName = $identity.displayName
                                signInName  = $identity.userPrincipalName
                            })
                    }
                    if ($identity.'@odata.type' -eq '#microsoft.graph.group') {
                        $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                type        = 'Group'
                                id          = $identity.id
                                displayName = $identity.displayName
                            })
                    }
                    if ($identity.'@odata.type' -eq '#microsoft.graph.servicePrincipal') {
                        if ($identity.servicePrincipalType -eq 'Application') {
                            if ($identity.appOwnerOrganizationId -eq $azAPICallConf['checkContext'].Tenant.Id) {
                                $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                        type                   = 'ServicePrincipal'
                                        spTypeConcatinated     = 'SP APP INT'
                                        servicePrincipalType   = $identity.servicePrincipalType
                                        id                     = $identity.id
                                        appid                  = $identity.appId
                                        displayName            = $identity.displayName
                                        appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                        alternativeNames       = $identity.alternativeNames
                                    })
                            }
                            else {
                                $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                        type                   = 'ServicePrincipal'
                                        spTypeConcatinated     = 'SP APP EXT'
                                        servicePrincipalType   = $identity.servicePrincipalType
                                        id                     = $identity.id
                                        appid                  = $identity.appId
                                        displayName            = $identity.displayName
                                        appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                        alternativeNames       = $identity.alternativeNames
                                    })
                            }
                        }
                        elseif ($identity.servicePrincipalType -eq 'ManagedIdentity') {
                            $miType = 'unknown'
                            if ($identity.alternativeNames) {
                                foreach ($altName in $identity.alternativeNames) {
                                    if ($altName -like 'isExplicit=*') {
                                        $splitAltName = $altName.split('=')
                                        if ($splitAltName[1] -eq 'true') {
                                            $miType = 'Usr'
                                        }
                                        if ($splitAltName[1] -eq 'false') {
                                            $miType = 'Sys'
                                        }
                                    }
                                }
                            }
                            $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                    type                   = 'ServicePrincipal'
                                    spTypeConcatinated     = "SP MI $miType"
                                    servicePrincipalType   = $identity.servicePrincipalType
                                    id                     = $identity.id
                                    appid                  = $identity.appId
                                    displayName            = $identity.displayName
                                    appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                    alternativeNames       = $identity.alternativeNames
                                })
                        }
                        else {
                            $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                    type                   = 'servicePrincipal'
                                    spTypeConcatinated     = "SP $($identity.servicePrincipalType)"
                                    servicePrincipalType   = $identity.servicePrincipalType
                                    id                     = $identity.id
                                    appid                  = $identity.appId
                                    displayName            = $identity.displayName
                                    appOwnerOrganizationId = $identity.appOwnerOrganizationId
                                    alternativeNames       = $identity.alternativeNames
                                })
                        }
                        if (-not $htServicePrincipals.($identity.id)) {
                            $script:htServicePrincipals.($identity.id) = @{}
                            $script:htServicePrincipals.($identity.id) = $arrayIdentityObject
                        }
                    }
                    if (-not $htPrincipals.($identity.id)) {
                        $script:htPrincipals.($identity.id) = $arrayIdentityObject
                    }
                }
            }
            if ($batch.Group.Count -ne $resolveObjectIds.Count) {
                foreach ($objectId in $batch.Group) {
                    if ($resolveObjectIds.id -notcontains $objectId) {
                        if (-not $htPrincipals.($objectId)) {
                            $arrayIdentityObject = [System.Collections.ArrayList]@()
                            $null = $arrayIdentityObject.Add([PSCustomObject]@{
                                    type = 'Unknown'
                                    id   = $objectId
                                })
                            $script:htPrincipals.($objectId) = $arrayIdentityObject
                        }
                        else {
                            #Write-Host "$($objectId) was already collected"
                        }
                    }
                }
            }
        }
    }
}
function runInfo {
    #region RunInfo
    Write-Host 'Run Info:'
    if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $true) {
        Write-Host ' Creating HierarchyMap only' -ForegroundColor Green
    }
    else {
        $script:paramsUsed = $Null
        $startTimeUTC = ((Get-Date).ToUniversalTime()).ToString('dd-MMM-yyyy HH:mm:ss')
        $script:paramsUsed += "Date: $startTimeUTC (UTC); Version: $ProductVersion &#13;"

        if ($azAPICallConf['htParameters'].accountType -eq 'ServicePrincipal') {
            $script:paramsUsed += "ExecutedBy: $($azAPICallConf['checkContext'].Account.Id) (App/ClientId) ($($azAPICallConf['htParameters'].accountType)) &#13;"
        }
        elseif ($azAPICallConf['htParameters'].accountType -eq 'ManagedService') {
            $script:paramsUsed += "ExecutedBy: $($azAPICallConf['checkContext'].Account.Id) (Id) ($($azAPICallConf['htParameters'].accountType)) &#13;"
        }
        elseif ($azAPICallConf['htParameters'].accountType -eq 'ClientAssertion') {
            $script:paramsUsed += "ExecutedBy: $($azAPICallConf['checkContext'].Account.Id) (App/ClientId) ($($azAPICallConf['htParameters'].accountType)) &#13;"
        }
        else {
            $script:paramsUsed += "ExecutedBy: $($azAPICallConf['checkContext'].Account.Id) ($($azAPICallConf['htParameters'].accountType), $($azAPICallConf['htParameters'].userType)) &#13;"
        }
        #$script:paramsUsed += "ManagementGroupId: $($ManagementGroupId) &#13;"
        $script:paramsUsed += 'HierarchyMapOnly: false &#13;'
        Write-Host " Creating HierarchyMap, TenantSummary, DefinitionInsights and ScopeInsights - use parameter: '-HierarchyMapOnly' to only create the HierarchyMap" -ForegroundColor Yellow

        if ($azAPICallConf['htParameters'].ManagementGroupsOnly) {
            Write-Host " Management Groups only = $($azAPICallConf['htParameters'].ManagementGroupsOnly)" -ForegroundColor Green
        }
        else {
            Write-Host " Management Groups only = $($azAPICallConf['htParameters'].ManagementGroupsOnly) - use parameter -ManagementGroupsOnly to only collect data for Management Groups" -ForegroundColor Yellow
        }

        if (($SubscriptionQuotaIdWhitelist).count -eq 1 -and $SubscriptionQuotaIdWhitelist[0] -eq 'undefined') {
            Write-Host " Subscription Whitelist disabled - use parameter: '-SubscriptionQuotaIdWhitelist' to whitelist QuotaIds" -ForegroundColor Yellow
            $script:paramsUsed += 'SubscriptionQuotaIdWhitelist: false &#13;'
        }
        else {
            Write-Host ' Subscription Whitelist enabled. AzGovViz will only process Subscriptions where QuotaId startswith one of the following strings:' -ForegroundColor Green
            foreach ($quotaIdFromSubscriptionQuotaIdWhitelist in $SubscriptionQuotaIdWhitelist) {
                Write-Host "  - $($quotaIdFromSubscriptionQuotaIdWhitelist)" -ForegroundColor Green
            }
            foreach ($whiteListEntry in $SubscriptionQuotaIdWhitelist) {
                if ($whiteListEntry -eq 'undefined') {
                    Write-Host "When defining the 'SubscriptionQuotaIdWhitelist' make sure to remove the 'undefined' entry from the array :)" -ForegroundColor Red
                    Throw 'Error - AzGovViz: check the last console output for details'
                }
            }
            $script:paramsUsed += "SubscriptionQuotaIdWhitelist: $($SubscriptionQuotaIdWhitelist -join ', ') &#13;"
        }

        if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $true) {
            Write-Host " Microsoft Defender for Cloud Secure Score disabled (-NoMDfCSecureScore = $($azAPICallConf['htParameters'].NoMDfCSecureScore))" -ForegroundColor Green
            $script:paramsUsed += 'NoMDfCSecureScore: true &#13;'
        }
        else {
            Write-Host " Microsoft Defender for Cloud Secure Score enabled - use parameter: '-NoMDfCSecureScore' to disable" -ForegroundColor Yellow
            $script:paramsUsed += 'NoMDfCSecureScore: false &#13;'
        }

        if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $true) {
            Write-Host " Scrub Identity information for identityType='User' enabled (-DoNotShowRoleAssignmentsUserData = $($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData))" -ForegroundColor Green
            $script:paramsUsed += 'DoNotShowRoleAssignmentsUserData: true &#13;'
        }
        else {
            Write-Host " Scrub Identity information for identityType='User' disabled - use parameter: '-DoNotShowRoleAssignmentsUserData' to scrub information such as displayName and signInName (email) for identityType='User'" -ForegroundColor Yellow
            $script:paramsUsed += 'DoNotShowRoleAssignmentsUserData: false &#13;'
        }

        if ($LimitCriticalPercentage -eq 80) {
            Write-Host " ARM Limits warning set to 80% (default) - use parameter: '-LimitCriticalPercentage' to set warning level accordingly" -ForegroundColor Yellow
            #$script:paramsUsed += "LimitCriticalPercentage: 80% (default) &#13;"
        }
        else {
            Write-Host " ARM Limits warning set to $($LimitCriticalPercentage)% (custom)" -ForegroundColor Green
            #$script:paramsUsed += "LimitCriticalPercentage: $($LimitCriticalPercentage)% &#13;"
        }

        if ($azAPICallConf['htParameters'].NoPolicyComplianceStates -eq $false) {
            Write-Host " Policy States enabled - use parameter: '-NoPolicyComplianceStates' to disable Policy States" -ForegroundColor Yellow
            $script:paramsUsed += 'NoPolicyComplianceStates: false &#13;'
        }
        else {
            Write-Host " Policy States disabled (-NoPolicyComplianceStates = $($azAPICallConf['htParameters'].NoPolicyComplianceStates))" -ForegroundColor Green
            $script:paramsUsed += 'NoPolicyComplianceStates: true &#13;'
        }

        if (-not $NoResourceDiagnosticsPolicyLifecycle) {
            Write-Host " Resource Diagnostics Policy Lifecycle recommendations enabled - use parameter: '-NoResourceDiagnosticsPolicyLifecycle' to disable Resource Diagnostics Policy Lifecycle recommendations" -ForegroundColor Yellow
            $script:paramsUsed += 'NoResourceDiagnosticsPolicyLifecycle: false &#13;'
        }
        else {
            Write-Host " Resource Diagnostics Policy Lifecycle disabled (-NoResourceDiagnosticsPolicyLifecycle = $($NoResourceDiagnosticsPolicyLifecycle))" -ForegroundColor Green
            $script:paramsUsed += 'NoResourceDiagnosticsPolicyLifecycle: true &#13;'
        }

        if (-not $NoAADGroupsResolveMembers) {
            Write-Host " AAD Groups resolve members enabled (honors parameter -DoNotShowRoleAssignmentsUserData) - use parameter: '-NoAADGroupsResolveMembers' to disable resolving AAD Group memberships" -ForegroundColor Yellow
            $script:paramsUsed += 'NoAADGroupsResolveMembers: false &#13;'
            if ($AADGroupMembersLimit -eq 500) {
                Write-Host " AADGroupMembersLimit = $AADGroupMembersLimit" -ForegroundColor Yellow
                $script:paramsUsed += "AADGroupMembersLimit: $AADGroupMembersLimit &#13;"
            }
            else {
                Write-Host " AADGroupMembersLimit = $AADGroupMembersLimit" -ForegroundColor Green
                $script:paramsUsed += "AADGroupMembersLimit: $AADGroupMembersLimit &#13;"
            }
        }
        else {
            Write-Host " AAD Groups resolve members disabled (-NoAADGroupsResolveMembers = $($NoAADGroupsResolveMembers))" -ForegroundColor Green
            $script:paramsUsed += 'NoAADGroupsResolveMembers: true &#13;'
        }

        Write-Host " AADServicePrincipalExpiryWarningDays: $AADServicePrincipalExpiryWarningDays" -ForegroundColor Yellow
        #$script:paramsUsed += "AADServicePrincipalExpiryWarningDays: $AADServicePrincipalExpiryWarningDays &#13;"

        if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
            if (-not $AzureConsumptionPeriod -is [int]) {
                Write-Host 'parameter -AzureConsumptionPeriod must be an integer'
                Throw 'Error - AzGovViz: check the last console output for details'
            }
            elseif ($AzureConsumptionPeriod -eq 0) {
                Write-Host 'parameter -AzureConsumptionPeriod must be gt 0'
                Throw 'Error - AzGovViz: check the last console output for details'
            }
            else {
                #$azureConsumptionStartDate = ((Get-Date).AddDays( - ($($AzureConsumptionPeriod)))).ToString("yyyy-MM-dd")
                #$azureConsumptionEndDate = ((Get-Date).AddDays(-1)).ToString("yyyy-MM-dd")

                if ($AzureConsumptionPeriod -eq 1) {
                    Write-Host " Azure Consumption reporting enabled: $AzureConsumptionPeriod days (default) ($azureConsumptionStartDate - $azureConsumptionEndDate) - use parameter: '-AzureConsumptionPeriod' to define the period (days)" -ForegroundColor Yellow
                }
                else {
                    Write-Host " Azure Consumption reporting enabled: $AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate)" -ForegroundColor Green
                }

                if (-not $NoAzureConsumptionReportExportToCSV) {
                    Write-Host " Azure Consumption report export to CSV enabled - use parameter: '-NoAzureConsumptionReportExportToCSV' to disable" -ForegroundColor Yellow
                }
                else {
                    Write-Host " Azure Consumption report export to CSV disabled (-NoAzureConsumptionReportExportToCSV = $($NoAzureConsumptionReportExportToCSV))" -ForegroundColor Green
                }
                $script:paramsUsed += "DoAzureConsumption: true ($AzureConsumptionPeriod days ($azureConsumptionStartDate - $azureConsumptionEndDate))&#13;"
                $script:paramsUsed += "NoAzureConsumptionReportExportToCSV: $NoAzureConsumptionReportExportToCSV &#13;"
            }
        }
        else {
            Write-Host " Azure Consumption reporting disabled (-DoAzureConsumption = $($azAPICallConf['htParameters'].DoAzureConsumption))" -ForegroundColor Green
            $script:paramsUsed += 'DoAzureConsumption: false &#13;'
        }

        if ($NoScopeInsights) {
            Write-Host " ScopeInsights will not be created (-NoScopeInsights = $($NoScopeInsights))" -ForegroundColor Green
            $script:paramsUsed += 'NoScopeInsights: true &#13;'
        }
        else {
            Write-Host " ScopeInsights will be created (-NoScopeInsights = $($NoScopeInsights)) Q: Why would you not want to show ScopeInsights? A: In larger tenants ScopeInsights may blow up the html file (up to unusable due to html file size)" -ForegroundColor Yellow
            $script:paramsUsed += 'NoScopeInsights: false &#13;'
        }

        if ($NoSingleSubscriptionOutput) {
            Write-Host " No single Subscription output will not be created (-NoSingleSubscriptionOutput = $($NoSingleSubscriptionOutput))" -ForegroundColor Green
            $script:paramsUsed += 'NoSingleSubscriptionOutput: true &#13;'
        }
        else {
            Write-Host " Single Subscription output will be created (-NoSingleSubscriptionOutput = $($NoSingleSubscriptionOutput))" -ForegroundColor Yellow
            $script:paramsUsed += 'NoSingleSubscriptionOutput: false &#13;'
        }

        if ($azAPICallConf['htParameters'].NoResourceProvidersDetailed -eq $true) {
            Write-Host " ResourceProvider Detailed for TenantSummary disabled (-NoResourceProvidersDetailed = $($azAPICallConf['htParameters'].NoResourceProvidersDetailed))" -ForegroundColor Green
            $script:paramsUsed += "NoResourceProvidersDetailed: $($azAPICallConf['htParameters'].NoResourceProvidersDetailed) &#13;"
        }
        else {
            Write-Host " ResourceProvider Detailed for TenantSummary enabled - use parameter: '-NoResourceProvidersDetailed' to disable" -ForegroundColor Yellow
            $script:paramsUsed += "NoResourceProvidersDetailed: $($azAPICallConf['htParameters'].NoResourceProvidersDetailed) &#13;"
        }

        if ($azAPICallConf['htParameters'].LargeTenant -or $azAPICallConf['htParameters'].PolicyAtScopeOnly -or $azAPICallConf['htParameters'].RBACAtScopeOnly) {
            if ($azAPICallConf['htParameters'].LargeTenant) {
                Write-Host " TenantSummary Policy assignments and Role assignments will not include assignment information on scopes where assignment is inherited, ScopeInsights will not be created, ResourceProvidersDetailed will not be created (-LargeTenant = $($azAPICallConf['htParameters'].LargeTenant))" -ForegroundColor Green
                $script:paramsUsed += "LargeTenant: $($azAPICallConf['htParameters'].LargeTenant) &#13;"
                $script:paramsUsed += "LargeTenant -> PolicyAtScopeOnly: $($azAPICallConf['htParameters'].PolicyAtScopeOnly) &#13;"
                $script:paramsUsed += "LargeTenant -> RBACAtScopeOnly: $($azAPICallConf['htParameters'].RBACAtScopeOnly) &#13;"
                $script:paramsUsed += "LargeTenant -> NoScopeInsights: $($NoScopeInsights) &#13;"
                $script:paramsUsed += "LargeTenant -> NoResourceProvidersDetailed: $($azAPICallConf['htParameters'].NoResourceProvidersDetailed) &#13;"
            }
            else {
                Write-Host " TenantSummary LargeTenant disabled (-LargeTenant = $($azAPICallConf['htParameters'].LargeTenant)) Q: Why would you not want to enable -LargeTenant? A: In larger tenants showing the inheritance on each scope may blow up the html file (up to unusable due to html file size)" -ForegroundColor Yellow
                $script:paramsUsed += "LargeTenant: $($azAPICallConf['htParameters'].LargeTenant) &#13;"

                if ($azAPICallConf['htParameters'].PolicyAtScopeOnly) {
                    Write-Host " TenantSummary Policy assignments will not include assignment information on scopes where assignment is inherited (PolicyAtScopeOnly = $($azAPICallConf['htParameters'].PolicyAtScopeOnly))" -ForegroundColor Green
                    $script:paramsUsed += "PolicyAtScopeOnly: $($azAPICallConf['htParameters'].PolicyAtScopeOnly) &#13;"
                }
                else {
                    Write-Host " TenantSummary Policy assignments will include assignment information on scopes where assignment is inherited (PolicyAtScopeOnly = $($azAPICallConf['htParameters'].PolicyAtScopeOnly))" -ForegroundColor Yellow
                    $script:paramsUsed += "PolicyAtScopeOnly: $($azAPICallConf['htParameters'].PolicyAtScopeOnly) &#13;"
                }

                if ($azAPICallConf['htParameters'].RBACAtScopeOnly) {
                    Write-Host " TenantSummary Role assignments will not include assignment information on scopes where assignment is inherited (RBACAtScopeOnly = $($azAPICallConf['htParameters'].RBACAtScopeOnly))" -ForegroundColor Green
                    $script:paramsUsed += "RBACAtScopeOnly: $($azAPICallConf['htParameters'].RBACAtScopeOnly) &#13;"
                }
                else {
                    Write-Host " TenantSummary Role assignments will include assignment information on scopes where assignment is inherited (RBACAtScopeOnly = $($azAPICallConf['htParameters'].RBACAtScopeOnly))" -ForegroundColor Yellow
                    $script:paramsUsed += "RBACAtScopeOnly: $($azAPICallConf['htParameters'].RBACAtScopeOnly) &#13;"
                }
            }
        }
        else {
            Write-Host " TenantSummary LargeTenant disabled (-LargeTenant = $($azAPICallConf['htParameters'].LargeTenant)) Q: Why would you not want to enable -LargeTenant? A: In larger tenants showing the inheritance on each scope may blow up the html file (up to unusable due to html file size)" -ForegroundColor Yellow
            $script:paramsUsed += "LargeTenant: $($azAPICallConf['htParameters'].LargeTenant) &#13;"

            if ($azAPICallConf['htParameters'].PolicyAtScopeOnly) {
                Write-Host " TenantSummary Policy assignments will not include assignment information on scopes where assignment is inherited (PolicyAtScopeOnly = $($azAPICallConf['htParameters'].PolicyAtScopeOnly))" -ForegroundColor Green
                $script:paramsUsed += "PolicyAtScopeOnly: $($azAPICallConf['htParameters'].PolicyAtScopeOnly) &#13;"
            }
            else {
                Write-Host " TenantSummary Policy assignments will include assignment information on scopes where assignment is inherited (PolicyAtScopeOnly = $($azAPICallConf['htParameters'].PolicyAtScopeOnly))" -ForegroundColor Yellow
                $script:paramsUsed += "PolicyAtScopeOnly: $($azAPICallConf['htParameters'].PolicyAtScopeOnly) &#13;"
            }

            if ($azAPICallConf['htParameters'].RBACAtScopeOnly) {
                Write-Host " TenantSummary Role assignments will not include assignment information on scopes where assignment is inherited (RBACAtScopeOnly = $($azAPICallConf['htParameters'].RBACAtScopeOnly))" -ForegroundColor Green
                $script:paramsUsed += "RBACAtScopeOnly: $($azAPICallConf['htParameters'].RBACAtScopeOnly) &#13;"
            }
            else {
                Write-Host " TenantSummary Role assignments will include assignment information on scopes where assignment is inherited (RBACAtScopeOnly = $($azAPICallConf['htParameters'].RBACAtScopeOnly))" -ForegroundColor Yellow
                $script:paramsUsed += "RBACAtScopeOnly: $($azAPICallConf['htParameters'].RBACAtScopeOnly) &#13;"
            }
        }

        if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
            Write-Host " TenantSummary Policy assignments will also include assignments on ResourceGroups (DoNotIncludeResourceGroupsOnPolicy = $($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy))" -ForegroundColor Yellow
            $script:paramsUsed += 'DoNotIncludeResourceGroupsOnPolicy: false &#13;'
        }
        else {
            Write-Host " TenantSummary Policy assignments will not include assignments on ResourceGroups (DoNotIncludeResourceGroupsOnPolicy = $($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy))" -ForegroundColor Green
            $script:paramsUsed += 'DoNotIncludeResourceGroupsOnPolicy: true &#13;'
        }

        if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
            Write-Host " TenantSummary RBAC Role assignments will also include assignments on ResourceGroups and Resources (DoNotIncludeResourceGroupsAndResourcesOnRBAC = $($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC))" -ForegroundColor Yellow
            $script:paramsUsed += 'DoNotIncludeResourceGroupsAndResourcesOnRBAC: false &#13;'
        }
        else {
            Write-Host " TenantSummary RBAC Role assignments will not include assignments on ResourceGroups and Resources (DoNotIncludeResourceGroupsAndResourcesOnRBAC = $($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC))" -ForegroundColor Green
            $script:paramsUsed += 'DoNotIncludeResourceGroupsAndResourcesOnRBAC: true &#13;'
        }

        if (-not $NoCsvExport) {
            Write-Host " CSV Export enabled: enriched 'Role assignments' data, enriched 'Policy assignments' data and 'all resources' (subscriptionId, mgPath, resourceType, id, name, location, tags, createdTime, changedTime) (-NoCsvExport = $($NoCsvExport))" -ForegroundColor Yellow
            $script:paramsUsed += 'NoCsvExport: false &#13;'
        }
        else {
            Write-Host " CSV Export disabled: enriched 'Role assignments' data, enriched 'Policy assignments' data and 'all resources' (subscriptionId, mgPath, resourceType, id, name, location, tags, createdTime, changedTime) (-NoCsvExport = $($NoCsvExport))" -ForegroundColor Green
            $script:paramsUsed += 'NoCsvExport: true &#13;'
        }

        if (-not $azAPICallConf['htParameters'].NoJsonExport) {
            Write-Host " JSON Export enabled: export of ManagementGroup Hierarchy including all MG/Sub Policy/RBAC definitions, Policy/RBAC assignments and some more relevant information to JSON (-NoJsonExport = $($azAPICallConf['htParameters'].NoJsonExport))" -ForegroundColor Yellow
            $script:paramsUsed += 'NoJsonExport: false &#13;'
            if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
                if (-not $JsonExportExcludeResourceGroups) {
                    Write-Host " JSON Export will also include Policy assignments on ResourceGroups (JsonExportExcludeResourceGroups = $($JsonExportExcludeResourceGroups))" -ForegroundColor Yellow
                    $script:paramsUsed += "JsonExportExcludeResourceGroups Policy: $($JsonExportExcludeResourceGroups) &#13;"
                }
                else {
                    Write-Host " JSON Export will not include Policy assignments on ResourceGroups (JsonExportExcludeResourceGroups = $($JsonExportExcludeResourceGroups))" -ForegroundColor Green
                    $script:paramsUsed += "JsonExportExcludeResourceGroups Policy: $($JsonExportExcludeResourceGroups) &#13;"
                }
            }
            if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
                if (-not $JsonExportExcludeResourceGroups) {
                    Write-Host " JSON Export will also include Role assignments on ResourceGroups (JsonExportExcludeResourceGroups = $($JsonExportExcludeResourceGroups))" -ForegroundColor Yellow
                    $script:paramsUsed += "JsonExportExcludeResourceGroups RBAC: $($JsonExportExcludeResourceGroups) &#13;"

                }
                else {
                    Write-Host " JSON Export will not include Role assignments on ResourceGroups (JsonExportExcludeResourceGroups = $($JsonExportExcludeResourceGroups))" -ForegroundColor Green
                    $script:paramsUsed += "JsonExportExcludeResourceGroups RBAC: $($JsonExportExcludeResourceGroups) &#13;"
                }
                if (-not $JsonExportExcludeResources) {
                    Write-Host " JSON Export will also include Role assignments on Resources (JsonExportExcludeResources = $($JsonExportExcludeResources))" -ForegroundColor Yellow
                    $script:paramsUsed += "JsonExportExcludeResources RBAC: $($JsonExportExcludeResources) &#13;"
                }
                else {
                    Write-Host " JSON Export will not include Role assignments on Resources (JsonExportExcludeResources = $($JsonExportExcludeResources))" -ForegroundColor Green
                    $script:paramsUsed += "JsonExportExcludeResources RBAC: $($JsonExportExcludeResources) &#13;"
                }
            }
        }
        else {
            Write-Host " JSON Export disabled: export of ManagementGroup Hierarchy including all MG/Sub Policy/RBAC definitions, Policy/RBAC assignments and some more relevant information to JSON (-NoJsonExport = $($azAPICallConf['htParameters'].NoJsonExport))" -ForegroundColor Green
            $script:paramsUsed += 'NoJsonExport: true &#13;'
        }

        if ($ThrottleLimit -eq 10) {
            Write-Host " ThrottleLimit = $ThrottleLimit" -ForegroundColor Yellow
            #$script:paramsUsed += "ThrottleLimit: $ThrottleLimit &#13;"
        }
        else {
            Write-Host " ThrottleLimit = $ThrottleLimit" -ForegroundColor Green
            #$script:paramsUsed += "ThrottleLimit: $ThrottleLimit &#13;"
        }


        if ($ChangeTrackingDays -eq 14) {
            Write-Host " ChangeTrackingDays = $ChangeTrackingDays" -ForegroundColor Yellow
            #$script:paramsUsed += "ChangeTrackingDays: $ChangeTrackingDays &#13;"
        }
        else {
            Write-Host " ChangeTrackingDays = $ChangeTrackingDays" -ForegroundColor Green
            #$script:paramsUsed += "ChangeTrackingDays: $ChangeTrackingDays &#13;"
        }

        if ($azAPICallConf['htParameters'].NoResources) {
            Write-Host " NoResources = $($azAPICallConf['htParameters'].NoResources)" -ForegroundColor Green
            $script:paramsUsed += "NoResources: $($azAPICallConf['htParameters'].NoResources) &#13;"
        }
        else {
            Write-Host " NoResources = $($azAPICallConf['htParameters'].NoResources)" -ForegroundColor Yellow
            $script:paramsUsed += "NoResources: $($azAPICallConf['htParameters'].NoResources) &#13;"
        }

        if ($ShowMemoryUsage) {
            Write-Host " ShowMemoryUsage = $($ShowMemoryUsage)" -ForegroundColor Green
            #$script:paramsUsed += "ShowMemoryUsage: $($ShowMemoryUsage) &#13;"
        }
        else {
            Write-Host " ShowMemoryUsage = $($ShowMemoryUsage)" -ForegroundColor Yellow
            #$script:paramsUsed += "ShowMemoryUsage: $($ShowMemoryUsage) &#13;"
        }

        if ($azAPICallConf['htParameters'].DoPSRule) {
            Write-Host " DoPSRule = $($azAPICallConf['htParameters'].DoPSRule)" -ForegroundColor Green
            $script:paramsUsed += "DoPSRule: $($azAPICallConf['htParameters'].DoPSRule) &#13;"
        }
        else {
            Write-Host " DoPSRule = $($azAPICallConf['htParameters'].DoPSRule)" -ForegroundColor Yellow
            $script:paramsUsed += "DoPSRule: $($azAPICallConf['htParameters'].DoPSRule) &#13;"
        }
    }
    #endregion RunInfo
}
function selectMg() {
    Write-Host 'Please select a Management Group from the list below:'
    $MgtGroupArray | Select-Object '#', Name, @{Expression = { $_.properties.displayName } }, Id | Format-Table
    Write-Host "If you don't see your ManagementGroupID try using the parameter -ManagementGroupID" -ForegroundColor Yellow
    if ($msg) {
        Write-Host $msg -ForegroundColor Red
    }

    $script:SelectedMG = Read-Host "Please enter a selection from 1 to $(($MgtGroupArray).count)"

    if ($SelectedMG -match '^[\d\.]+$') {
        if ([int]$SelectedMG -lt 1 -or [int]$SelectedMG -gt ($MgtGroupArray).count) {
            $msg = "last input '$SelectedMG' is out of range, enter a number from the selection!"
            selectMg
        }
    }
    else {
        $msg = "last input '$SelectedMG' is not numeric, enter a number from the selection!"
        selectMg
    }
}
function setBaseVariablesMG {
    if (($azAPICallConf['checkContext']).Tenant.Id -ne $ManagementGroupId) {
        $script:mgSubPathTopMg = $selectedManagementGroupId.ParentName
        $script:getMgParentId = $selectedManagementGroupId.ParentName
        $script:getMgParentName = $selectedManagementGroupId.ParentDisplayName
        $script:mermaidprnts = "'$(($azAPICallConf['checkContext']).Tenant.Id)',$getMgParentId"
    }
    else {
        $script:hierarchyLevel = -1
        $script:mgSubPathTopMg = "$ManagementGroupId"
        $script:getMgParentId = "'$ManagementGroupId'"
        $script:getMgParentName = 'Tenant Root'
        $script:mermaidprnts = "'$getMgParentId',$getMgParentId"
    }
}
function setOutput {
    #outputPath
    if (-not [IO.Path]::IsPathRooted($outputPath)) {
        $outputPath = Join-Path -Path (Get-Location).Path -ChildPath $outputPath
    }
    $outputPath = Join-Path -Path $outputPath -ChildPath '.'
    $script:outputPath = [IO.Path]::GetFullPath($outputPath)
    if (-not (test-path $outputPath)) {
        Write-Host "path $outputPath does not exist - please create it!" -ForegroundColor Red
        Throw 'Error - check the last console output for details'
    }
    else {
        Write-Host "Output/Files will be created in path '$outputPath'"
    }

    #fileTimestamp
    try {
        $script:fileTimestamp = (Get-Date -Format $FileTimeStampFormat)
    }
    catch {
        Write-Host "fileTimestamp format: '$($FileTimeStampFormat)' invalid; continue with default format: 'yyyyMMdd_HHmmss'" -ForegroundColor Red
        $FileTimeStampFormat = 'yyyyMMdd_HHmmss'
        $script:fileTimestamp = (Get-Date -Format $FileTimeStampFormat)
    }

    $script:executionDateTimeInternationalReadable = Get-Date -Format 'dd-MMM-yyyy HH:mm:ss'
    $script:currentTimeZone = (Get-TimeZone).Id
}
function setTranscript {
    if ($ManagementGroupId) {
        if ($onAzureDevOpsOrGitHubActions -eq $true) {
            if ($HierarchyMapOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_HierarchyMapOnly_$($ManagementGroupId)_Log.txt"
            }
            elseif ($ManagementGroupsOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_ManagementGroupsOnly_$($ManagementGroupId)_Log.txt"
            }
            else {
                $script:fileNameTranscript = "AzGovViz_$($ManagementGroupId)_Log.txt"
            }
        }
        else {
            if ($HierarchyMapOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_HierarchyMapOnly_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)_Log.txt"
            }
            elseif ($ManagementGroupsOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_ManagementGroupsOnly_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)_Log.txt"
            }
            else {
                $script:fileNameTranscript = "AzGovViz_$($ProductVersion)_$($fileTimestamp)_$($ManagementGroupId)_Log.txt"
            }
        }
    }
    else {
        if ($onAzureDevOpsOrGitHubActions -eq $true) {
            if ($HierarchyMapOnly -eq $true) {
                $script:fileNameTranscript = 'AzGovViz_HierarchyMapOnly_Log.txt'
            }
            elseif ($ManagementGroupsOnly -eq $true) {
                $script:fileNameTranscript = 'AzGovViz_ManagementGroupsOnly_Log.txt'
            }
            else {
                $script:fileNameTranscript = 'AzGovViz_Log.txt'
            }
        }
        else {
            if ($HierarchyMapOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_HierarchyMapOnly_$($ProductVersion)_$($fileTimestamp)_Log.txt"
            }
            elseif ($ManagementGroupsOnly -eq $true) {
                $script:fileNameTranscript = "AzGovViz_ManagementGroupsOnly_$($ProductVersion)_$($fileTimestamp)_Log.txt"
            }
            else {
                $script:fileNameTranscript = "AzGovViz_$($ProductVersion)_$($fileTimestamp)_Log.txt"
            }
        }
    }
    Write-Host "Writing transcript: $($outputPath)$($DirectorySeparatorChar)$($fileNameTranscript)"
    Start-Transcript -Path "$($outputPath)$($DirectorySeparatorChar)$($fileNameTranscript)"
}
function showMemoryUsage {
    if ($ShowMemoryUsage) {
        function makeDouble {
            [CmdletBinding()]
            Param
            (
                [Parameter(Mandatory = $true)]$MemoryUsed
            )

            try {
                $memoryUsedDouble = [double]($memoryUsed -replace ',', '.')
            }
            catch {
                $memoryUsedDouble = [string]$MemoryUsed
            }
            return $memoryUsedDouble
        }

        if ($IsLinux) {
            $memoryUsed = 100 - (free | grep Mem | awk '{print $4/$2 * 100.0}')
            $memoryUsed = makeDouble $memoryUsed
        }
        if ($IsWindows) {
            $memoryUsed = (Get-CimInstance win32_operatingsystem | ForEach-Object { '{0:N2}' -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100) / $_.TotalVisibleMemorySize) })
            $memoryUsed = makeDouble $memoryUsed
        }

        if ($memoryUsed -is [double]) {
            if ($memoryUsed -gt 90) {
                Write-Host "Memory utilization HIGH: $([math]::Round($memoryUsed))%" -ForegroundColor Magenta
            }
            else {
                Write-Host "Memory utilization: $([math]::Round($memoryUsed))%"
            }
        }
        else {
            Write-Host "Memory utilization: $($memoryUsed)%"
        }
    }
}
function stats {
    #region Stats
    if (-not $StatsOptOut) {

        if ($azAPICallConf['htParameters'].onAzureDevOps) {
            if ($env:BUILD_REPOSITORY_ID) {
                $hashTenantIdOrRepositoryId = [string]($env:BUILD_REPOSITORY_ID)
            }
            else {
                $hashTenantIdOrRepositoryId = [string]($azAPICallConf['checkContext'].Tenant.Id)
            }
        }
        else {
            $hashTenantIdOrRepositoryId = [string]($azAPICallConf['checkContext'].Tenant.Id)
        }

        $hashAccId = [string]($azAPICallConf['checkContext'].Account.Id)

        $hasher384 = [System.Security.Cryptography.HashAlgorithm]::Create('sha384')
        $hasher512 = [System.Security.Cryptography.HashAlgorithm]::Create('sha512')

        $hashTenantIdOrRepositoryIdSplit = $hashTenantIdOrRepositoryId.split('-')
        $hashAccIdSplit = $hashAccId.split('-')

        if (($hashTenantIdOrRepositoryIdSplit[0])[0] -match '[a-z]') {
            $hashTenantIdOrRepositoryIdUse = "$(($hashTenantIdOrRepositoryIdSplit[0]).substring(2))$($hashAccIdSplit[2])"
            $hashTenantIdOrRepositoryIdUse = $hasher512.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashTenantIdOrRepositoryIdUse))
            $hashTenantIdOrRepositoryIdUse = "$(([System.BitConverter]::ToString($hashTenantIdOrRepositoryIdUse)) -replace '-')"
        }
        else {
            $hashTenantIdOrRepositoryIdUse = "$(($hashTenantIdOrRepositoryIdSplit[4]).substring(6))$($hashAccIdSplit[1])"
            $hashTenantIdOrRepositoryIdUse = $hasher384.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashTenantIdOrRepositoryIdUse))
            $hashTenantIdOrRepositoryIdUse = "$(([System.BitConverter]::ToString($hashTenantIdOrRepositoryIdUse)) -replace '-')"
        }

        if (($hashAccIdSplit[0])[0] -match '[a-z]') {
            $hashAccIdUse = "$($hashAccIdSplit[0].substring(2))$($hashTenantIdOrRepositoryIdSplit[2])"
            $hashAccIdUse = $hasher512.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashAccIdUse))
            $hashAccIdUse = "$(([System.BitConverter]::ToString($hashAccIdUse)) -replace '-')"
            $hashUse = "$($hashAccIdUse)$($hashTenantIdOrRepositoryIdUse)"
        }
        else {
            $hashAccIdUse = "$($hashAccIdSplit[4].substring(6))$($hashTenantIdOrRepositoryIdSplit[1])"
            $hashAccIdUse = $hasher384.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashAccIdUse))
            $hashAccIdUse = "$(([System.BitConverter]::ToString($hashAccIdUse)) -replace '-')"
            $hashUse = "$($hashTenantIdOrRepositoryIdUse)$($hashAccIdUse)"
        }

        $identifierBase = $hasher512.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashUse))
        $identifier = "$(([System.BitConverter]::ToString($identifierBase)) -replace '-')"

        $accountInfo = "$($azAPICallConf['htParameters'].accountType)$($azAPICallConf['htParameters'].userType)"
        if ($azAPICallConf['htParameters'].accountType -eq 'ServicePrincipal' -or $azAPICallConf['htParameters'].accountType -eq 'ManagedService' -or $azAPICallConf['htParameters'].accountType -eq 'ClientAssertion') {
            $accountInfo = $azAPICallConf['htParameters'].accountType
        }

        $scopeUsage = 'childManagementGroup'
        if ($ManagementGroupId -eq $azAPICallConf['checkContext'].Tenant.Id) {
            $scopeUsage = 'rootManagementGroup'
        }

        $statsCountSubscriptions = 'less than 100'
        if (($htSubscriptionsMgPath.Keys).Count -ge 100) {
            $statsCountSubscriptions = 'more than 100'
        }

        $tryCounter = 0
        do {
            if ($tryCounter -gt 0) {
                start-sleep -seconds ($tryCounter * 3)
            }
            $tryCounter++
            $statsSuccess = $true
            try {
                $statusBody = @"
{
    "name": "Microsoft.ApplicationInsights.Event",
    "time": "$((Get-Date).ToUniversalTime())",
    "iKey": "ffcd6b2e-1a5e-429f-9495-e3492decfe06",
    "data": {
        "baseType": "EventData",
        "baseData": {
            "name": "$($Product)",
            "ver": 2,
            "properties": {
                "accType": "$($accountInfo)",
                "azCloud": "$($azAPICallConf['checkContext'].Environment.Name)",
                "identifier": "$($identifier)",
                "platform": "$($azAPICallConf['htParameters'].CodeRunPlatform)",
                "productVersion": "$($ProductVersion)",
                "psAzAccountsVersion": "$($azAPICallConf['htParameters'].AzAccountsVersion)",
                "psVersion": "$($PSVersionTable.PSVersion)",
                "scopeUsage": "$($scopeUsage)",
                "statsCountErrors": "$($Error.Count)",
                "statsCountSubscriptions": "$($statsCountSubscriptions)",
                "statsParametersDoNotIncludeResourceGroupsAndResourcesOnRBAC": "$($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC)",
                "statsParametersDoNotIncludeResourceGroupsOnPolicy": "$($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy)",
                "statsParametersDoNotShowRoleAssignmentsUserData": "$($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData)",
                "statsParametersHierarchyMapOnly": "$($azAPICallConf['htParameters'].HierarchyMapOnly)",
                "statsParametersManagementGroupsOnly": "$($azAPICallConf['htParameters'].ManagementGroupsOnly)",
                "statsParametersLargeTenant": "$($azAPICallConf['htParameters'].LargeTenant)",
                "statsParametersNoASCSecureScore": "$($azAPICallConf['htParameters'].NoMDfCSecureScore)",
                "statsParametersDoAzureConsumption": "$($azAPICallConf['htParameters'].DoAzureConsumption)",
                "statsParametersNoJsonExport": "$($azAPICallConf['htParameters'].NoJsonExport)",
                "statsParametersNoScopeInsights": "$($NoScopeInsights)",
                "statsParametersNoSingleSubscriptionOutput": "$($NoSingleSubscriptionOutput)",
                "statsParametersNoPolicyComplianceStates": "$($azAPICallConf['htParameters'].NoPolicyComplianceStates)",
                "statsParametersNoResourceProvidersDetailed": "$($azAPICallConf['htParameters'].NoResourceProvidersDetailed)",
                "statsParametersNoResources": "$($azAPICallConf['htParameters'].NoResources)",
                "statsParametersPolicyAtScopeOnly": "$($azAPICallConf['htParameters'].PolicyAtScopeOnly)",
                "statsParametersRBACAtScopeOnly": "$($azAPICallConf['htParameters'].RBACAtScopeOnly)",
                "statsParametersDoPSRule": "$($azAPICallConf['htParameters'].DoPSRule)",
                "statsTry": "$($tryCounter)"
            }
        }
    }
}
"@
                $stats = Invoke-WebRequest -Uri 'https://dc.services.visualstudio.com/v2/track' -Method 'POST' -body $statusBody
            }
            catch {
                $statsSuccess = $false
            }
        }
        until($statsSuccess -eq $true -or $tryCounter -gt 5)
    }
    else {
        #noStats
        $identifier = (New-Guid).Guid
        $tryCounter = 0
        do {
            if ($tryCounter -gt 0) {
                start-sleep -seconds ($tryCounter * 3)
            }
            $tryCounter++
            $statsSuccess = $true
            try {
                $statusBody = @"
{
    "name": "Microsoft.ApplicationInsights.Event",
    "time": "$((Get-Date).ToUniversalTime())",
    "iKey": "ffcd6b2e-1a5e-429f-9495-e3492decfe06",
    "data": {
        "baseType": "EventData",
        "baseData": {
            "name": "$($Product)",
            "ver": 2,
            "properties": {
                "identifier": "$($identifier)",
                "statsTry": "$($tryCounter)"
            }
        }
    }
}
"@
                $stats = Invoke-WebRequest -Uri 'https://dc.services.visualstudio.com/v2/track' -Method 'POST' -body $statusBody
            }
            catch {
                $statsSuccess = $false
            }
        }
        until($statsSuccess -eq $true -or $tryCounter -gt 5)
    }
    #endregion Stats
}
function testPowerShellVersion {

    Write-Host ' Checking PowerShell edition and version'
    $requiredPSVersion = '7.0.3'
    $splitRequiredPSVersion = $requiredPSVersion.split('.')
    $splitRequiredPSVersionMajor = $splitRequiredPSVersion[0]
    $splitRequiredPSVersionMinor = $splitRequiredPSVersion[1]
    $splitRequiredPSVersionPatch = $splitRequiredPSVersion[2]

    $thisPSVersion = ($PSVersionTable.PSVersion)
    $thisPSVersionMajor = ($thisPSVersion).Major
    $thisPSVersionMinor = ($thisPSVersion).Minor
    $thisPSVersionPatch = ($thisPSVersion).Patch

    $psVersionCheckResult = 'letsCheck'

    if ($PSVersionTable.PSEdition -eq 'Core' -and $thisPSVersionMajor -eq $splitRequiredPSVersionMajor) {
        if ($thisPSVersionMinor -gt $splitRequiredPSVersionMinor) {
            $psVersionCheckResult = 'passed'
            $psVersionCheck = "(Major[$splitRequiredPSVersionMajor]; Minor[$thisPSVersionMinor] gt $($splitRequiredPSVersionMinor))"
        }
        else {
            if ($thisPSVersionPatch -ge $splitRequiredPSVersionPatch) {
                $psVersionCheckResult = 'passed'
                $psVersionCheck = "(Major[$splitRequiredPSVersionMajor]; Minor[$splitRequiredPSVersionMinor]; Patch[$thisPSVersionPatch] gt $($splitRequiredPSVersionPatch))"
            }
            else {
                $psVersionCheckResult = 'failed'
                $psVersionCheck = "(Major[$splitRequiredPSVersionMajor]; Minor[$splitRequiredPSVersionMinor]; Patch[$thisPSVersionPatch] lt $($splitRequiredPSVersionPatch))"
            }
        }
    }
    else {
        $psVersionCheckResult = 'failed'
        $psVersionCheck = "(Major[$splitRequiredPSVersionMajor] ne $($splitRequiredPSVersionMajor))"
    }

    if ($psVersionCheckResult -eq 'passed') {
        Write-Host "  PS check $psVersionCheckResult : $($psVersionCheck); (minimum supported version '$requiredPSVersion')"
        Write-Host "  PS Edition: $($PSVersionTable.PSEdition); PS Version: $($PSVersionTable.PSVersion)"
        Write-Host '  PS Version check succeeded' -ForegroundColor Green
    }
    else {
        Write-Host "  PS check $psVersionCheckResult : $($psVersionCheck)"
        Write-Host "  PS Edition: $($PSVersionTable.PSEdition); PS Version: $($PSVersionTable.PSVersion)"
        Write-Host "  Parallelization requires Powershell 'Core' version '$($requiredPSVersion)' or higher"
        Throw 'Error - check the last console output for details'
    }
}
function validateAccess {
    #region validationAccess
    #validation / check 'Microsoft Graph API' Access
    $permissionCheckResults = @()
    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions -eq $true -or $azAPICallConf['htParameters'].accountType -eq 'ServicePrincipal' -or $azAPICallConf['htParameters'].accountType -eq 'ManagedService' -or $azAPICallConf['htParameters'].accountType -eq 'ClientAssertion') {

        Write-Host "Checking $($azAPICallConf['htParameters'].accountType) permissions"

        $permissionsCheckFailed = $false

        $currentTask = 'Test MSGraph Users Read permission'
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/users?`$count=true&`$top=1"
        $method = 'GET'
        $res = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -consistencyLevel 'eventual' -validateAccess -noPaging

        if ($res -eq 'failed') {
            $permissionCheckResults += "MSGraph API 'Users Read' permission - check FAILED"
            $permissionsCheckFailed = $true
        }
        else {
            $permissionCheckResults += "MSGraph API 'Users Read' permission - check PASSED"
        }

        $currentTask = 'Test MSGraph Groups Read permission'
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/groups?`$count=true&`$top=1"
        $method = 'GET'
        $res = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -consistencyLevel 'eventual' -validateAccess -noPaging

        if ($res -eq 'failed') {
            $permissionCheckResults += "MSGraph API 'Groups Read' permission - check FAILED"
            $permissionsCheckFailed = $true
        }
        else {
            $permissionCheckResults += "MSGraph API 'Groups Read' permission - check PASSED"
        }

        $currentTask = 'Test MSGraph ServicePrincipals Read permission'
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].MicrosoftGraph)/v1.0/servicePrincipals?`$count=true&`$top=1"
        $method = 'GET'
        $res = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -consistencyLevel 'eventual' -validateAccess -noPaging

        if ($res -eq 'failed') {
            $permissionCheckResults += "MSGraph API 'ServicePrincipals Read' permission - check FAILED"
            $permissionsCheckFailed = $true
        }
        else {
            $permissionCheckResults += "MSGraph API 'ServicePrincipals' Read permission - check PASSED"
        }
    }
    #endregion validationAccess

    #ManagementGroup helper
    #region managementGroupHelper
    #thx @Jim Britt https://github.com/JimGBritt/AzurePolicy/tree/master/AzureMonitor/Scripts Create-AzDiagPolicy.ps1
    if (-not $ManagementGroupId) {
        #$catchResult = "letscheck"
        $currentTask = 'Getting all Management Groups'
        #Write-Host $currentTask
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups?api-version=2020-05-01"
        $method = 'GET'
        $getAzManagementGroups = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -validateAccess -noPaging

        if ($getAzManagementGroups -eq 'failed') {
            $permissionCheckResults += "'Reader' permissions on Management Group - check FAILED"
            $permissionsCheckFailed = $true
        }
        else {
            $permissionCheckResults += "'Reader' permissions on Management Group - check PASSED"
        }

        Write-Host 'Permission check results'
        foreach ($permissionCheckResult in $permissionCheckResults) {
            if ($permissionCheckResult -like '*PASSED*') {
                Write-Host $permissionCheckResult -ForegroundColor Green
            }
            else {
                Write-Host $permissionCheckResult -ForegroundColor DarkRed
            }
        }
        if ($permissionsCheckFailed -eq $true) {
            Write-Host "Please consult the documentation: https://$($GithubRepository)#required-permissions-in-azure"
            Throw 'Error - AzGovViz: check the last console output for details'
        }

        if ($getAzManagementGroups.Count -eq 0) {
            Write-Host 'Management Groups count returned null'
            Throw 'Error - AzGovViz: check the last console output for details'
        }
        else {
            Write-Host "Detected $($getAzManagementGroups.Count) Management Groups"
        }

        [array]$MgtGroupArray = addIndexNumberToArray -array ($getAzManagementGroups)
        if (-not $MgtGroupArray) {
            Write-Host 'Seems you do not have access to any Management Group. Please make sure you have the required RBAC role [Reader] assigned on at least one Management Group' -ForegroundColor Red
            Throw 'Error - AzGovViz: check the last console output for details'
        }

        selectMg

        if ($($MgtGroupArray[$SelectedMG - 1].Name)) {
            $script:ManagementGroupId = $($MgtGroupArray[$SelectedMG - 1].Name)
            $script:ManagementGroupName = $($MgtGroupArray[$SelectedMG - 1].DisplayName)
        }
        else {
            Write-Host 's.th. unexpected happened' -ForegroundColor Red
            return
        }
        Write-Host "Selected Management Group: $ManagementGroupName (Id: $ManagementGroupId)" -ForegroundColor Green
        Write-Host '_______________________________________'
    }
    else {
        $currentTask = "Checking permissions for ManagementGroup '$ManagementGroupId'"
        Write-Host $currentTask
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)?api-version=2020-05-01"
        $method = 'GET'
        $selectedManagementGroupId = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -listenOn 'Content' -validateAccess -noPaging

        if ($selectedManagementGroupId -eq 'failed') {
            $permissionCheckResults += "'Reader' permissions on Management Group '$($ManagementGroupId)' - check FAILED"
            $permissionsCheckFailed = $true
        }
        else {
            $permissionCheckResults += "'Reader' permissions on Management Group '$($ManagementGroupId)' - check PASSED"
            $script:ManagementGroupId = $selectedManagementGroupId.Name
            $script:ManagementGroupName = $selectedManagementGroupId.properties.displayName
        }

        Write-Host 'Permission check results'
        foreach ($permissionCheckResult in $permissionCheckResults) {
            if ($permissionCheckResult -like '*PASSED*') {
                Write-Host $permissionCheckResult -ForegroundColor Green
            }
            else {
                Write-Host $permissionCheckResult -ForegroundColor DarkRed
            }
        }

        if ($permissionsCheckFailed -eq $true) {
            Write-Host "Please consult the documentation: https://$($GithubRepository)#required-permissions-in-azure"
            Throw 'Error - AzGovViz: check the last console output for details'
        }

    }
    #endregion managementGroupHelper
}
function verifyModules3rd {
    [CmdletBinding()]Param(
        [object]$modules
    )

    foreach ($module in $modules) {
        $moduleVersion = $module.ModuleVersion

        if ($moduleVersion) {
            Write-Host " Verify '$($module.ModuleName)' ($moduleVersion)"
        }
        else {
            Write-Host " Verify '$($module.ModuleName)' (latest)"
        }

        $maxRetry = 3
        $tryCount = 0
        do {
            $tryCount++
            if ($tryCount -gt $maxRetry) {
                Write-Host " Managing '$($module.ModuleName)' failed (tried $($tryCount - 1)x)"
                throw " Managing '$($module.ModuleName)' failed"
            }

            $installModuleSuccess = $false
            try {
                if (-not $moduleVersion) {
                    Write-Host '  Check latest module version'
                    try {
                        $moduleVersion = (Find-Module -name $($module.ModuleName)).Version
                        Write-Host "  Latest module version: $moduleVersion"
                    }
                    catch {
                        Write-Host '  Check latest module version failed'
                        throw
                    }
                }

                if (-not $installModuleSuccess) {
                    try {
                        $moduleVersionLoaded = (Get-InstalledModule -name $($module.ModuleName)).Version
                        if ($moduleVersionLoaded -eq $moduleVersion) {
                            $installModuleSuccess = $true
                        }
                        else {
                            Write-Host "  Deviating module version $moduleVersionLoaded"
                            throw
                        }
                    }
                    catch {
                        throw
                    }
                }
            }
            catch {
                Write-Host "  '$($module.ModuleName) $moduleVersion' not installed"
                if (($env:SYSTEM_TEAMPROJECTID -and $env:BUILD_REPOSITORY_ID) -or $env:GITHUB_ACTIONS) {
                    Write-Host "  Installing $($module.ModuleName) module ($($moduleVersion))"
                    try {
                        $params = @{
                            Name            = "$($module.ModuleName)"
                            Force           = $true
                            RequiredVersion = $moduleVersion
                        }
                        Install-Module @params
                        <#
                        if ($module.ModuleName -eq 'PSRule.Rules.Azure') {
                            if (($env:SYSTEM_TEAMPROJECTID -and $env:BUILD_REPOSITORY_ID)) {
                                #Azure DevOps /noDeps
                                $path = (Get-Module PSRule.Rules.Azure -ListAvailable | Sort-Object Version -Descending -Top 1).ModuleBase
                                Write-Host "Import-Module (Join-Path $path -ChildPath 'PSRule.Rules.Azure-nodeps.psd1')"
                                Import-Module (Join-Path $path -ChildPath 'PSRule.Rules.Azure-nodeps.psd1')
                            }
                        }
                        #>
                    }
                    catch {
                        throw "  Installing '$($module.ModuleName)' module ($($moduleVersion)) failed"
                    }
                }
                else {
                    do {
                        $installModuleUserChoice = $null
                        $installModuleUserChoice = Read-Host "  Do you want to install $($module.ModuleName) module ($($moduleVersion)) from the PowerShell Gallery? (y/n)"
                        if ($installModuleUserChoice -eq 'y') {
                            try {
                                Install-Module -Name $module.ModuleName -RequiredVersion $moduleVersion
                                try {
                                    Import-Module -Name $module.ModuleName -RequiredVersion $moduleVersion -Force
                                }
                                catch {
                                    throw "  'Import-Module -Name $($module.ModuleName) -RequiredVersion $moduleVersion -Force' failed"
                                }
                            }
                            catch {
                                throw "  'Install-Module -Name $($module.ModuleName) -RequiredVersion $moduleVersion' failed"
                            }
                        }
                        elseif ($installModuleUserChoice -eq 'n') {
                            Write-Host "  $($module.ModuleName) module is required, please visit https://aka.ms/$($module.ModuleProductName) or https://www.powershellgallery.com/packages/$($module.ModuleProductName)"
                            throw "  $($module.ModuleName) module is required"
                        }
                        else {
                            Write-Host "  Accepted input 'y' or 'n'; start over.."
                        }
                    }
                    until ($installModuleUserChoice -eq 'y')
                }
            }
        }
        until ($installModuleSuccess)
    }
}
#region functions4DataCollection

function dataCollectionMGSecureScore {
    [CmdletBinding()]Param(
        [string]$Id
    )

    $mgAscSecureScoreResult = ''
    if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
        if ($htMgASCSecureScore.($Id)) {
            $mgAscSecureScoreResult = $htMgASCSecureScore.($Id).SecureScore
        }
        else {
            $mgAscSecureScoreResult = 'isNullOrEmpty'
        }
    }
    return $mgAscSecureScoreResult
}
$funcDataCollectionMGSecureScore = $function:dataCollectionMGSecureScore.ToString()

function dataCollectionDefenderPlans {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $ChildMgMgPath,
        $SubscriptionQuotaId
    )

    $currentTask = "Getting Microsoft Defender for Cloud plans for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$SubscriptionQuotaId']"
    #https://docs.microsoft.com/en-us/rest/api/securitycenter/pricings
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Security/pricings?api-version=2018-06-01"
    $method = 'GET'
    $defenderPlansResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    if ($defenderPlansResult -eq 'SubScriptionNotRegistered' -or $defenderPlansResult -eq 'DisallowedProvider') {
        #Subscription skipped for MDfC
        $null = $script:arrayDefenderPlansSubscriptionsSkipped.Add([PSCustomObject]@{
                subscriptionId      = $scopeId
                subscriptionName    = $scopeDisplayName
                subscriptionQuotaId = $subscriptionQuotaId
                subscriptionMgPath  = $childMgMgPath
                reason              = $defenderPlansResult
            })
    }
    else {
        if ($defenderPlansResult.Count -gt 0) {
            foreach ($defenderPlanResult in $defenderPlansResult) {
                $null = $script:arrayDefenderPlans.Add([PSCustomObject]@{
                        subscriptionId     = $scopeId
                        subscriptionName   = $scopeDisplayName
                        subscriptionMgPath = $childMgMgPath
                        defenderPlan       = $defenderPlanResult.name
                        defenderPlanTier   = $defenderPlanResult.properties.pricingTier
                    })
            }
        }
    }
}
$funcDataCollectionDefenderPlans = $function:dataCollectionDefenderPlans.ToString()

function dataCollectionDiagnosticsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $ChildMgMgPath,
        $ChildMgId,
        $subscriptionQuotaId
    )

    $currentTask = "Getting Diagnostic Settings for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/microsoft.insights/diagnosticSettings?api-version=2021-05-01-preview"
    $method = 'GET'
    $getDiagnosticSettingsSub = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    if ($getDiagnosticSettingsSub.Count -eq 0) {
        $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                Scope              = 'Sub'
                ScopeName          = $scopeDisplayName
                ScopeId            = $scopeId
                ScopeMgPath        = $childMgMgPath
                SubMgParent        = $childMgId
                DiagnosticsPresent = 'false'
            })
    }
    else {
        foreach ($diagnosticSetting in $getDiagnosticSettingsSub) {
            $arrayLogs = [System.Collections.ArrayList]@()
            if ($diagnosticSetting.Properties.logs) {
                foreach ($logCategory in $diagnosticSetting.properties.logs) {
                    $null = $arrayLogs.Add([PSCustomObject]@{
                            Category = $logCategory.category
                            Enabled  = $logCategory.enabled
                        })
                }
            }

            $htLogs = @{}
            if ($diagnosticSetting.Properties.logs) {
                foreach ($logCategory in $diagnosticSetting.properties.logs) {
                    if ($logCategory.enabled) {
                        $htLogs.($logCategory.category) = 'true'
                    }
                    else {
                        $htLogs.($logCategory.category) = 'false'
                    }
                }
            }

            if ($diagnosticSetting.Properties.workspaceId) {
                $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                        Scope                  = 'Sub'
                        ScopeName              = $scopeDisplayName
                        ScopeId                = $scopeId
                        ScopeMgPath            = $childMgMgPath
                        SubMgParent            = $childMgId
                        DiagnosticsPresent     = 'true'
                        DiagnosticSettingName  = $diagnosticSetting.name
                        DiagnosticTargetType   = 'LA'
                        DiagnosticTargetId     = $diagnosticSetting.Properties.workspaceId
                        DiagnosticCategories   = $arrayLogs
                        DiagnosticCategoriesHt = $htLogs
                    })
            }
            if ($diagnosticSetting.Properties.storageAccountId) {
                $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                        Scope                  = 'Sub'
                        ScopeName              = $scopeDisplayName
                        ScopeId                = $scopeId
                        ScopeMgPath            = $childMgMgPath
                        SubMgParent            = $childMgId
                        DiagnosticsPresent     = 'true'
                        DiagnosticSettingName  = $diagnosticSetting.name
                        DiagnosticTargetType   = 'SA'
                        DiagnosticTargetId     = $diagnosticSetting.Properties.storageAccountId
                        DiagnosticCategories   = $arrayLogs
                        DiagnosticCategoriesHt = $htLogs
                    })
            }
            if ($diagnosticSetting.Properties.eventHubAuthorizationRuleId) {
                $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                        Scope                  = 'Sub'
                        ScopeName              = $scopeDisplayName
                        ScopeId                = $scopeId
                        ScopeMgPath            = $childMgMgPath
                        SubMgParent            = $childMgId
                        DiagnosticsPresent     = 'true'
                        DiagnosticSettingName  = $diagnosticSetting.name
                        DiagnosticTargetType   = 'EH'
                        DiagnosticTargetId     = $diagnosticSetting.Properties.eventHubAuthorizationRuleId
                        DiagnosticCategories   = $arrayLogs
                        DiagnosticCategoriesHt = $htLogs
                    })
            }
        }
    }
}
$funcDataCollectionDiagnosticsSub = $function:dataCollectionDiagnosticsSub.ToString()

function dataCollectionDiagnosticsMG {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName
    )

    $mgPath = $htManagementGroupsMgPath.($scopeId).pathDelimited
    $currentTask = "Getting Diagnostic Settings for Management Group: '$($scopeDisplayName)' ('$($scopeId)')"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($mgdetail.Name)/providers/microsoft.insights/diagnosticSettings?api-version=2020-01-01-preview"
    $method = 'GET'
    $getDiagnosticSettingsMg = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask

    if ($getDiagnosticSettingsMg -eq 'InvalidResourceType') {
        #skipping until supported
    }
    else {
        if ($getDiagnosticSettingsMg.Count -eq 0) {
            $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                    Scope                     = 'Mg'
                    ScopeName                 = $scopeDisplayName
                    ScopeId                   = $scopeId
                    ScopeMgPath               = $mgPath
                    DiagnosticsPresent        = 'false'
                    DiagnosticsInheritedOrnot = $false
                    DiagnosticsInheritedFrom  = 'none'
                })
        }
        else {
            foreach ($diagnosticSetting in $getDiagnosticSettingsMg) {
                $arrayLogs = [System.Collections.ArrayList]@()
                if ($diagnosticSetting.Properties.logs) {
                    foreach ($logCategory in $diagnosticSetting.properties.logs) {
                        $null = $arrayLogs.Add([PSCustomObject]@{
                                Category = $logCategory.category
                                Enabled  = $logCategory.enabled
                            })
                    }
                }

                $htLogs = @{}
                if ($diagnosticSetting.Properties.logs) {
                    foreach ($logCategory in $diagnosticSetting.properties.logs) {
                        if ($logCategory.enabled) {
                            $htLogs.($logCategory.category) = 'true'
                        }
                        else {
                            $htLogs.($logCategory.category) = 'false'
                        }
                    }
                }

                if ($diagnosticSetting.Properties.workspaceId) {
                    $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                            Scope                     = 'Mg'
                            ScopeName                 = $scopeDisplayName
                            ScopeId                   = $scopeId
                            ScopeMgPath               = $mgPath
                            DiagnosticsPresent        = 'true'
                            DiagnosticsInheritedOrnot = $false
                            DiagnosticsInheritedFrom  = 'none'
                            DiagnosticSettingName     = $diagnosticSetting.name
                            DiagnosticTargetType      = 'LA'
                            DiagnosticTargetId        = $diagnosticSetting.Properties.workspaceId
                            DiagnosticCategories      = $arrayLogs
                            DiagnosticCategoriesHt    = $htLogs
                        })
                }
                if ($diagnosticSetting.Properties.storageAccountId) {
                    $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                            Scope                     = 'Mg'
                            ScopeName                 = $scopeDisplayName
                            ScopeId                   = $scopeId
                            ScopeMgPath               = $mgPath
                            DiagnosticsPresent        = 'true'
                            DiagnosticsInheritedOrnot = $false
                            DiagnosticsInheritedFrom  = 'none'
                            DiagnosticSettingName     = $diagnosticSetting.name
                            DiagnosticTargetType      = 'SA'
                            DiagnosticTargetId        = $diagnosticSetting.Properties.storageAccountId
                            DiagnosticCategories      = $arrayLogs
                            DiagnosticCategoriesHt    = $htLogs
                        })
                }
                if ($diagnosticSetting.Properties.eventHubAuthorizationRuleId) {
                    $null = $script:arrayDiagnosticSettingsMgSub.Add([PSCustomObject]@{
                            Scope                     = 'Mg'
                            ScopeName                 = $scopeDisplayName
                            ScopeId                   = $scopeId
                            ScopeMgPath               = $mgPath
                            DiagnosticsPresent        = 'true'
                            DiagnosticsInheritedOrnot = $false
                            DiagnosticsInheritedFrom  = 'none'
                            DiagnosticSettingName     = $diagnosticSetting.name
                            DiagnosticTargetType      = 'EH'
                            DiagnosticTargetId        = $diagnosticSetting.Properties.eventHubAuthorizationRuleId
                            DiagnosticCategories      = $arrayLogs
                            DiagnosticCategoriesHt    = $htLogs
                        })
                }
            }
        }
    }
}
$funcDataCollectionDiagnosticsMG = $function:dataCollectionDiagnosticsMG.ToString()

function dataCollectionResources {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $ChildMgMgPath,
        $subscriptionQuotaId
    )
    $currentTask = "Getting ResourceTypes for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/resources?`$expand=createdTime,changedTime&api-version=2021-04-01"
    $method = 'GET'
    $resourcesSubscriptionResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    #region PSRule
    if ($azAPICallConf['htParameters'].DoPSRule -eq $true) {
        if ($resourcesSubscriptionResult.Count -gt 0) {
            $startPSRule = Get-Date
            try {
                <#
                $path = (Get-Module PSRule.Rules.Azure -ListAvailable | Sort-Object Version -Descending -Top 1).ModuleBase
                Write-Host "Import-Module (Join-Path $path -ChildPath 'PSRule.Rules.Azure-nodeps.psd1')"
                Import-Module (Join-Path $path -ChildPath 'PSRule.Rules.Azure-nodeps.psd1')
                #>
                $psruleResults = $resourcesSubscriptionResult | Invoke-PSRule -Module psrule.rules.Azure -As Detail -Culture en-us -WarningAction Ignore -ErrorAction SilentlyContinue
            }
            catch {
                Write-Host "   Please report 'PSRule for Azure' error '$($scopeDisplayName)' ('$scopeId'): $_"
            }
            
            $endPSRule = Get-Date
            $durationPSRule = $((NEW-TIMESPAN -Start $startPSRule -End $endPSRule).TotalSeconds)

            $null = $script:arrayPSRuleTracking.Add([PSCustomObject]@{
                    subscriptionId = $scopeId
                    duration       = $durationPSRule
                })

            if ($psruleResults.Count -gt 0) {
                #fix issue #111
                #$null = $script:arrayPSRule.AddRange($psRuleResults)
                foreach ($psRuleResult in $psRuleResults) {
                    $null = $arrayPSRule.Add($psRuleResult)
                }
            }
        }
    }
    #endregion PSRule

    foreach ($resourceTypeLocation in ($resourcesSubscriptionResult | Group-Object -Property type, location)) {
        $null = $script:resourcesAll.Add([PSCustomObject]@{
                subscriptionId = $scopeId
                type           = ($resourceTypeLocation.values[0]).ToLower()
                location       = ($resourceTypeLocation.values[1]).ToLower()
                count_         = $resourceTypeLocation.Count
            })
    }

    foreach ($resourceType in ($resourcesSubscriptionResult | Group-Object -Property type)) {
        if (-not $htResourceTypesUniqueResource.(($resourceType.name).ToLower())) {
            $script:htResourceTypesUniqueResource.(($resourceType.name).ToLower()) = @{}
            $script:htResourceTypesUniqueResource.(($resourceType.name).ToLower()).resourceId = $resourceType.Group.Id | Select-Object -first 1
        }
    }

    $startSubResourceIdsThis = Get-Date
    foreach ($resource in ($resourcesSubscriptionResult)) {
        $null = $script:resourcesIdsAll.Add([PSCustomObject]@{
                subscriptionId = $scopeId
                mgPath         = $childMgMgPath
                type           = ($resource.type).ToLower()
                id             = ($resource.Id).ToLower()
                name           = ($resource.name).ToLower()
                location       = ($resource.location).ToLower()
                tags           = ($resource.tags)
                createdTime    = ($resource.createdTime)
                changedTime    = ($resource.changedTime)
            })

        if ($resource.identity.userAssignedIdentities) {
            $resource.identity.userAssignedIdentities.psobject.properties | ForEach-Object {
                if ((-not [string]::IsNullOrEmpty($resource.Id)) -and (-not [string]::IsNullOrEmpty($_.Value.principalId))) {
                    $hlp = ($_.Name.split('/'))
                    $hlpMiSubId = $hlp[2]
                    $null = $script:arrayUserAssignedIdentities4Resources.Add([PSCustomObject]@{
                            resourceId                = $resource.Id
                            resourceName              = $resource.name
                            resourceMgPath            = $childMgMgPath
                            resourceSubscriptionName  = $scopeDisplayName
                            resourceSubscriptionId    = $scopeId
                            resourceResourceGroupName = ($resource.Id -split ('/'))[4]
                            resourceType              = $resource.type
                            resourceLocation          = $resource.location
                            miPrincipalId             = $_.Value.principalId
                            miClientId                = $_.Value.clientId
                            miMgPath                  = $htSubscriptionsMgPath.($hlpMiSubId).pathDelimited
                            miSubscriptionName        = $htSubscriptionsMgPath.($hlpMiSubId).DisplayName
                            miSubscriptionId          = $hlpMiSubId
                            miResourceGroupName       = $hlp[4]
                            miResourceId              = $_.Name
                            miResourceName            = $_.Name -replace '.*/'
                        })
                }
            }
        }
    }
    $endSubResourceIdsThis = Get-Date
    $null = $script:arraySubResourcesAddArrayDuration.Add([PSCustomObject]@{
            sub         = $scopeId
            DurationSec = (NEW-TIMESPAN -Start $startSubResourceIdsThis -End $endSubResourceIdsThis).TotalSeconds
        })


    #resourceTags
    $script:htSubscriptionTagList.($scopeId) = @{}
    $script:htSubscriptionTagList.($scopeId).Resource = @{}
    foreach ($tags in ($resourcesSubscriptionResult.where( { $_.Tags -and -not [String]::IsNullOrWhiteSpace($_.Tags) } )).Tags) {
        foreach ($tagName in $tags.PSObject.Properties.Name) {
            #resource
            if ($htSubscriptionTagList.($scopeId).Resource.ContainsKey($tagName)) {
                $script:htSubscriptionTagList.($scopeId).Resource."$tagName" += 1
            }
            else {
                $script:htSubscriptionTagList.($scopeId).Resource."$tagName" = 1
            }

            #resourceAll
            if ($htAllTagList.Resource.ContainsKey($tagName)) {
                $script:htAllTagList.Resource."$tagName" += 1
            }
            else {
                $script:htAllTagList.Resource."$tagName" = 1
            }

            #all
            if ($htAllTagList.AllScopes.ContainsKey($tagName)) {
                $script:htAllTagList.AllScopes."$tagName" += 1
            }
            else {
                $script:htAllTagList.AllScopes."$tagName" = 1
            }
        }
    }
}
$funcDataCollectionResources = $function:dataCollectionResources.ToString()

function dataCollectionResourceGroups {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    #https://management.azure.com/subscriptions/{subscriptionId}/resourcegroups?api-version=2020-06-01
    $currentTask = "Getting ResourceGroups for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/resourcegroups?api-version=2021-04-01"
    $method = 'GET'
    $resourceGroupsSubscriptionResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $null = $script:resourceGroupsAll.Add([PSCustomObject]@{
            subscriptionId = $scopeId
            count_         = ($resourceGroupsSubscriptionResult).count
        })

    #resourceGroupTags
    if ($azAPICallConf['htParameters'].NoResources -eq $true) {
        $script:htSubscriptionTagList.($scopeId) = @{}
    }

    $script:htSubscriptionTagList.($scopeId).ResourceGroup = @{}
    foreach ($tags in ($resourceGroupsSubscriptionResult.where( { $_.Tags -and -not [String]::IsNullOrWhiteSpace($_.Tags) } )).Tags) {
        foreach ($tagName in $tags.PSObject.Properties.Name) {

            #resource
            if ($htSubscriptionTagList.($scopeId).ResourceGroup.ContainsKey($tagName)) {
                $script:htSubscriptionTagList.($scopeId).ResourceGroup."$tagName" += 1
            }
            else {
                $script:htSubscriptionTagList.($scopeId).ResourceGroup."$tagName" = 1
            }

            #resourceAll
            if ($htAllTagList.ResourceGroup.ContainsKey($tagName)) {
                $script:htAllTagList.ResourceGroup."$tagName" += 1
            }
            else {
                $script:htAllTagList.ResourceGroup."$tagName" = 1
            }

            #all
            if ($htAllTagList.AllScopes.ContainsKey($tagName)) {
                $script:htAllTagList.AllScopes."$tagName" += 1
            }
            else {
                $script:htAllTagList.AllScopes."$tagName" = 1
            }
        }
    }
}
$funcDataCollectionResourceGroups = $function:dataCollectionResourceGroups.ToString()

function dataCollectionResourceProviders {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayname,
        $subscriptionQuotaId
    )

    ($script:htResourceProvidersAll).($scopeId) = @{}
    $currentTask = "Getting ResourceProviders for Subscription: '$($scopeDisplayname)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers?api-version=2019-10-01"
    $method = 'GET'
    $resProvResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    ($script:htResourceProvidersAll).($scopeId).Providers = $resProvResult | Select-Object namespace, registrationState
}
$funcDataCollectionResourceProviders = $function:dataCollectionResourceProviders.ToString()

function dataCollectionFeatures {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayname,
        [object]$MgParentNameChain,
        $subscriptionQuotaId
    )

    $currentTask = "Getting Features for Subscription: '$($scopeDisplayname)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Features/features?api-version=2021-07-01"
    $method = 'GET'
    $featuresResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $featuresResultRegistered = $featuresResult.where({ $_.properties.state -eq 'Registered' })

    if ($featuresResultRegistered.Count -gt 0) {
        foreach ($registeredFeature in $featuresResultRegistered) {
            $null = $script:arrayFeaturesAll.Add([PSCustomObject]@{
                    subscriptionId = $registeredFeature.id.split('/')[2]
                    mgPathArray    = $MgParentNameChain
                    mgPath         = ($MgParentNameChain -join ',')
                    feature        = $registeredFeature.name
                })
        }
    }
}
$funcDataCollectionFeatures = $function:dataCollectionFeatures.ToString()

function dataCollectionResourceLocks {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayname,
        $subscriptionQuotaId
    )

    $currentTask = "Getting ResourceLocks for Subscription: '$($scopeDisplayname)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/locks?api-version=2016-09-01"
    $method = 'GET'
    $requestSubscriptionResourceLocks = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $requestSubscriptionResourceLocksCount = ($requestSubscriptionResourceLocks).Count
    if ($requestSubscriptionResourceLocksCount -gt 0) {
        $htTemp = @{}
        $locksAnyLockSubscriptionCount = 0
        $locksCannotDeleteSubscriptionCount = 0
        $locksReadOnlySubscriptionCount = 0
        $arrayResourceGroupsAnyLock = [System.Collections.ArrayList]@()
        $arrayResourceGroupsCannotDeleteLock = [System.Collections.ArrayList]@()
        $arrayResourceGroupsReadOnlyLock = [System.Collections.ArrayList]@()
        $arrayResourcesAnyLock = [System.Collections.ArrayList]@()
        $arrayResourcesCannotDeleteLock = [System.Collections.ArrayList]@()
        $arrayResourcesReadOnlyLock = [System.Collections.ArrayList]@()
        foreach ($requestSubscriptionResourceLock in $requestSubscriptionResourceLocks) {

            $splitRequestSubscriptionResourceLockId = ($requestSubscriptionResourceLock.Id).Split('/')
            switch (($splitRequestSubscriptionResourceLockId).Count - 1) {
                #subLock
                6 {
                    $locksAnyLockSubscriptionCount++
                    if ($requestSubscriptionResourceLock.properties.level -eq 'CanNotDelete') {
                        $locksCannotDeleteSubscriptionCount++
                    }
                    if ($requestSubscriptionResourceLock.properties.level -eq 'ReadOnly') {
                        $locksReadOnlySubscriptionCount++
                    }
                }
                #rgLock
                8 {
                    $resourceGroupName = $splitRequestSubscriptionResourceLockId[0..4] -join '/'
                    $null = $arrayResourceGroupsAnyLock.Add([PSCustomObject]@{
                            rg = $resourceGroupName
                        })
                    if ($requestSubscriptionResourceLock.properties.level -eq 'CanNotDelete') {
                        $null = $arrayResourceGroupsCannotDeleteLock.Add([PSCustomObject]@{
                                rg = $resourceGroupName
                            })
                    }
                    if ($requestSubscriptionResourceLock.properties.level -eq 'ReadOnly') {
                        $null = $arrayResourceGroupsReadOnlyLock.Add([PSCustomObject]@{
                                rg = $resourceGroupName
                            })
                    }
                }
                #resLock
                12 {
                    $resourceId = $splitRequestSubscriptionResourceLockId[0..8] -join '/'
                    $null = $arrayResourcesAnyLock.Add([PSCustomObject]@{
                            res = $resourceId
                        })
                    if ($requestSubscriptionResourceLock.properties.level -eq 'CanNotDelete') {
                        $null = $arrayResourcesCannotDeleteLock.Add([PSCustomObject]@{
                                res = $resourceId
                            })
                    }
                    if ($requestSubscriptionResourceLock.properties.level -eq 'ReadOnly') {
                        $null = $arrayResourcesReadOnlyLock.Add([PSCustomObject]@{
                                res = $resourceId
                            })
                    }
                }
            }
        }

        $htTemp.SubscriptionLocksCannotDeleteCount = $locksCannotDeleteSubscriptionCount
        $htTemp.SubscriptionLocksReadOnlyCount = $locksReadOnlySubscriptionCount

        #resourceGroups
        $resourceGroupsLocksCannotDeleteCount = ($arrayResourceGroupsCannotDeleteLock).Count
        $htTemp.ResourceGroupsLocksCannotDeleteCount = $resourceGroupsLocksCannotDeleteCount

        $resourceGroupsLocksReadOnlyCount = ($arrayResourceGroupsReadOnlyLock).Count
        $htTemp.ResourceGroupsLocksReadOnlyCount = $resourceGroupsLocksReadOnlyCount
        $htTemp.ResourceGroupsLocksCannotDelete = $arrayResourceGroupsCannotDeleteLock

        #resources
        $resourcesLocksCannotDeleteCount = ($arrayResourcesCannotDeleteLock).Count
        $htTemp.ResourcesLocksCannotDeleteCount = $resourcesLocksCannotDeleteCount

        $resourcesLocksReadOnlyCount = ($arrayResourcesReadOnlyLock).Count
        $htTemp.ResourcesLocksReadOnlyCount = $resourcesLocksReadOnlyCount
        $htTemp.ResourcesLocksCannotDelete = $arrayResourcesCannotDeleteLock

        $script:htResourceLocks.($scopeId) = $htTemp
    }
}
$funcDataCollectionResourceLocks = $function:dataCollectionResourceLocks.ToString()

function dataCollectionTags {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    $currentTask = "Getting Tags for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Resources/tags/default?api-version=2020-06-01"
    $method = 'GET'
    $requestSubscriptionTags = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -listenOn 'Content' -caller 'CustomDataCollection'

    $script:htSubscriptionTagList.($scopeId).Subscription = @{}
    if ($requestSubscriptionTags.properties.tags) {
        $subscriptionTags = @()
        ($script:htSubscriptionTags).($scopeId) = @{}
        foreach ($tag in ($requestSubscriptionTags.properties.tags).PSObject.Properties) {
            $subscriptionTags += "$($tag.Name)/$($tag.Value)"

            ($script:htSubscriptionTags).($scopeId).($tag.Name) = $tag.Value
            $tagName = $tag.Name

            #subscription
            if ($htSubscriptionTagList.($scopeId).Subscription.ContainsKey($tagName)) {
                $script:htSubscriptionTagList.($scopeId).Subscription."$tagName" += 1
            }
            else {
                $script:htSubscriptionTagList.($scopeId).Subscription."$tagName" = 1
            }

            #subscriptionAll
            if ($htAllTagList.Subscription.ContainsKey($tagName)) {
                $script:htAllTagList.Subscription."$tagName" += 1
            }
            else {
                $script:htAllTagList.Subscription."$tagName" = 1
            }

            #all
            if ($htAllTagList.AllScopes.ContainsKey($tagName)) {
                $script:htAllTagList.AllScopes."$tagName" += 1
            }
            else {
                $script:htAllTagList.AllScopes."$tagName" = 1
            }

        }
        $subscriptionTagsCount = ($subscriptionTags).Count
        $subscriptionTags = $subscriptionTags -join "$CsvDelimiterOpposite "
    }
    else {
        $subscriptionTagsCount = 0
        $subscriptionTags = 'none'
    }
    $htSubscriptionTagsReturn = @{}
    $htSubscriptionTagsReturn.subscriptionTagsCount = $subscriptionTagsCount
    $htSubscriptionTagsReturn.subscriptionTags = $subscriptionTags
    return $htSubscriptionTagsReturn
}
$funcDataCollectionTags = $function:dataCollectionTags.ToString()

function dataCollectionPolicyComplianceStates {
    [CmdletBinding()]Param(
        [string]$TargetMgOrSub,
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )
    
    
    if ($TargetMgOrSub -eq 'Sub') { 
        $currentTask = "Getting Policy Compliance for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.PolicyInsights/policyStates/latest/summarize?api-version=2019-10-01" 
    }
    if ($TargetMgOrSub -eq 'MG') {
        $currentTask = "Getting Policy Compliance for Management Group: '$($scopeDisplayName)' ('$scopeId')"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.PolicyInsights/policyStates/latest/summarize?api-version=2019-10-01" 
    }
    $method = 'POST'
    $policyComplianceResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    if ($policyComplianceResult -eq 'ResponseTooLarge') {
        if ($TargetMgOrSub -eq 'Sub') { 
            $script:htCachePolicyComplianceResponseTooLargeSUB.($scopeId) = @{} 
        }
        if ($TargetMgOrSub -eq 'MG') {
            $script:htCachePolicyComplianceResponseTooLargeMG.($scopeId) = @{}
        }
    }
    elseif ($policyComplianceResult -eq 'DisallowedProvider') {
        #nothing to do
    }
    else {
        if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId) = @{} }
        if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId) = @{} }
        foreach ($policyAssignment in $policyComplianceResult.policyassignments | Sort-Object -Property policyAssignmentId) {
            $policyAssignmentIdToLower = ($policyAssignment.policyAssignmentId).ToLower()
            if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower) = @{} }
            if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower) = @{} }
            foreach ($policyComplianceState in $policyAssignment.results.policydetails) {
                if ($policyComplianceState.ComplianceState -eq 'compliant') {
                    if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower).CompliantPolicies = $policyComplianceState.count }
                    if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower).CompliantPolicies = $policyComplianceState.count }
                }
                if ($policyComplianceState.ComplianceState -eq 'noncompliant') {
                    if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower).NonCompliantPolicies = $policyComplianceState.count }
                    if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower).NonCompliantPolicies = $policyComplianceState.count }
                }
            }

            foreach ($resourceComplianceState in $policyAssignment.results.resourcedetails) {
                if ($resourceComplianceState.ComplianceState -eq 'compliant') {
                    if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower).CompliantResources = $resourceComplianceState.count }
                    if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower).CompliantResources = $resourceComplianceState.count }

                }
                if ($resourceComplianceState.ComplianceState -eq 'nonCompliant') {
                    if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower).NonCompliantResources = $resourceComplianceState.count }
                    if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower).NonCompliantResources = $resourceComplianceState.count }

                }
                if ($resourceComplianceState.ComplianceState -eq 'conflict') {
                    if ($TargetMgOrSub -eq 'Sub') { ($script:htCachePolicyComplianceSUB).($scopeId).($policyAssignmentIdToLower).ConflictingResources = $resourceComplianceState.count }
                    if ($TargetMgOrSub -eq 'MG') { ($script:htCachePolicyComplianceMG).($scopeId).($policyAssignmentIdToLower).ConflictingResources = $resourceComplianceState.count }
                }
            }
        }
    }
}
$funcDataCollectionPolicyComplianceStates = $function:dataCollectionPolicyComplianceStates.ToString()

function dataCollectionASCSecureScoreSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
        $currentTask = "Getting Microsoft Defender for Cloud Secure Score for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Security/securescores?api-version=2020-01-01"
        $method = 'GET'
        $subASCSecureScoreResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

        if ($subASCSecureScoreResult -ne 'DisallowedProvider') {
            if (($subASCSecureScoreResult).count -gt 0) {
                $subscriptionASCSecureScore = "$($subASCSecureScoreResult.properties.score.current) of $($subASCSecureScoreResult.properties.score.max) points"
            }
            else {
                $subscriptionASCSecureScore = 'n/a'
            }
        }
        else {
            $subscriptionASCSecureScore = 'n/a'
        }

    }
    else {
        $subscriptionASCSecureScore = "excluded (-NoMDfCSecureScore $($azAPICallConf['htParameters'].NoMDfCSecureScore))"
    }
    return $subscriptionASCSecureScore
}
$funcDataCollectionASCSecureScoreSub = $function:dataCollectionASCSecureScoreSub.ToString()

function dataCollectionBluePrintDefinitionsMG {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $mgParentId,
        $mgParentName,
        $mgAscSecureScoreResult
    )

    $currentTask = "Getting Blueprint definitions for Management Group: '$($scopeDisplayName)' ('$scopeId')"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.Blueprint/blueprints?api-version=2018-11-01-preview"
    $method = 'GET'
    $scopeBlueprintDefinitionResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $addRowToTableDone = $false
    if (($scopeBlueprintDefinitionResult).count -gt 0) {
        foreach ($blueprint in $scopeBlueprintDefinitionResult) {

            if (-not $($htCacheDefinitionsBlueprint).($blueprint.Id)) {
                ($script:htCacheDefinitionsBlueprint).($blueprint.Id) = @{}
            }

            $blueprintName = $blueprint.name
            $blueprintId = $blueprint.Id
            $blueprintDisplayName = $blueprint.properties.displayName
            $blueprintDescription = $blueprint.properties.description
            $blueprintScoped = "/providers/Microsoft.Management/managementGroups/$($scopeId)"

            $addRowToTableDone = $true
            addRowToTable `
                -level $hierarchyLevel `
                -mgName $scopeDisplayName `
                -mgId $scopeId `
                -mgParentId $mgParentId `
                -mgParentName $mgParentName `
                -mgASCSecureScore $mgAscSecureScoreResult `
                -BlueprintName $blueprintName `
                -BlueprintId $blueprintId `
                -BlueprintDisplayName $blueprintDisplayName `
                -BlueprintDescription $blueprintDescription `
                -BlueprintScoped $blueprintScoped
        }
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionBluePrintDefinitionsMG = $function:dataCollectionBluePrintDefinitionsMG.ToString()

function dataCollectionBluePrintDefinitionsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $childMgDisplayName,
        $childMgId,
        $childMgParentId,
        $childMgParentName,
        $mgAscSecureScoreResult,
        $subscriptionQuotaId,
        $subscriptionState,
        $subscriptionASCSecureScore,
        $subscriptionTags,
        $subscriptionTagsCount
    )

    $currentTask = "Getting Blueprint definitions for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Blueprint/blueprints?api-version=2018-11-01-preview"
    $method = 'GET'
    $scopeBlueprintDefinitionResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $addRowToTableDone = $false
    if ($scopeBlueprintDefinitionResult -ne 'DisallowedProvider') {
        if (($scopeBlueprintDefinitionResult).count -gt 0) {
            foreach ($blueprint in $scopeBlueprintDefinitionResult) {

                if (-not $($htCacheDefinitionsBlueprint).($blueprint.Id)) {
                ($script:htCacheDefinitionsBlueprint).($blueprint.Id) = @{}
                }

                $blueprintName = $blueprint.name
                $blueprintId = $blueprint.Id
                $blueprintDisplayName = $blueprint.properties.displayName
                $blueprintDescription = $blueprint.properties.description
                $blueprintScoped = "/subscriptions/$($scopeId)"

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $childMgDisplayName `
                    -mgId $childMgId `
                    -mgParentId $childMgParentId `
                    -mgParentName $childMgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Subscription $scopeDisplayName `
                    -SubscriptionId $scopeId `
                    -SubscriptionQuotaId $subscriptionQuotaId `
                    -SubscriptionState $subscriptionState `
                    -SubscriptionASCSecureScore $subscriptionASCSecureScore `
                    -SubscriptionTags $subscriptionTags `
                    -SubscriptionTagsCount $subscriptionTagsCount `
                    -BlueprintName $blueprintName `
                    -BlueprintId $blueprintId `
                    -BlueprintDisplayName $blueprintDisplayName `
                    -BlueprintDescription $blueprintDescription `
                    -BlueprintScoped $blueprintScoped
            }
        }
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionBluePrintDefinitionsSub = $function:dataCollectionBluePrintDefinitionsSub.ToString()

function dataCollectionBluePrintAssignmentsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $childMgDisplayName,
        $childMgId,
        $childMgParentId,
        $childMgParentName,
        $mgAscSecureScoreResult,
        $subscriptionQuotaId,
        $subscriptionState,
        $subscriptionASCSecureScore,
        $subscriptionTags,
        $subscriptionTagsCount
    )

    $currentTask = "Getting Blueprint assignments for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Blueprint/blueprintAssignments?api-version=2018-11-01-preview"
    $method = 'GET'
    $subscriptionBlueprintAssignmentsResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $addRowToTableDone = $false
    if ($subscriptionBlueprintAssignmentsResult -ne 'DisallowedProvider') {
        if (($subscriptionBlueprintAssignmentsResult).count -gt 0) {
            foreach ($subscriptionBlueprintAssignment in $subscriptionBlueprintAssignmentsResult) {

                if (-not ($htCacheAssignmentsBlueprint).($subscriptionBlueprintAssignment.Id)) {
                ($script:htCacheAssignmentsBlueprint).($subscriptionBlueprintAssignment.Id) = @{}
                ($script:htCacheAssignmentsBlueprint).($subscriptionBlueprintAssignment.Id) = $subscriptionBlueprintAssignment
                }

                if (($subscriptionBlueprintAssignment.properties.blueprintId) -like '/subscriptions/*') {
                    $blueprintScope = $subscriptionBlueprintAssignment.properties.blueprintId -replace '/providers/Microsoft.Blueprint/blueprints/.*', ''
                    $blueprintName = $subscriptionBlueprintAssignment.properties.blueprintId -replace '.*/blueprints/', '' -replace '/versions/.*', ''
                }
                if (($subscriptionBlueprintAssignment.properties.blueprintId) -like '/providers/Microsoft.Management/managementGroups/*') {
                    $blueprintScope = $subscriptionBlueprintAssignment.properties.blueprintId -replace '/providers/Microsoft.Blueprint/blueprints/.*', ''
                    $blueprintName = $subscriptionBlueprintAssignment.properties.blueprintId -replace '.*/blueprints/', '' -replace '/versions/.*', ''
                }

                $currentTask = "Getting Blueprint definitions related to Blueprint assignments for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
                $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/$($blueprintScope)/providers/Microsoft.Blueprint/blueprints/$($blueprintName)?api-version=2018-11-01-preview"
                $method = 'GET'
                $subscriptionBlueprintDefinitionResult = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -listenOn 'Content' -caller 'CustomDataCollection'

                if ($subscriptionBlueprintDefinitionResult -eq 'BlueprintNotFound') {
                    $blueprintName = 'BlueprintNotFound'
                    $blueprintId = 'BlueprintNotFound'
                    $blueprintAssignmentVersion = $subscriptionBlueprintAssignment.properties.blueprintId -replace '.*/'
                    $blueprintDisplayName = 'BlueprintNotFound'
                    $blueprintDescription = 'BlueprintNotFound'
                    $blueprintScoped = $blueprintScope
                    $blueprintAssignmentId = $subscriptionBlueprintAssignmentsResult.Id
                }
                else {
                    $blueprintName = $subscriptionBlueprintDefinitionResult.name
                    $blueprintId = $subscriptionBlueprintDefinitionResult.Id
                    $blueprintAssignmentVersion = $subscriptionBlueprintAssignment.properties.blueprintId -replace '.*/'
                    $blueprintDisplayName = $subscriptionBlueprintDefinitionResult.properties.displayName
                    $blueprintDescription = $subscriptionBlueprintDefinitionResult.properties.description
                    $blueprintScoped = $blueprintScope
                    $blueprintAssignmentId = $subscriptionBlueprintAssignmentsResult.Id
                }

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $childMgDisplayName `
                    -mgId $childMgId `
                    -mgParentId $childMgParentId `
                    -mgParentName $childMgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Subscription $scopeDisplayName `
                    -SubscriptionId $scopeId `
                    -SubscriptionQuotaId $subscriptionQuotaId `
                    -SubscriptionState $subscriptionState `
                    -SubscriptionASCSecureScore $subscriptionASCSecureScore `
                    -SubscriptionTags $subscriptionTags `
                    -SubscriptionTagsCount $subscriptionTagsCount `
                    -BlueprintName $blueprintName `
                    -BlueprintId $blueprintId `
                    -BlueprintDisplayName $blueprintDisplayName `
                    -BlueprintDescription $blueprintDescription `
                    -BlueprintScoped $blueprintScoped `
                    -BlueprintAssignmentVersion $blueprintAssignmentVersion `
                    -BlueprintAssignmentId $blueprintAssignmentId
            }
        }
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionBluePrintAssignmentsSub = $function:dataCollectionBluePrintAssignmentsSub.ToString()

function dataCollectionPolicyExemptions {
    [CmdletBinding()]Param(
        [string]$TargetMgOrSub,
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    if ($TargetMgOrSub -eq 'Sub') {
        $currentTask = "Getting Policy exemptions for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/policyExemptions?api-version=2020-07-01-preview"
    }
    if ($TargetMgOrSub -eq 'MG') {
        $currentTask = "Getting Policy exemptions for Management Group: '$($scopeDisplayName)' ('$scopeId')"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.Authorization/policyExemptions?api-version=2020-07-01-preview&`$filter=atScope()"
    }
    $method = 'GET'
    $requestPolicyExemptionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $requestPolicyExemptionAPICount = ($requestPolicyExemptionAPI).Count
    if ($requestPolicyExemptionAPICount -gt 0) {
        foreach ($exemption in $requestPolicyExemptionAPI) {
            if (-not $htPolicyAssignmentExemptions.($exemption.Id)) {
                $script:htPolicyAssignmentExemptions.($exemption.Id) = @{}
                $script:htPolicyAssignmentExemptions.($exemption.Id).exemption = $exemption
            }
        }
    }
}
$funcDataCollectionPolicyExemptions = $function:dataCollectionPolicyExemptions.ToString()

function dataCollectionPolicyDefinitions {
    [CmdletBinding()]Param(
        [string]$TargetMgOrSub,
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    if ($TargetMgOrSub -eq 'Sub') {
        $currentTask = "Getting Policy definitions for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/policyDefinitions?api-version=2021-06-01&`$filter=policyType eq 'Custom'"
    }
    if ($TargetMgOrSub -eq 'MG') {
        $currentTask = "Getting Policy definitions for Management Group: '$($scopeDisplayName)' ('$scopeId')"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementgroups/$($scopeId)/providers/Microsoft.Authorization/policyDefinitions?api-version=2021-06-01&`$filter=policyType eq 'Custom'"
    }
    $method = 'GET'
    $requestPolicyDefinitionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $scopePolicyDefinitions = $requestPolicyDefinitionAPI.where( { $_.properties.policyType -eq 'custom' } )

    if ($TargetMgOrSub -eq 'Sub') {
        $PolicyDefinitionsScopedCount = (($scopePolicyDefinitions.where( { ($_.id) -like "/subscriptions/$($scopeId)/*" } ))).count
    }
    if ($TargetMgOrSub -eq 'MG') {
        $PolicyDefinitionsScopedCount = (($scopePolicyDefinitions.where( { ($_.id) -like "/providers/Microsoft.Management/managementGroups/$($scopeId)/*" } ))).count
    }

    foreach ($scopePolicyDefinition in $scopePolicyDefinitions) {
        $hlpPolicyDefinitionId = ($scopePolicyDefinition.id).ToLower()

        $doIt = $true
        if ($TargetMgOrSub -eq 'MG') {
            $doIt = $false
            if ($hlpPolicyDefinitionId -like "/providers/Microsoft.Management/managementGroups/$($scopeId)/*" -and $hlpPolicyDefinitionId -notlike "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)/*") {
                $doIt = $true
            }
            if ($scopeId -eq $ManagementGroupId) {
                $doIt = $true
            }
        }

        if ($doIt) {
            if (($scopePolicyDefinition.Properties.description).length -eq 0) {
                $policyDefinitionDescription = 'no description given'
            }
            else {
                $policyDefinitionDescription = $scopePolicyDefinition.Properties.description
            }

            $htTemp = @{}
            $htTemp.Id = $hlpPolicyDefinitionId
            if ($hlpPolicyDefinitionId -like '/providers/Microsoft.Management/managementGroups/*') {
                $htTemp.Scope = (($hlpPolicyDefinitionId).split('/'))[0..4] -join '/'
                $htTemp.ScopeMgSub = 'Mg'
                $htTemp.ScopeId = (($hlpPolicyDefinitionId).split('/'))[4]
                $htTemp.ScopeMGLevel = $htManagementGroupsMgPath.((($hlpPolicyDefinitionId).split('/'))[4]).ParentNameChainCount
            }
            if ($hlpPolicyDefinitionId -like '/subscriptions/*') {
                $htTemp.Scope = (($hlpPolicyDefinitionId).split('/'))[0..2] -join '/'
                $htTemp.ScopeMgSub = 'Sub'
                $htTemp.ScopeId = (($hlpPolicyDefinitionId).split('/'))[2]
                $htTemp.ScopeMGLevel = $htSubscriptionsMgPath.((($hlpPolicyDefinitionId).split('/'))[2]).level
            }
            $htTemp.DisplayName = $($scopePolicyDefinition.Properties.displayname)
            $htTemp.Description = $($policyDefinitionDescription)
            $htTemp.Type = $($scopePolicyDefinition.Properties.policyType)
            $htTemp.Category = $($scopePolicyDefinition.Properties.metadata.category)
            $htTemp.PolicyDefinitionId = $hlpPolicyDefinitionId
            if ($scopePolicyDefinition.Properties.metadata.deprecated -eq $true -or $scopePolicyDefinition.Properties.displayname -like "``[Deprecated``]*") {
                $htTemp.Deprecated = $scopePolicyDefinition.Properties.metadata.deprecated
            }
            else {
                $htTemp.Deprecated = $false
            }
            if ($scopePolicyDefinition.Properties.metadata.preview -eq $true -or $scopePolicyDefinition.Properties.displayname -like "``[*Preview``]*") {
                $htTemp.Preview = $scopePolicyDefinition.Properties.metadata.preview
            }
            else {
                $htTemp.Preview = $false
            }
            #effects
            if ($scopePolicyDefinition.properties.parameters.effect.defaultvalue) {
                $htTemp.effectDefaultValue = $scopePolicyDefinition.properties.parameters.effect.defaultvalue
                if ($scopePolicyDefinition.properties.parameters.effect.allowedValues) {
                    $htTemp.effectAllowedValue = $scopePolicyDefinition.properties.parameters.effect.allowedValues -join ','
                }
                else {
                    $htTemp.effectAllowedValue = 'n/a'
                }
                $htTemp.effectFixedValue = 'n/a'
            }
            else {
                if ($scopePolicyDefinition.properties.parameters.policyEffect.defaultValue) {
                    $htTemp.effectDefaultValue = $scopePolicyDefinition.properties.parameters.policyEffect.defaultvalue
                    if ($scopePolicyDefinition.properties.parameters.policyEffect.allowedValues) {
                        $htTemp.effectAllowedValue = $scopePolicyDefinition.properties.parameters.policyEffect.allowedValues -join ','
                    }
                    else {
                        $htTemp.effectAllowedValue = 'n/a'
                    }
                    $htTemp.effectFixedValue = 'n/a'
                }
                else {
                    $htTemp.effectFixedValue = $scopePolicyDefinition.Properties.policyRule.then.effect
                    $htTemp.effectDefaultValue = 'n/a'
                    $htTemp.effectAllowedValue = 'n/a'
                }
            }
            $htTemp.Json = $scopePolicyDefinition
            ($script:htCacheDefinitionsPolicy).($hlpPolicyDefinitionId) = $htTemp


            if (-not [string]::IsNullOrWhiteSpace($scopePolicyDefinition.properties.policyRule.then.details.roleDefinitionIds)) {
                ($script:htCacheDefinitionsPolicy).($hlpPolicyDefinitionId).RoleDefinitionIds = $scopePolicyDefinition.properties.policyRule.then.details.roleDefinitionIds
                foreach ($roledefinitionId in $scopePolicyDefinition.properties.policyRule.then.details.roleDefinitionIds) {
                    if (-not [string]::IsNullOrEmpty($roledefinitionId)) {
                        if (-not $htRoleDefinitionIdsUsedInPolicy.($roledefinitionId)) {
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId) = @{}
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies = [array]$hlpPolicyDefinitionId
                        }
                        else {
                            $usedInPolicies = $htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies
                            $usedInPolicies += $hlpPolicyDefinitionId
                            $script:htRoleDefinitionIdsUsedInPolicy.($roledefinitionId).UsedInPolicies = $usedInPolicies
                        }
                    }
                    else {
                        Write-Host "$currentTask $($hlpPolicyDefinitionId) Finding: empty roleDefinitionId in roledefinitionIds"
                    }
                }
            }
            else {
                ($script:htCacheDefinitionsPolicy).($hlpPolicyDefinitionId).RoleDefinitionIds = 'n/a'
            }

            #region namingValidation
            if (-not [string]::IsNullOrEmpty($scopePolicyDefinition.Properties.displayname)) {
                $namingValidationResult = NamingValidation -toCheck $scopePolicyDefinition.Properties.displayname
                if ($namingValidationResult.Count -gt 0) {
                    if (-not $script:htNamingValidation.Policy.($hlpPolicyDefinitionId)) {
                        $script:htNamingValidation.Policy.($hlpPolicyDefinitionId) = @{}
                    }
                    $script:htNamingValidation.Policy.($hlpPolicyDefinitionId).displayNameInvalidChars = ($namingValidationResult -join '')
                    $script:htNamingValidation.Policy.($hlpPolicyDefinitionId).displayName = $scopePolicyDefinition.Properties.displayname
                }
            }
            if (-not [string]::IsNullOrEmpty($scopePolicyDefinition.Name)) {
                $namingValidationResult = NamingValidation -toCheck $scopePolicyDefinition.Name
                if ($namingValidationResult.Count -gt 0) {
                    if (-not $script:htNamingValidation.Policy.($hlpPolicyDefinitionId)) {
                        $script:htNamingValidation.Policy.($hlpPolicyDefinitionId) = @{}
                    }
                    $script:htNamingValidation.Policy.($hlpPolicyDefinitionId).nameInvalidChars = ($namingValidationResult -join '')
                    $script:htNamingValidation.Policy.($hlpPolicyDefinitionId).name = $scopePolicyDefinition.Name
                }
            }
            #endregion namingValidation
        }
    }

    $returnObject = @{}
    $returnObject.'PolicyDefinitionsScopedCount' = $PolicyDefinitionsScopedCount
    return $returnObject
}
$funcDataCollectionPolicyDefinitions = $function:dataCollectionPolicyDefinitions.ToString()

function dataCollectionPolicySetDefinitions {
    [CmdletBinding()]Param(
        [string]$TargetMgOrSub,
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    if ($TargetMgOrSub -eq 'Sub') {
        $currentTask = "Getting PolicySet definitions for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/policySetDefinitions?api-version=2021-06-01&`$filter=policyType eq 'Custom'"
    }
    if ($TargetMgOrSub -eq 'MG') {
        $currentTask = "Getting PolicySet definitions for Management Group: '$($scopeDisplayName)' ('$scopeId')"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementgroups/$($scopeId)/providers/Microsoft.Authorization/policySetDefinitions?api-version=2021-06-01&`$filter=policyType eq 'Custom'"
    }
    $method = 'GET'
    $requestPolicySetDefinitionAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $scopePolicySetDefinitions = $requestPolicySetDefinitionAPI.where( { $_.properties.policyType -eq 'custom' } )
    if ($TargetMgOrSub -eq 'Sub') {
        $PolicySetDefinitionsScopedCount = ($scopePolicySetDefinitions.where( { ($_.Id) -like "/subscriptions/$($scopeId)/*" } )).count
    }
    if ($TargetMgOrSub -eq 'MG') {
        $PolicySetDefinitionsScopedCount = (($scopePolicySetDefinitions.where( { ($_.Id) -like "/providers/Microsoft.Management/managementGroups/$($scopeId)/*" } ))).count
    }

    foreach ($scopePolicySetDefinition in $scopePolicySetDefinitions) {
        $hlpPolicySetDefinitionId = ($scopePolicySetDefinition.id).ToLower()

        $doIt = $true
        if ($TargetMgOrSub -eq 'MG') {
            $doIt = $false
            if ($hlpPolicySetDefinitionId -like "/providers/Microsoft.Management/managementGroups/$($scopeId)/*" -and $hlpPolicySetDefinitionId -notlike "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)/*") {
                $doIt = $true
            }
            if ($scopeId -eq $ManagementGroupId) {
                $doIt = $true
            }
        }

        if ($doIt) {
            if (($scopePolicySetDefinition.Properties.description).length -eq 0) {
                $policySetDefinitionDescription = 'no description given'
            }
            else {
                $policySetDefinitionDescription = $scopePolicySetDefinition.Properties.description
            }

            $htTemp = @{}
            $htTemp.Id = $hlpPolicySetDefinitionId
            if ($scopePolicySetDefinition.Id -like '/providers/Microsoft.Management/managementGroups/*') {
                $htTemp.Scope = (($scopePolicySetDefinition.Id).split('/'))[0..4] -join '/'
                $htTemp.ScopeMgSub = 'Mg'
                $htTemp.ScopeId = (($scopePolicySetDefinition.Id).split('/'))[4]
                $htTemp.ScopeMGLevel = $htManagementGroupsMgPath.((($scopePolicySetDefinition.Id).split('/'))[4]).ParentNameChainCount
            }
            if ($scopePolicySetDefinition.Id -like '/subscriptions/*') {
                $htTemp.Scope = (($scopePolicySetDefinition.Id).split('/'))[0..2] -join '/'
                $htTemp.ScopeMgSub = 'Sub'
                $htTemp.ScopeId = (($scopePolicySetDefinition.Id).split('/'))[2]
                $htTemp.ScopeMGLevel = $htSubscriptionsMgPath.((($scopePolicySetDefinition.Id).split('/'))[2]).level
            }
            $htTemp.DisplayName = $($scopePolicySetDefinition.Properties.displayname)
            $htTemp.Description = $($policySetDefinitionDescription)
            $htTemp.Type = $($scopePolicySetDefinition.Properties.policyType)
            $htTemp.Category = $($scopePolicySetDefinition.Properties.metadata.category)
            $htTemp.PolicyDefinitionId = $hlpPolicySetDefinitionId
            $arrayPolicySetPolicyIdsToLower = @()
            $htPolicySetPolicyRefIds = @{}
            $arrayPolicySetPolicyIdsToLower = foreach ($policySetPolicy in $scopePolicySetDefinition.properties.policydefinitions) {
                $($policySetPolicy.policyDefinitionId).ToLower()
                $htPolicySetPolicyRefIds.($policySetPolicy.policyDefinitionReferenceId) = ($policySetPolicy.policyDefinitionId)
            }
            $htTemp.PolicySetPolicyIds = $arrayPolicySetPolicyIdsToLower
            $htTemp.PolicySetPolicyRefIds = $htPolicySetPolicyRefIds
            $htTemp.Json = $scopePolicySetDefinition
            if ($scopePolicySetDefinition.Properties.metadata.deprecated -eq $true -or $scopePolicySetDefinition.Properties.displayname -like "``[Deprecated``]*") {
                $htTemp.Deprecated = $scopePolicySetDefinition.Properties.metadata.deprecated
            }
            else {
                $htTemp.Deprecated = $false
            }
            if ($scopePolicySetDefinition.Properties.metadata.preview -eq $true -or $scopePolicySetDefinition.Properties.displayname -like "``[*Preview``]*") {
                $htTemp.Preview = $scopePolicySetDefinition.Properties.metadata.preview
            }
            else {
                $htTemp.Preview = $false
            }
            ($script:htCacheDefinitionsPolicySet).($hlpPolicySetDefinitionId) = $htTemp

            #namingValidation
            if (-not [string]::IsNullOrEmpty($scopePolicySetDefinition.Properties.displayname)) {
                $namingValidationResult = NamingValidation -toCheck $scopePolicySetDefinition.Properties.displayname
                if ($namingValidationResult.Count -gt 0) {
                    if (-not $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id)) {
                        $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id) = @{}
                    }
                    $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id).displayNameInvalidChars = ($namingValidationResult -join '')
                    $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id).displayName = $scopePolicySetDefinition.Properties.displayname
                }
            }
            if (-not [string]::IsNullOrEmpty($scopePolicySetDefinition.Name)) {
                $namingValidationResult = NamingValidation -toCheck $scopePolicySetDefinition.Name
                if ($namingValidationResult.Count -gt 0) {
                    if (-not $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id)) {
                        $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id) = @{}
                    }
                    $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id).nameInvalidChars = ($namingValidationResult -join '')
                    $script:htNamingValidation.PolicySet.($scopePolicySetDefinition.Id).name = $scopePolicySetDefinition.Name
                }
            }
        }
    }

    $returnObject = @{}
    $returnObject.'PolicySetDefinitionsScopedCount' = $PolicySetDefinitionsScopedCount
    return $returnObject
}
$funcDataCollectionPolicySetDefinitions = $function:dataCollectionPolicySetDefinitions.ToString()

function dataCollectionPolicyAssignmentsMG {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $mgParentId,
        $mgParentName,
        $mgAscSecureScoreResult,
        $PolicyDefinitionsScopedCount,
        $PolicySetDefinitionsScopedCount
    )

    $addRowToTableDone = $false
    $currentTask = "Getting Policy assignments for Management Group: '$($scopeDisplayName)' ('$($scopeId)')"
    if ($azAPICallConf['htParameters'].LargeTenant -eq $false -or $azAPICallConf['htParameters'].PolicyAtScopeOnly -eq $false) {
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementgroups/$($scopeId)/providers/Microsoft.Authorization/policyAssignments?`$filter=atscope()&api-version=2021-06-01"
    }
    else {
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementgroups/$($scopeId)/providers/Microsoft.Authorization/policyAssignments?`$filter=atExactScope()&api-version=2021-06-01"
    }
    $method = 'GET'
    $L0mgmtGroupPolicyAssignments = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $L0mgmtGroupPolicyAssignmentsPolicyCount = (($L0mgmtGroupPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' } ))).count
    $L0mgmtGroupPolicyAssignmentsPolicySetCount = (($L0mgmtGroupPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' } ))).count
    $L0mgmtGroupPolicyAssignmentsPolicyAtScopeCount = (($L0mgmtGroupPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -and $_.Id -match "/providers/Microsoft.Management/managementGroups/$($scopeId)" } ))).count
    $L0mgmtGroupPolicyAssignmentsPolicySetAtScopeCount = (($L0mgmtGroupPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' -and $_.Id -match "/providers/Microsoft.Management/managementGroups/$($scopeId)" } ))).count
    $L0mgmtGroupPolicyAssignmentsPolicyAndPolicySetAtScopeCount = ($L0mgmtGroupPolicyAssignmentsPolicyAtScopeCount + $L0mgmtGroupPolicyAssignmentsPolicySetAtScopeCount)

    if (-not $htMgAtScopePolicyAssignments.($scopeId)) {
        $script:htMgAtScopePolicyAssignments.($scopeId) = @{}
        $script:htMgAtScopePolicyAssignments.($scopeId).AssignmentsCount = $L0mgmtGroupPolicyAssignmentsPolicyAndPolicySetAtScopeCount
    }

    foreach ($L0mgmtGroupPolicyAssignment in $L0mgmtGroupPolicyAssignments) {

        $doIt = $false
        if ($L0mgmtGroupPolicyAssignment.properties.scope -eq "/providers/Microsoft.Management/managementGroups/$($scopeId)" -and $L0mgmtGroupPolicyAssignment.properties.scope -ne "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)") {
            $doIt = $true
        }
        if ($scopeId -eq $ManagementGroupId) {
            $doIt = $true
        }

        if ($doIt) {
            $htTemp = @{}
            $htTemp.Assignment = $L0mgmtGroupPolicyAssignment
            $htTemp.AssignmentScopeMgSubRg = 'Mg'
            $splitAssignment = (($L0mgmtGroupPolicyAssignment.Id).ToLower()).Split('/')
            $htTemp.AssignmentScopeId = [string]($splitAssignment[4])
            $script:htCacheAssignmentsPolicy.(($L0mgmtGroupPolicyAssignment.Id).ToLower()) = $htTemp
        }

        #region namingValidation
        if (-not [string]::IsNullOrEmpty($L0mgmtGroupPolicyAssignment.Properties.DisplayName)) {
            $namingValidationResult = NamingValidation -toCheck $L0mgmtGroupPolicyAssignment.Properties.DisplayName
            if ($namingValidationResult.Count -gt 0) {
                if (-not $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id)) {
                    $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id) = @{}
                }
                $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id).displayNameInvalidChars = ($namingValidationResult -join '')
                $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id).displayName = $L0mgmtGroupPolicyAssignment.Properties.DisplayName
            }
        }
        if (-not [string]::IsNullOrEmpty($L0mgmtGroupPolicyAssignment.Name)) {
            $namingValidationResult = NamingValidation -toCheck $L0mgmtGroupPolicyAssignment.Name
            if ($namingValidationResult.Count -gt 0) {
                if (-not $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id)) {
                    $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id) = @{}
                }
                $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id).nameInvalidChars = ($namingValidationResult -join '')
                $script:htNamingValidation.PolicyAssignment.($L0mgmtGroupPolicyAssignment.Id).name = $L0mgmtGroupPolicyAssignment.Name
            }
        }
        #endregion namingValidation

        if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -OR $L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {

            #policy
            if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/') {
                $policyVariant = 'Policy'
                $policyDefinitionId = ($L0mgmtGroupPolicyAssignment.properties.policydefinitionid).ToLower()

                $policyDefinitionSplitted = $policyDefinitionId.split('/')
                $hlpPolicyDefinitionScope = $policyDefinitionSplitted[4]

                if ( ($policyDefinitionId -like '/providers/microsoft.management/managementgroups/*' -and $htManagementGroupsMgPath.($scopeId).path -contains ($hlpPolicyDefinitionScope)) -or $policyDefinitionId -like '/providers/microsoft.authorization/policydefinitions/*' ) {
                    $tryCounter = 0
                    do {
                        $tryCounter++
                        if (($htCacheDefinitionsPolicy).($policyDefinitionId)) {
                            $policyReturnedFromHt = $true
                            $policyDefinition = ($htCacheDefinitionsPolicy).($policyDefinitionId)

                            if ([string]::IsnullOrEmpty($policyDefinition.PolicyDefinitionId)) {
                                Write-Host "check: $policyDefinitionId"
                                $policyDefinition
                            }

                            if ($policyDefinition.Type -eq 'Custom') {
                                $policyDefintionScope = $policyDefinition.Scope
                                $policyDefintionScopeMgSub = $policyDefinition.ScopeMgSub
                                $policyDefintionScopeId = $policyDefinition.ScopeId
                            }
                            else {
                                $policyDefintionScope = 'n/a'
                                $policyDefintionScopeMgSub = 'n/a'
                                $policyDefintionScopeId = 'n/a'
                            }

                            $policyAvailability = ''
                            $policyDisplayName = ($policyDefinition).DisplayName
                            $policyDescription = ($policyDefinition).Description
                            $policyDefinitionType = ($policyDefinition).Type
                            $policyCategory = ($policyDefinition).Category
                            $policyDefinitionEffectDefault = ($policyDefinition).effectDefaultValue
                            $policyDefinitionEffectFixed = ($policyDefinition).effectFixedValue
                        }
                        else {
                            #test
                            Write-Host "   attention! $scopeDisplayName ($scopeId); policyAssignment '$($L0mgmtGroupPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' -retry"
                            start-sleep -seconds 1
                        }
                    }
                    until ($policyReturnedFromHt -or $tryCounter -gt 2)
                    if (-not $policyReturnedFromHt) {
                        Write-Host "   attention! $scopeDisplayName ($scopeId); policyAssignment '$($L0mgmtGroupPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)'"
                        Write-Host "   scope: $($scopeId) Policy / Custom:$($mgPolicyDefinitions.Count) CustomAtScope:$($PolicyDefinitionsScopedCount)"
                        Write-Host "   built-in PolicyDefinitions: $($($htCacheDefinitionsPolicy).Values.where({$_.Type -eq 'BuiltIn'}).Count)"
                        Write-Host "   custom PolicyDefinitions: $($($htCacheDefinitionsPolicy).Values.where({$_.Type -eq 'Custom'}).Count)"
                        Write-Host '   Listing all PolicyDefinitions:'
                        foreach ($tmpPolicyDefinitionId in ($($htCacheDefinitionsPolicy).Keys | Sort-Object)) {
                            Write-Host $tmpPolicyDefinitionId
                        }
                        Throw 'Error - AzGovViz: check the last console output for details'
                    }
                }
                #policyDefinition Scope does not exist
                else {
                    if ($htManagementGroupsMgPath.Keys -contains $hlpPolicyDefinitionScope) {
                        Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L0mgmtGroupPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' - the scope '$($hlpPolicyDefinitionScope)' is not contained in the '$scopeId' Management Group chain. The Policy definition scope '$hlpPolicyDefinitionScope' has MGPath: '$($htManagementGroupsMgPath.($hlpPolicyDefinitionScope).pathDelimited)'"
                    }
                    else {
                        Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L0mgmtGroupPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' - the scope '$($hlpPolicyDefinitionScope)' could not be found"
                    }
                    $policyAvailability = 'na'

                    $policyDefintionScope = "/$($policyDefinitionSplitted[1])/$($policyDefinitionSplitted[2])/$($policyDefinitionSplitted[3])/$($hlpPolicyDefinitionScope)"
                    $policyDefintionScopeMgSub = 'Mg'
                    $policyDefintionScopeId = $hlpPolicyDefinitionScope

                    $policyDisplayName = 'unknown'
                    $policyDescription = 'unknown'
                    $policyDefinitionType = 'likely Custom'
                    $policyCategory = 'unknown'
                    $policyDefinitionEffectDefault = 'unknown'
                    $policyDefinitionEffectFixed = 'unknown'
                }

                $policyAssignmentScope = $L0mgmtGroupPolicyAssignment.Properties.Scope
                $policyAssignmentId = ($L0mgmtGroupPolicyAssignment.Id).ToLower()
                $policyAssignmentName = $L0mgmtGroupPolicyAssignment.Name
                $policyAssignmentDisplayName = $L0mgmtGroupPolicyAssignment.Properties.DisplayName
                if (($L0mgmtGroupPolicyAssignment.Properties.Description).length -eq 0) {
                    $policyAssignmentDescription = 'no description given'
                }
                else {
                    $policyAssignmentDescription = $L0mgmtGroupPolicyAssignment.Properties.Description
                }

                if ($L0mgmtGroupPolicyAssignment.identity) {
                    $policyAssignmentIdentity = $L0mgmtGroupPolicyAssignment.identity.principalId
                }
                else {
                    $policyAssignmentIdentity = 'n/a'
                }

                $assignedBy = 'n/a'
                $createdBy = ''
                $createdOn = ''
                $updatedBy = ''
                $updatedOn = ''
                if ($L0mgmtGroupPolicyAssignment.properties.metadata) {
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy) {
                        $assignedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdBy) {
                        $createdBy = $L0mgmtGroupPolicyAssignment.properties.metadata.createdBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdOn) {
                        $createdOn = $L0mgmtGroupPolicyAssignment.properties.metadata.createdOn
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy) {
                        $updatedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn) {
                        $updatedOn = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn
                    }
                }

                if ($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.Message) {
                    $nonComplianceMessage = $L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.Message
                }
                else {
                    $nonComplianceMessage = ''
                }

                $formatedPolicyAssignmentParameters = ''
                $hlp = $L0mgmtGroupPolicyAssignment.Properties.Parameters
                if (-not [string]::IsNullOrEmpty($hlp)) {
                    $arrayPolicyAssignmentParameters = @()
                    $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                        "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                    }
                    $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                }

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $scopeDisplayName `
                    -mgId $scopeId `
                    -mgParentId $mgParentId `
                    -mgParentName $mgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Policy $policyDisplayName `
                    -PolicyAvailability $policyAvailability `
                    -PolicyDescription $policyDescription `
                    -PolicyVariant $policyVariant `
                    -PolicyType $policyDefinitionType `
                    -PolicyCategory $policyCategory `
                    -PolicyDefinitionIdGuid ($policyDefinitionId -replace '.*/') `
                    -PolicyDefinitionId $policyDefinitionId `
                    -PolicyDefintionScope $policyDefintionScope `
                    -PolicyDefintionScopeMgSub $policyDefintionScopeMgSub `
                    -PolicyDefintionScopeId $policyDefintionScopeId `
                    -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedManagementGroup `
                    -PolicyDefinitionsScopedCount $policyDefinitionsScopedCount `
                    -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedManagementGroup `
                    -PolicySetDefinitionsScopedCount $policySetDefinitionsScopedCount `
                    -PolicyDefinitionEffectDefault $policyDefinitionEffectDefault `
                    -PolicyDefinitionEffectFixed $policyDefinitionEffectFixed `
                    -PolicyAssignmentScope $policyAssignmentScope `
                    -PolicyAssignmentScopeMgSubRg 'Mg' `
                    -PolicyAssignmentScopeName ($policyAssignmentScope -replace '.*/', '') `
                    -PolicyAssignmentNotScopes $L0mgmtGroupPolicyAssignment.Properties.NotScopes `
                    -PolicyAssignmentId $policyAssignmentId `
                    -PolicyAssignmentName $policyAssignmentName `
                    -PolicyAssignmentDisplayName $policyAssignmentDisplayName `
                    -PolicyAssignmentDescription $policyAssignmentDescription `
                    -PolicyAssignmentEnforcementMode $L0mgmtGroupPolicyAssignment.Properties.EnforcementMode `
                    -PolicyAssignmentNonComplianceMessages $nonComplianceMessage `
                    -PolicyAssignmentIdentity $policyAssignmentIdentity `
                    -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsManagementGroup `
                    -PolicyAssignmentCount $L0mgmtGroupPolicyAssignmentsPolicyCount `
                    -PolicyAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicyAtScopeCount `
                    -PolicyAssignmentParameters $L0mgmtGroupPolicyAssignment.Properties.Parameters `
                    -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                    -PolicyAssignmentAssignedBy $assignedBy `
                    -PolicyAssignmentCreatedBy $createdBy `
                    -PolicyAssignmentCreatedOn $createdOn `
                    -PolicyAssignmentUpdatedBy $updatedBy `
                    -PolicyAssignmentUpdatedOn $updatedOn `
                    -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsManagementGroup `
                    -PolicySetAssignmentCount $L0mgmtGroupPolicyAssignmentsPolicySetCount `
                    -PolicySetAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicySetAtScopeCount `
                    -PolicyAndPolicySetAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicyAndPolicySetAtScopeCount
            }

            #policySet
            if ($L0mgmtGroupPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {
                $policyVariant = 'PolicySet'
                $policySetDefinitionId = ($L0mgmtGroupPolicyAssignment.properties.policydefinitionid).ToLower()
                $policySetDefinitionSplitted = $policySetDefinitionId.split('/')
                $hlpPolicySetDefinitionScope = $policySetDefinitionSplitted[4]

                $tryCounter = 0
                do {
                    $tryCounter++
                    if (($htCacheDefinitionsPolicySet).($policySetDefinitionId)) {
                        $policySetReturnedFromHt = $true
                        $policySetDefinition = ($htCacheDefinitionsPolicySet).($policySetDefinitionId)
                        if ($policySetDefinition.Type -eq 'Custom') {
                            $policySetDefintionScope = $policySetDefinition.Scope
                            $policySetDefintionScopeMgSub = $policySetDefinition.ScopeMgSub
                            $policySetDefintionScopeId = $policySetDefinition.ScopeId
                        }
                        else {
                            $policySetDefintionScope = 'n/a'
                            $policySetDefintionScopeMgSub = 'n/a'
                            $policySetDefintionScopeId = 'n/a'
                        }
                        $policySetDisplayName = $policySetDefinition.DisplayName
                        $policySetDescription = $policySetDefinition.Description
                        $policySetDefinitionType = $policySetDefinition.Type
                        $policySetCategory = $policySetDefinition.Category
                    }
                    else {
                        #test
                        #Write-Host "pa '($L0mgmtGroupPolicyAssignment.Id)' scope: '$($scopeId)' - policySetDefinition not available: $policySetDefinitionId"
                        start-sleep -seconds 1
                    }
                }
                until ($policySetReturnedFromHt -or $tryCounter -gt 2)
                if (-not $policySetReturnedFromHt) {
                    Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L0mgmtGroupPolicyAssignment.Id)' policyDefinition (PolicySet) could not be found: '$($policySetDefinitionId)'"
                    $policySetDefintionScope = "/$($policySetDefinitionSplitted[1])/$($policySetDefinitionSplitted[2])/$($policySetDefinitionSplitted[3])/$($hlpPolicySetDefinitionScope)"
                    $policySetDefintionScopeMgSub = 'Mg'
                    $policySetDefintionScopeId = $hlpPolicySetDefinitionScope
                    $policySetDisplayName = 'unknown'
                    $policySetDescription = 'unknown'
                    $policySetDefinitionType = 'likely Custom'
                    $policySetCategory = 'unknown'
                }

                $policyAssignmentScope = $L0mgmtGroupPolicyAssignment.Properties.Scope
                $policyAssignmentId = ($L0mgmtGroupPolicyAssignment.Id).ToLower()
                $policyAssignmentName = $L0mgmtGroupPolicyAssignment.Name
                $policyAssignmentDisplayName = $L0mgmtGroupPolicyAssignment.Properties.DisplayName
                if (($L0mgmtGroupPolicyAssignment.Properties.Description).length -eq 0) {
                    $policyAssignmentDescription = 'no description given'
                }
                else {
                    $policyAssignmentDescription = $L0mgmtGroupPolicyAssignment.Properties.Description
                }

                if ($L0mgmtGroupPolicyAssignment.identity) {
                    $policyAssignmentIdentity = $L0mgmtGroupPolicyAssignment.identity.principalId
                }
                else {
                    $policyAssignmentIdentity = 'n/a'
                }

                $assignedBy = 'n/a'
                $createdBy = ''
                $createdOn = ''
                $updatedBy = ''
                $updatedOn = ''
                if ($L0mgmtGroupPolicyAssignment.properties.metadata) {
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy) {
                        $assignedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.assignedBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdBy) {
                        $createdBy = $L0mgmtGroupPolicyAssignment.properties.metadata.createdBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.createdOn) {
                        $createdOn = $L0mgmtGroupPolicyAssignment.properties.metadata.createdOn
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy) {
                        $updatedBy = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedBy
                    }
                    if ($L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn) {
                        $updatedOn = $L0mgmtGroupPolicyAssignment.properties.metadata.updatedOn
                    }
                }

                if (($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId } )).Message) {
                    $nonComplianceMessage = ($L0mgmtGroupPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId } )).Message
                }
                else {
                    $nonComplianceMessage = ''
                }

                $formatedPolicyAssignmentParameters = ''
                $hlp = $L0mgmtGroupPolicyAssignment.Properties.Parameters
                if (-not [string]::IsNullOrEmpty($hlp)) {
                    $arrayPolicyAssignmentParameters = @()
                    $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                        "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                    }
                    $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                }

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $scopeDisplayName `
                    -mgId $scopeId `
                    -mgParentId $mgParentId `
                    -mgParentName $mgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Policy $policySetDisplayName `
                    -PolicyDescription $policySetDescription `
                    -PolicyVariant $policyVariant `
                    -PolicyType $policySetDefinitionType `
                    -PolicyCategory $policySetCategory `
                    -PolicyDefinitionIdGuid ($policySetDefinitionId -replace '.*/') `
                    -PolicyDefinitionId $policySetDefinitionId `
                    -PolicyDefintionScope $policySetDefintionScope `
                    -PolicyDefintionScopeMgSub $policySetDefintionScopeMgSub `
                    -PolicyDefintionScopeId $policySetDefintionScopeId `
                    -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedManagementGroup `
                    -PolicyDefinitionsScopedCount $policyDefinitionsScopedCount `
                    -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedManagementGroup `
                    -PolicySetDefinitionsScopedCount $policySetDefinitionsScopedCount `
                    -PolicyAssignmentScope $policyAssignmentScope `
                    -PolicyAssignmentScopeMgSubRg 'Mg' `
                    -PolicyAssignmentScopeName ($policyAssignmentScope -replace '.*/', '') `
                    -PolicyAssignmentNotScopes $L0mgmtGroupPolicyAssignment.Properties.NotScopes `
                    -PolicyAssignmentId $policyAssignmentId `
                    -PolicyAssignmentName $policyAssignmentName `
                    -PolicyAssignmentDisplayName $policyAssignmentDisplayName `
                    -PolicyAssignmentDescription $policyAssignmentDescription `
                    -PolicyAssignmentEnforcementMode $L0mgmtGroupPolicyAssignment.Properties.EnforcementMode `
                    -PolicyAssignmentNonComplianceMessages $nonComplianceMessage `
                    -PolicyAssignmentIdentity $policyAssignmentIdentity `
                    -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsManagementGroup `
                    -PolicyAssignmentCount $L0mgmtGroupPolicyAssignmentsPolicyCount `
                    -PolicyAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicyAtScopeCount `
                    -PolicyAssignmentParameters $L0mgmtGroupPolicyAssignment.Properties.Parameters `
                    -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                    -PolicyAssignmentAssignedBy $assignedBy `
                    -PolicyAssignmentCreatedBy $createdBy `
                    -PolicyAssignmentCreatedOn $createdOn `
                    -PolicyAssignmentUpdatedBy $updatedBy `
                    -PolicyAssignmentUpdatedOn $updatedOn `
                    -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsManagementGroup `
                    -PolicySetAssignmentCount $L0mgmtGroupPolicyAssignmentsPolicySetCount `
                    -PolicySetAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicySetAtScopeCount `
                    -PolicyAndPolicySetAssignmentAtScopeCount $L0mgmtGroupPolicyAssignmentsPolicyAndPolicySetAtScopeCount
            }
        }
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionPolicyAssignmentsMG = $function:dataCollectionPolicyAssignmentsMG.ToString()

function dataCollectionPolicyAssignmentsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $childMgDisplayName,
        $childMgId,
        $childMgParentId,
        $childMgParentName,
        $mgAscSecureScoreResult,
        $subscriptionQuotaId,
        $subscriptionState,
        $subscriptionASCSecureScore,
        $subscriptionTags,
        $subscriptionTagsCount,
        $PolicyDefinitionsScopedCount,
        $PolicySetDefinitionsScopedCount
    )

    $currentTask = "Getting Policy assignments for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/policyAssignments?api-version=2021-06-01"
    $method = 'GET'

    $addRowToTableDone = $false
    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy -eq $false) {
        $L1mgmtGroupSubPolicyAssignments = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

        $L1mgmtGroupSubPolicyAssignmentsPolicyCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicySetCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicyAtScopeCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -and $_.Id -match "/subscriptions/$($scopeId)" } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicySetAtScopeCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' -and $_.Id -match "/subscriptions/$($scopeId)" } )).count
        $L1mgmtGroupSubPolicyAssignmentsQuery = $L1mgmtGroupSubPolicyAssignments
    }
    else {
        $L1mgmtGroupSubPolicyAssignments = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

        $L1mgmtGroupSubPolicyAssignmentsPolicyCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -and $_.Id -notmatch "/subscriptions/$($scopeId)/resourceGroups" } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicySetCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' -and $_.Id -notmatch "/subscriptions/$($scopeId)/resourceGroups" } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicyAtScopeCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -and $_.Id -match "/subscriptions/$($scopeId)" -and $_.Id -notmatch "/subscriptions/$($scopeId)/resourceGroups" } )).count
        $L1mgmtGroupSubPolicyAssignmentsPolicySetAtScopeCount = ($L1mgmtGroupSubPolicyAssignments.where( { $_.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/' -and $_.Id -match "/subscriptions/$($scopeId)" -and $_.Id -notmatch "/subscriptions/$($scopeId)/resourceGroups" } )).count
        foreach ($L1mgmtGroupSubPolicyAssignment in $L1mgmtGroupSubPolicyAssignments.where( { $_.Id -match "/subscriptions/$($scopeId)/resourceGroups" } )) {
            ($script:htCacheAssignmentsPolicyOnResourceGroupsAndResources).(($L1mgmtGroupSubPolicyAssignment.Id).ToLower()) = $L1mgmtGroupSubPolicyAssignment
        }
        $L1mgmtGroupSubPolicyAssignmentsQuery = $L1mgmtGroupSubPolicyAssignments.where( { $_.Id -notmatch "/subscriptions/$($scopeId)/resourceGroups" } )
    }

    $L1mgmtGroupSubPolicyAssignmentsPolicyAndPolicySetAtScopeCount = ($L1mgmtGroupSubPolicyAssignmentsPolicyAtScopeCount + $L1mgmtGroupSubPolicyAssignmentsPolicySetAtScopeCount)

    foreach ($L1mgmtGroupSubPolicyAssignment in $L1mgmtGroupSubPolicyAssignmentsQuery ) {
        if ($L1mgmtGroupSubPolicyAssignment.Id -like "/subscriptions/$($scopeId)/*") {
            $htTemp = @{}
            $htTemp.Assignment = $L1mgmtGroupSubPolicyAssignment
            $splitAssignment = (($L1mgmtGroupSubPolicyAssignment.Id).ToLower()).Split('/')
            if (($L1mgmtGroupSubPolicyAssignment.Id).ToLower() -like "/subscriptions/$($scopeId)/resourceGroups*") {
                $htTemp.AssignmentScopeMgSubRg = 'Rg'
                $htTemp.AssignmentScopeId = "$($splitAssignment[2])/$($splitAssignment[4])"
            }
            else {
                $htTemp.AssignmentScopeMgSubRg = 'Sub'
                $htTemp.AssignmentScopeId = [string]$splitAssignment[2]
            }
            $script:htCacheAssignmentsPolicy.(($L1mgmtGroupSubPolicyAssignment.Id).ToLower()) = $htTemp
        }

        #region namingValidation
        if (-not [string]::IsNullOrEmpty($L1mgmtGroupSubPolicyAssignment.Properties.DisplayName)) {
            $namingValidationResult = NamingValidation -toCheck $L1mgmtGroupSubPolicyAssignment.Properties.DisplayName
            if ($namingValidationResult.Count -gt 0) {
                if (-not $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id)) {
                    $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id) = @{}
                }
                $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id).displayNameInvalidChars = ($namingValidationResult -join '')
                $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id).displayName = $L1mgmtGroupSubPolicyAssignment.Properties.DisplayName
            }
        }
        if (-not [string]::IsNullOrEmpty($L1mgmtGroupSubPolicyAssignment.Name)) {
            $namingValidationResult = NamingValidation -toCheck $L1mgmtGroupSubPolicyAssignment.Name
            if ($namingValidationResult.Count -gt 0) {
                if (-not $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id)) {
                    $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id) = @{}
                }
                $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id).nameInvalidChars = ($namingValidationResult -join '')
                $script:htNamingValidation.PolicyAssignment.($L1mgmtGroupSubPolicyAssignment.Id).name = $L1mgmtGroupSubPolicyAssignment.Name
            }
        }
        #endregion namingValidation

        if ($L1mgmtGroupSubPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/' -OR $L1mgmtGroupSubPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {

            #policy
            if ($L1mgmtGroupSubPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policyDefinitions/') {
                $policyVariant = 'Policy'
                $policyDefinitionId = ($L1mgmtGroupSubPolicyAssignment.properties.policydefinitionid).ToLower()

                if (($htCacheDefinitionsPolicy).($policyDefinitionId)) {
                    $policyAvailability = ''

                    #handling some strange scenario where the synchronized hashTable responds fragments?!
                    $tryCounter = 0
                    do {
                        $tryCounter++
                        $policyAssignmentsPolicyDefinition = ($htCacheDefinitionsPolicy).($policyDefinitionId)

                        if (($policyAssignmentsPolicyDefinition).Type -eq 'Custom' -or ($policyAssignmentsPolicyDefinition).Type -eq 'Builtin') {
                            $policyReturnedFromHt = $true

                            $policyDisplayName = ($policyAssignmentsPolicyDefinition).DisplayName
                            $policyDescription = ($policyAssignmentsPolicyDefinition).Description
                            $policyDefinitionType = ($policyAssignmentsPolicyDefinition).Type
                            $policyCategory = ($policyAssignmentsPolicyDefinition).Category
                            $policyDefinitionEffectDefault = ($policyAssignmentsPolicyDefinition).effectDefaultValue
                            $policyDefinitionEffectFixed = ($policyAssignmentsPolicyDefinition).effectFixedValue

                            if (($policyAssignmentsPolicyDefinition).Type -ne $policyDefinitionType) {
                                Write-Host "$scopeDisplayName ($scopeId) $policyVariant was processing: $policyDefinitionId"
                                Write-Host "'$(($policyAssignmentsPolicyDefinition).Type)' ne '$policyDefinitionType'"
                                Write-Host "!Please report this error: $($azAPICallConf['htParameters'].GithubRepository)" -ForegroundColor Yellow
                                throw
                            }

                            if ($policyDefinitionType -eq 'Custom') {
                                $policyDefintionScope = ($policyAssignmentsPolicyDefinition).Scope
                                $policyDefintionScopeMgSub = ($policyAssignmentsPolicyDefinition).ScopeMgSub
                                $policyDefintionScopeId = ($policyAssignmentsPolicyDefinition).ScopeId
                            }

                            if ($policyDefinitionType -eq 'Builtin') {
                                $policyDefintionScope = 'n/a'
                                $policyDefintionScopeMgSub = 'n/a'
                                $policyDefintionScopeId = 'n/a'
                            }
                        }
                        else {
                            Write-Host " **INCONSISTENCY! processing policyId:'$policyDefinitionId'; policyAss:'$($L1mgmtGroupSubPolicyAssignment.Id)'; policyAssignmentsPolicyDefinition.Type: '$($policyAssignmentsPolicyDefinition.Type)'"
                            start-sleep -seconds 1
                        }
                    }
                    until($policyReturnedFromHt -or $tryCounter -gt 5)
                    if (-not $policyReturnedFromHt) {
                        Write-Host "FinalHandler - $scopeDisplayName ($scopeId) $policyVariant was processing: policyId:'$policyDefinitionId'; policyAss:'$($L1mgmtGroupSubPolicyAssignment.Id)'; policyAssignmentsPolicyDefinition.Type: '$($policyAssignmentsPolicyDefinition.Type)'"
                        Write-Host ($policyAssignmentsPolicyDefinition | ConvertTo-Json -depth 99)
                        Write-Host "!Please report this error: $($azAPICallConf['htParameters'].GithubRepository)" -ForegroundColor Yellow
                        throw
                    }
                }
                #policyDefinition not exists!
                else {
                    $policyDefinitionSplitted = $policyDefinitionId.split('/')

                    if ($policyDefinitionId -like '/providers/microsoft.management/managementgroups/*') {
                        $hlpPolicyDefinitionScope = $policyDefinitionSplitted[4]
                        if ($htSubscriptionsMgPath.($scopeId).path -contains $hlpPolicyDefinitionScope) {
                            Write-Host "   ATTENTION: $scopeDisplayName ($scopeId); policyAssignment '$($L1mgmtGroupSubPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' - the scope '$($hlpPolicyDefinitionScope)' HOWEVER IS CONTAINED in the '$scopeId' Management Group chain. The Policy definition scope '$hlpPolicyDefinitionScope' has MGPath: '$($htManagementGroupsMgPath.($hlpPolicyDefinitionScope).pathDelimited)'"
                        }
                        else {
                            if ($htManagementGroupsMgPath.($hlpPolicyDefinitionScope)) {
                                Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L1mgmtGroupSubPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' - the scope '$($hlpPolicyDefinitionScope)' IS NOT CONTAINED in the '$scopeId' Management Group chain. The Policy definition scope '$hlpPolicyDefinitionScope' has MGPath: '$($htManagementGroupsMgPath.($hlpPolicyDefinitionScope).pathDelimited)'"
                            }
                            else {
                                Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L1mgmtGroupSubPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)' - the scope '$($hlpPolicyDefinitionScope)' IS NOT CONTAINED in the '$scopeId' Management Group chain. The Policy definition scope '$hlpPolicyDefinitionScope' could not be found"
                            }
                        }
                        $policyDefintionScope = "/$($policyDefinitionSplitted[1])/$($policyDefinitionSplitted[2])/$($policyDefinitionSplitted[3])/$($hlpPolicyDefinitionScope)"
                        $policyDefintionScopeMgSub = 'Mg'
                        $policyDefintionScopeId = $hlpPolicyDefinitionScope
                    }
                    else {
                        $hlpPolicyDefinitionScope = $policyDefinitionSplitted[2]
                        Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L1mgmtGroupSubPolicyAssignment.Id)' policyDefinition (Policy) could not be found: '$($policyDefinitionId)'"
                        $policyDefintionScope = "/$($policyDefinitionSplitted[1])/$($hlpPolicyDefinitionScope)"
                        $policyDefintionScopeMgSub = 'Sub'
                        $policyDefintionScopeId = $hlpPolicyDefinitionScope
                    }
                    $policyAvailability = 'na'
                    $policyDisplayName = 'unknown'
                    $policyDescription = 'unknown'
                    $policyDefinitionType = 'likely Custom'
                    $policyCategory = 'unknown'
                    $policyDefinitionEffectDefault = 'unknown'
                    $policyDefinitionEffectFixed = 'unknown'
                }

                $PolicyAssignmentScope = $L1mgmtGroupSubPolicyAssignment.Properties.Scope
                if ($PolicyAssignmentScope -like '/providers/Microsoft.Management/managementGroups/*') {
                    $PolicyAssignmentScopeMgSubRg = 'Mg'
                }
                else {
                    $splitPolicyAssignmentScope = ($PolicyAssignmentScope).Split('/')
                    switch (($splitPolicyAssignmentScope).Count - 1) {
                        #sub
                        2 {
                            $PolicyAssignmentScopeMgSubRg = 'Sub'
                        }
                        4 {
                            $PolicyAssignmentScopeMgSubRg = 'Rg'
                        }
                        Default {
                            $PolicyAssignmentScopeMgSubRg = 'unknown'
                        }
                    }
                }

                $PolicyAssignmentId = ($L1mgmtGroupSubPolicyAssignment.Id).ToLower()
                $PolicyAssignmentName = $L1mgmtGroupSubPolicyAssignment.Name
                $PolicyAssignmentDisplayName = $L1mgmtGroupSubPolicyAssignment.Properties.DisplayName
                if (($L1mgmtGroupSubPolicyAssignment.Properties.Description).length -eq 0) {
                    $PolicyAssignmentDescription = 'no description given'
                }
                else {
                    $PolicyAssignmentDescription = $L1mgmtGroupSubPolicyAssignment.Properties.Description
                }

                if ($L1mgmtGroupSubPolicyAssignment.identity) {
                    $PolicyAssignmentIdentity = $L1mgmtGroupSubPolicyAssignment.identity.principalId
                }
                else {
                    $PolicyAssignmentIdentity = 'n/a'
                }

                $assignedBy = 'n/a'
                $createdBy = ''
                $createdOn = ''
                $updatedBy = ''
                $updatedOn = ''
                if ($L1mgmtGroupSubPolicyAssignment.properties.metadata) {
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.assignedBy) {
                        $assignedBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.assignedBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.createdBy) {
                        $createdBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.createdBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.createdOn) {
                        $createdOn = $L1mgmtGroupSubPolicyAssignment.properties.metadata.createdOn
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedBy) {
                        $updatedBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedOn) {
                        $updatedOn = $L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedOn
                    }
                }

                if ($L1mgmtGroupSubPolicyAssignment.Properties.nonComplianceMessages.Message) {
                    $nonComplianceMessage = $L1mgmtGroupSubPolicyAssignment.Properties.nonComplianceMessages.Message
                }
                else {
                    $nonComplianceMessage = ''
                }

                $formatedPolicyAssignmentParameters = ''
                $hlp = $L1mgmtGroupSubPolicyAssignment.Properties.Parameters
                if (-not [string]::IsNullOrEmpty($hlp)) {
                    $arrayPolicyAssignmentParameters = @()
                    $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                        "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                    }
                    $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                }

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $childMgDisplayName `
                    -mgId $childMgId `
                    -mgParentId $childMgParentId `
                    -mgParentName $childMgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Subscription $scopeDisplayName `
                    -SubscriptionId $scopeId `
                    -SubscriptionQuotaId $subscriptionQuotaId `
                    -SubscriptionState $subscriptionState `
                    -SubscriptionASCSecureScore $subscriptionASCSecureScore `
                    -SubscriptionTags $subscriptionTags `
                    -SubscriptionTagsCount $subscriptionTagsCount `
                    -Policy $policyDisplayName `
                    -PolicyAvailability $policyAvailability `
                    -PolicyDescription $policyDescription `
                    -PolicyVariant $policyVariant `
                    -PolicyType $policyDefinitionType `
                    -PolicyCategory $policyCategory `
                    -PolicyDefinitionIdGuid ($policyDefinitionId -replace '.*/') `
                    -PolicyDefinitionId $policyDefinitionId `
                    -PolicyDefintionScope $policyDefintionScope `
                    -PolicyDefintionScopeMgSub $policyDefintionScopeMgSub `
                    -PolicyDefintionScopeId $policyDefintionScopeId `
                    -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedSubscription `
                    -PolicyDefinitionsScopedCount $PolicyDefinitionsScopedCount `
                    -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedSubscription `
                    -PolicySetDefinitionsScopedCount $PolicySetDefinitionsScopedCount `
                    -PolicyDefinitionEffectDefault $policyDefinitionEffectDefault `
                    -PolicyDefinitionEffectFixed $policyDefinitionEffectFixed `
                    -PolicyAssignmentScope $PolicyAssignmentScope `
                    -PolicyAssignmentScopeMgSubRg $PolicyAssignmentScopeMgSubRg `
                    -PolicyAssignmentScopeName ($PolicyAssignmentScope -replace '.*/', '') `
                    -PolicyAssignmentNotScopes $L1mgmtGroupSubPolicyAssignment.Properties.NotScopes `
                    -PolicyAssignmentId $PolicyAssignmentId `
                    -PolicyAssignmentName $PolicyAssignmentName `
                    -PolicyAssignmentDisplayName $PolicyAssignmentDisplayName `
                    -PolicyAssignmentDescription $PolicyAssignmentDescription `
                    -PolicyAssignmentEnforcementMode $L1mgmtGroupSubPolicyAssignment.Properties.EnforcementMode `
                    -PolicyAssignmentNonComplianceMessages $nonComplianceMessage `
                    -PolicyAssignmentIdentity $PolicyAssignmentIdentity `
                    -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsSubscription `
                    -PolicyAssignmentCount $L1mgmtGroupSubPolicyAssignmentsPolicyCount `
                    -PolicyAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicyAtScopeCount `
                    -PolicyAssignmentParameters $L1mgmtGroupSubPolicyAssignment.Properties.Parameters `
                    -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                    -PolicyAssignmentAssignedBy $assignedBy `
                    -PolicyAssignmentCreatedBy $createdBy `
                    -PolicyAssignmentCreatedOn $createdOn `
                    -PolicyAssignmentUpdatedBy $updatedBy `
                    -PolicyAssignmentUpdatedOn $updatedOn `
                    -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsSubscription `
                    -PolicySetAssignmentCount $L1mgmtGroupSubPolicyAssignmentsPolicySetCount `
                    -PolicySetAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicySetAtScopeCount `
                    -PolicyAndPolicySetAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicyAndPolicySetAtScopeCount
            }

            #policySet
            if ($L1mgmtGroupSubPolicyAssignment.properties.policyDefinitionId -match '/providers/Microsoft.Authorization/policySetDefinitions/') {
                $policyVariant = 'PolicySet'
                $policySetDefinitionId = ($L1mgmtGroupSubPolicyAssignment.properties.policydefinitionid).ToLower()
                $policySetDefinitionSplitted = $policySetDefinitionId.split('/')

                if (($htCacheDefinitionsPolicySet).($policySetDefinitionId)) {
                    $policyAvailability = ''

                    #handling some strange behavior where the synchronized hashTable responds fragments?!
                    $tryCounter = 0
                    do {
                        $tryCounter++
                        $policyAssignmentsPolicySetDefinition = ($htCacheDefinitionsPolicySet).($policySetDefinitionId)

                        if (($policyAssignmentsPolicySetDefinition).Type -eq 'Custom' -or ($policyAssignmentsPolicySetDefinition).Type -eq 'Builtin') {
                            $policySetReturnedFromHt = $true

                            $policySetDisplayName = ($policyAssignmentsPolicySetDefinition).DisplayName
                            $policySetDescription = ($policyAssignmentsPolicySetDefinition).Description
                            $policySetDefinitionType = ($policyAssignmentsPolicySetDefinition).Type
                            $policySetCategory = ($policyAssignmentsPolicySetDefinition).Category

                            if (($policyAssignmentsPolicySetDefinition).Type -ne $policySetDefinitionType) {
                                Write-Host "$scopeDisplayName ($scopeId) $policyVariant was processing: $policySetDefinitionId"
                                Write-Host "'$(($policyAssignmentsPolicySetDefinition).Type)' ne '$policySetDefinitionType'"
                                Write-Host "!Please report this error: $($azAPICallConf['htParameters'].GithubRepository)" -ForegroundColor Yellow
                                throw
                            }

                            if ($policySetDefinitionType -eq 'Custom') {
                                $policySetDefintionScope = ($policyAssignmentsPolicySetDefinition).Scope
                                $policySetDefintionScopeMgSub = ($policyAssignmentsPolicySetDefinition).ScopeMgSub
                                $policySetDefintionScopeId = ($policyAssignmentsPolicySetDefinition).ScopeId
                            }
                            if ($policySetDefinitionType -eq 'Builtin') {
                                $policySetDefintionScope = 'n/a'
                                $policySetDefintionScopeMgSub = 'n/a'
                                $policySetDefintionScopeId = 'n/a'
                            }
                        }
                        else {
                            #Write-Host "TryHandler - $scopeDisplayName ($scopeId) $policyVariant was processing: policySetId:'$policySetDefinitionId'; policyAss:'$($L1mgmtGroupSubPolicyAssignment.Id)'; type:'$(($policyAssignmentsPolicySetDefinition).Type)' - sleeping '$tryCounter' seconds"
                            start-sleep -seconds 1
                        }
                    }
                    until($policySetReturnedFromHt -or $tryCounter -gt 5)
                    if (-not $policySetReturnedFromHt) {
                        Write-Host "FinalHandler - $scopeDisplayName ($scopeId) $policyVariant was processing: policySetId:'$policySetDefinitionId'; policyAss:'$($L1mgmtGroupSubPolicyAssignment.Id)'"
                        Write-Host "!Please report this error: $($azAPICallConf['htParameters'].GithubRepository)" -ForegroundColor Yellow
                        throw
                    }
                }
                #policySetDefinition not exists!
                else {
                    $policyAvailability = 'na'
                    $policySetDisplayName = 'unknown'
                    $policySetDescription = 'unknown'
                    $policySetDefinitionType = 'likely Custom'
                    $policySetCategory = 'unknown'

                    if ($policySetDefinitionId -like '/providers/microsoft.management/managementgroups/*') {
                        $hlpPolicySetDefinitionScope = $policySetDefinitionSplitted[4]
                        $policySetDefintionScope = "/$($policySetDefinitionSplitted[1])/$($policySetDefinitionSplitted[2])/$($policySetDefinitionSplitted[3])/$($hlpPolicySetDefinitionScope)"
                        $policySetDefintionScopeMgSub = 'Mg'
                        $policySetDefintionScopeId = $hlpPolicySetDefinitionScope
                    }
                    else {
                        $hlpPolicySetDefinitionScope = $policySetDefinitionSplitted[2]
                        $policySetDefintionScope = "/$($policySetDefinitionSplitted[1])/$($hlpPolicySetDefinitionScope)"
                        $policySetDefintionScopeMgSub = 'Sub'
                        $policySetDefintionScopeId = $hlpPolicySetDefinitionScope

                    }
                    Write-Host "   $scopeDisplayName ($scopeId); policyAssignment '$($L1mgmtGroupSubPolicyAssignment.Id)' policyDefinition (PolicySet) could not be found: '$($policySetDefinitionId)'"
                }

                $PolicyAssignmentScope = $L1mgmtGroupSubPolicyAssignment.Properties.Scope
                if ($PolicyAssignmentScope -like '/providers/Microsoft.Management/managementGroups/*') {
                    $PolicyAssignmentScopeMgSubRg = 'Mg'
                }
                else {
                    $splitPolicyAssignmentScope = ($PolicyAssignmentScope).Split('/')
                    switch (($splitPolicyAssignmentScope).Count - 1) {
                        #sub
                        2 {
                            $PolicyAssignmentScopeMgSubRg = 'Sub'
                        }
                        4 {
                            $PolicyAssignmentScopeMgSubRg = 'Rg'
                        }
                        Default {
                            $PolicyAssignmentScopeMgSubRg = 'unknown'
                        }
                    }
                }

                $PolicyAssignmentId = ($L1mgmtGroupSubPolicyAssignment.Id).ToLower()
                $PolicyAssignmentName = $L1mgmtGroupSubPolicyAssignment.Name
                $PolicyAssignmentDisplayName = $L1mgmtGroupSubPolicyAssignment.Properties.DisplayName
                if (($L1mgmtGroupSubPolicyAssignment.Properties.Description).length -eq 0) {
                    $PolicyAssignmentDescription = 'no description given'
                }
                else {
                    $PolicyAssignmentDescription = $L1mgmtGroupSubPolicyAssignment.Properties.Description
                }

                if ($L1mgmtGroupSubPolicyAssignment.identity) {
                    $PolicyAssignmentIdentity = $L1mgmtGroupSubPolicyAssignment.identity.principalId
                }
                else {
                    $PolicyAssignmentIdentity = 'n/a'
                }

                $assignedBy = 'n/a'
                $createdBy = ''
                $createdOn = ''
                $updatedBy = ''
                $updatedOn = ''
                if ($L1mgmtGroupSubPolicyAssignment.properties.metadata) {
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.assignedBy) {
                        $assignedBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.assignedBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.createdBy) {
                        $createdBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.createdBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.createdOn) {
                        $createdOn = $L1mgmtGroupSubPolicyAssignment.properties.metadata.createdOn
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedBy) {
                        $updatedBy = $L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedBy
                    }
                    if ($L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedOn) {
                        $updatedOn = $L1mgmtGroupSubPolicyAssignment.properties.metadata.updatedOn
                    }
                }

                if (($L1mgmtGroupSubPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message) {
                    $nonComplianceMessage = ($L1mgmtGroupSubPolicyAssignment.Properties.nonComplianceMessages.where( { -not $_.policyDefinitionReferenceId })).Message
                }
                else {
                    $nonComplianceMessage = ''
                }

                $formatedPolicyAssignmentParameters = ''
                $hlp = $L1mgmtGroupSubPolicyAssignment.Properties.Parameters
                if (-not [string]::IsNullOrEmpty($hlp)) {
                    $arrayPolicyAssignmentParameters = @()
                    $arrayPolicyAssignmentParameters = foreach ($parameterName in $hlp.PSObject.Properties.Name | Sort-Object) {
                        "$($parameterName)=$($hlp.($parameterName).Value -join "$($CsvDelimiter) ")"
                    }
                    $formatedPolicyAssignmentParameters = $arrayPolicyAssignmentParameters -join "$($CsvDelimiterOpposite) "
                }

                $addRowToTableDone = $true
                addRowToTable `
                    -level $hierarchyLevel `
                    -mgName $childMgDisplayName `
                    -mgId $childMgId `
                    -mgParentId $childMgParentId `
                    -mgParentName $childMgParentName `
                    -mgASCSecureScore $mgAscSecureScoreResult `
                    -Subscription $scopeDisplayName `
                    -SubscriptionId $scopeId `
                    -SubscriptionQuotaId $subscriptionQuotaId `
                    -SubscriptionState $subscriptionState `
                    -SubscriptionASCSecureScore $subscriptionASCSecureScore `
                    -SubscriptionTags $subscriptionTags `
                    -SubscriptionTagsCount $subscriptionTagsCount `
                    -Policy $policySetDisplayName `
                    -PolicyAvailability $policyAvailability `
                    -PolicyDescription $policySetDescription `
                    -PolicyVariant $policyVariant `
                    -PolicyType $policySetDefinitionType `
                    -PolicyCategory $policySetCategory `
                    -PolicyDefinitionIdGuid (($policySetDefinitionId) -replace '.*/') `
                    -PolicyDefinitionId $policySetDefinitionId `
                    -PolicyDefintionScope $policySetDefintionScope `
                    -PolicyDefintionScopeMgSub $policySetDefintionScopeMgSub `
                    -PolicyDefintionScopeId $policySetDefintionScopeId `
                    -PolicyDefinitionsScopedLimit $LimitPOLICYPolicyDefinitionsScopedSubscription `
                    -PolicyDefinitionsScopedCount $PolicyDefinitionsScopedCount `
                    -PolicySetDefinitionsScopedLimit $LimitPOLICYPolicySetDefinitionsScopedSubscription `
                    -PolicySetDefinitionsScopedCount $PolicySetDefinitionsScopedCount `
                    -PolicyAssignmentScope $PolicyAssignmentScope `
                    -PolicyAssignmentScopeMgSubRg $PolicyAssignmentScopeMgSubRg `
                    -PolicyAssignmentScopeName ($PolicyAssignmentScope -replace '.*/', '') `
                    -PolicyAssignmentNotScopes $L1mgmtGroupSubPolicyAssignment.Properties.NotScopes `
                    -PolicyAssignmentId $PolicyAssignmentId `
                    -PolicyAssignmentName $PolicyAssignmentName `
                    -PolicyAssignmentDisplayName $PolicyAssignmentDisplayName `
                    -PolicyAssignmentDescription $PolicyAssignmentDescription `
                    -PolicyAssignmentEnforcementMode $L1mgmtGroupSubPolicyAssignment.Properties.EnforcementMode `
                    -PolicyAssignmentNonComplianceMessages $nonComplianceMessage `
                    -PolicyAssignmentIdentity $PolicyAssignmentIdentity `
                    -PolicyAssignmentLimit $LimitPOLICYPolicyAssignmentsSubscription `
                    -PolicyAssignmentCount $L1mgmtGroupSubPolicyAssignmentsPolicyCount `
                    -PolicyAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicyAtScopeCount `
                    -PolicyAssignmentParameters $L1mgmtGroupSubPolicyAssignment.Properties.Parameters `
                    -PolicyAssignmentParametersFormated $formatedPolicyAssignmentParameters `
                    -PolicyAssignmentAssignedBy $assignedBy `
                    -PolicyAssignmentCreatedBy $createdBy `
                    -PolicyAssignmentCreatedOn $createdOn `
                    -PolicyAssignmentUpdatedBy $updatedBy `
                    -PolicyAssignmentUpdatedOn $updatedOn `
                    -PolicySetAssignmentLimit $LimitPOLICYPolicySetAssignmentsSubscription `
                    -PolicySetAssignmentCount $L1mgmtGroupSubPolicyAssignmentsPolicySetCount `
                    -PolicySetAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicySetAtScopeCount `
                    -PolicyAndPolicySetAssignmentAtScopeCount $L1mgmtGroupSubPolicyAssignmentsPolicyAndPolicySetAtScopeCount
            }
        }
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionPolicyAssignmentsSub = $function:dataCollectionPolicyAssignmentsSub.ToString()

function dataCollectionRoleDefinitions {
    [CmdletBinding()]Param(
        [string]$TargetMgOrSub,
        [string]$scopeId,
        [string]$scopeDisplayName,
        $subscriptionQuotaId
    )

    if ($TargetMgOrSub -eq 'Sub') {
        $currentTask = "Getting Custom Role definitions for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/roleDefinitions?api-version=2015-07-01&`$filter=type eq 'CustomRole'"
    }
    if ($TargetMgOrSub -eq 'MG') {
        $currentTask = "Getting Custom Role definitions for Management Group: '$($scopeDisplayName)' ('$scopeId')"
        $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.Authorization/roleDefinitions?api-version=2015-07-01&`$filter=type eq 'CustomRole'"
    }
    $method = 'GET'
    $scopeCustomRoleDefinitions = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    foreach ($scopeCustomRoleDefinition in $scopeCustomRoleDefinitions) {
        if (-not $($htCacheDefinitionsRole).($scopeCustomRoleDefinition.name)) {

            if (
                (
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains 'Microsoft.Authorization/roleassignments/write' -or
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains 'Microsoft.Authorization/roleassignments/*' -or
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains 'Microsoft.Authorization/*/write' -or
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains 'Microsoft.Authorization/*' -or
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains '*/write' -or
                    $scopeCustomRoleDefinition.properties.permissions.Actions -contains '*'
                ) -and (
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains 'Microsoft.Authorization/roleassignments/write' -and
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains 'Microsoft.Authorization/roleassignments/*' -and
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains 'Microsoft.Authorization/*/write' -and
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains 'Microsoft.Authorization/*' -and
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains '*/write' -and
                    $scopeCustomRoleDefinition.properties.permissions.NotActions -notcontains '*'
                )
            ) {
                $roleCapable4RoleAssignmentsWrite = $true
            }
            else {
                $roleCapable4RoleAssignmentsWrite = $false
            }

            $htTemp = @{}
            $htTemp.Id = $($scopeCustomRoleDefinition.name)
            $htTemp.Name = $($scopeCustomRoleDefinition.properties.roleName)
            $htTemp.IsCustom = $true
            $htTemp.AssignableScopes = $($scopeCustomRoleDefinition.properties.AssignableScopes)
            $htTemp.Actions = $($scopeCustomRoleDefinition.properties.permissions.Actions)
            $htTemp.NotActions = $($scopeCustomRoleDefinition.properties.permissions.NotActions)
            $htTemp.DataActions = $($scopeCustomRoleDefinition.properties.permissions.DataActions)
            $htTemp.NotDataActions = $($scopeCustomRoleDefinition.properties.permissions.NotDataActions)
            $htTemp.Json = $scopeCustomRoleDefinition
            $htTemp.RoleCanDoRoleAssignments = $roleCapable4RoleAssignmentsWrite
            ($script:htCacheDefinitionsRole).($scopeCustomRoleDefinition.name) = $htTemp

            #namingValidation
            if (-not [string]::IsNullOrEmpty($scopeCustomRoleDefinition.properties.roleName)) {
                $namingValidationResult = NamingValidation -toCheck $scopeCustomRoleDefinition.properties.roleName
                if ($namingValidationResult.Count -gt 0) {
                    $script:htNamingValidation.Role.($scopeCustomRoleDefinition.name) = @{}
                    $script:htNamingValidation.Role.($scopeCustomRoleDefinition.name).roleNameInvalidChars = ($namingValidationResult -join '')
                    $script:htNamingValidation.Role.($scopeCustomRoleDefinition.name).roleName = $scopeCustomRoleDefinition.properties.roleName
                }
            }
        }
    }
}
$funcDataCollectionRoleDefinitions = $function:dataCollectionRoleDefinitions.ToString()

function dataCollectionRoleAssignmentsMG {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $mgParentId,
        $mgParentName,
        $mgAscSecureScoreResult
    )

    $addRowToTableDone = $false
    #PIM MGRoleAssignmentScheduleInstances
    $currentTask = "Getting ARM RoleAssignment ScheduleInstances for Management Group: '$($scopeDisplayName)' ('$($scopeId)')"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.Authorization/roleAssignmentScheduleInstances?api-version=2020-10-01"
    $method = 'GET'
    $roleAssignmentScheduleInstancesFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    if ($roleAssignmentScheduleInstancesFromAPI -eq 'ResourceNotOnboarded' -or $roleAssignmentScheduleInstancesFromAPI -eq 'TenantNotOnboarded' -or $roleAssignmentScheduleInstancesFromAPI -eq 'InvalidResourceType' -or $roleAssignmentScheduleInstancesFromAPI -eq 'RoleAssignmentScheduleInstancesError') {
        #Write-Host "Scope '$($scopeDisplayName)' ('$scopeId') not onboarded in PIM"
    }
    else {
        $roleAssignmentScheduleInstances = ($roleAssignmentScheduleInstancesFromAPI.where( { ($_.properties.roleAssignmentScheduleId -replace '.*/') -ne ($_.properties.originRoleAssignmentId -replace '.*/') }))
        $roleAssignmentScheduleInstancesCount = $roleAssignmentScheduleInstances.Count
        if ($roleAssignmentScheduleInstancesCount -gt 0) {
            $htRoleAssignmentsPIM = @{}
            foreach ($roleAssignmentScheduleInstance in $roleAssignmentScheduleInstances) {
                $htRoleAssignmentsPIM.($roleAssignmentScheduleInstance.properties.originRoleAssignmentId.tolower()) = $roleAssignmentScheduleInstance.properties
            }
        }
    }

    #RoleAssignment API MG
    $currentTask = "Getting Role assignments API for Management Group: '$($scopeDisplayName)' ('$($scopeId)')"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/providers/Microsoft.Management/managementGroups/$($scopeId)/providers/Microsoft.Authorization/roleAssignments?api-version=2015-07-01"
    $method = 'GET'
    $roleAssignmentsFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    if ($roleAssignmentsFromAPI.Count -gt 0) {
        $principalsToResolve = @()
        $principalsToResolve = foreach ($ra in $roleAssignmentsFromAPI.properties | Sort-Object -Property principalId -Unique) {
            if (-not $htPrincipals.($ra.principalId)) {
                $ra.principalId
            }
        }

        if ($principalsToResolve.Count -gt 0) {
            ResolveObjectIds -objectIds $principalsToResolve
        }
    }

    $L0mgmtGroupRoleAssignments = $roleAssignmentsFromAPI

    $L0mgmtGroupRoleAssignmentsLimitUtilization = (($L0mgmtGroupRoleAssignments.properties.where( { $_.scope -eq "/providers/Microsoft.Management/managementGroups/$($scopeId)" } ))).count
    if (-not $htMgAtScopeRoleAssignments.($scopeId)) {
        $script:htMgAtScopeRoleAssignments.($scopeId) = @{}
        $script:htMgAtScopeRoleAssignments.($scopeId).AssignmentsCount = $L0mgmtGroupRoleAssignmentsLimitUtilization
    }

    if ($azAPICallConf['htParameters'].LargeTenant -eq $true -or $azAPICallConf['htParameters'].RBACAtScopeOnly -eq $true) {
        $L0mgmtGroupRoleAssignments = $L0mgmtGroupRoleAssignments.where( { $_.properties.scope -eq "/providers/Microsoft.Management/managementGroups/$($scopeId)" } )
    }
    else {
        #tenantLevelRoleAssignments
        if (-not $htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments') {
            $tenantLevelRoleAssignmentsCount = (($L0mgmtGroupRoleAssignments.where( { $_.id -like '/providers/Microsoft.Authorization/roleAssignments/*' } ))).count
            $script:htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments' = @{}
            $script:htMgAtScopeRoleAssignments.'tenantLevelRoleAssignments'.AssignmentsCount = $tenantLevelRoleAssignmentsCount
        }
    }
    foreach ($L0mgmtGroupRoleAssignment in $L0mgmtGroupRoleAssignments) {
        $roleAssignmentId = ($L0mgmtGroupRoleAssignment.id).ToLower()

        if ($htRoleAssignmentsPIM.($roleAssignmentId)) {
            $hlperPim = $htRoleAssignmentsPIM.($roleAssignmentId)
            $pim = 'true'
            $pimAssignmentType = $hlperPim.assignmentType
            $pimSlotStart = $($hlperPim.startDateTime)
            if ($hlperPim.endDateTime) {
                $pimSlotEnd = $($hlperPim.endDateTime)
            }
            else {
                $pimSlotEnd = 'eternity'
            }
        }
        else {
            $pim = 'false'
            $pimAssignmentType = ''
            $pimSlotStart = ''
            $pimSlotEnd = ''
        }

        if (-not $htRoleAssignmentsFromAPIInheritancePrevention.($roleAssignmentId -replace '.*/')) {
            $script:htRoleAssignmentsFromAPIInheritancePrevention.($roleAssignmentId -replace '.*/') = @{}
            $script:htRoleAssignmentsFromAPIInheritancePrevention.($roleAssignmentId -replace '.*/').assignment = $L0mgmtGroupRoleAssignment
        }

        $roleDefinitionId = $L0mgmtGroupRoleAssignment.properties.roleDefinitionId
        $roleDefinitionIdGuid = $roleDefinitionId -replace '.*/'

        if (-not ($htCacheDefinitionsRole).($roleDefinitionIdGuid)) {
            $roleAssignmentsRoleDefinition = ''
            $roleDefinitionName = "'This roleDefinition likely was deleted although a roleAssignment existed'"
        }
        else {
            $roleAssignmentsRoleDefinition = ($htCacheDefinitionsRole).($roleDefinitionIdGuid)
            $roleDefinitionName = $roleAssignmentsRoleDefinition.Name
        }

        $doIt = $false
        if ($L0mgmtGroupRoleAssignment.properties.scope -eq "/providers/Microsoft.Management/managementGroups/$($scopeId)" -and $L0mgmtGroupRoleAssignment.properties.scope -ne "/providers/Microsoft.Management/managementGroups/$($ManagementGroupId)") {
            $doIt = $true
        }
        if ($scopeId -eq $ManagementGroupId) {
            $doIt = $true
        }

        if ($doIt) {
            #assignment
            $splitAssignment = ($roleAssignmentId).Split('/')
            $arrayRoleAssignment = [System.Collections.ArrayList]@()
            $null = $arrayRoleAssignment.Add([PSCustomObject]@{
                    RoleAssignmentId   = $roleAssignmentId
                    Scope              = $L0mgmtGroupRoleAssignment.properties.scope
                    DisplayName        = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).displayName
                    SignInName         = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).signInName
                    RoleDefinitionName = $roleDefinitionName
                    RoleDefinitionId   = $L0mgmtGroupRoleAssignment.properties.roleDefinitionId -replace '.*/'
                    ObjectId           = $L0mgmtGroupRoleAssignment.properties.principalId
                    ObjectType         = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).type
                    PIM                = $pim
                })

            $htTemp = @{}
            $htTemp.Assignment = $arrayRoleAssignment

            if ($roleAssignmentId -like '/providers/Microsoft.Authorization/roleAssignments/*') {
                $htTemp.AssignmentScopeTenMgSubRgRes = 'Tenant'
                $htTemp.AssignmentScopeId = 'Tenant'
            }
            else {
                $htTemp.AssignmentScopeTenMgSubRgRes = 'Mg'
                $htTemp.AssignmentScopeId = [string]$splitAssignment[4]
            }
            ($script:htCacheAssignmentsRole).($roleAssignmentId) = $htTemp
        }

        if (($htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).displayName).length -eq 0) {
            $roleAssignmentIdentityDisplayname = 'n/a'
        }
        else {
            if ($htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).type -eq 'User') {
                if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                    $roleAssignmentIdentityDisplayname = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).displayName
                }
                else {
                    $roleAssignmentIdentityDisplayname = 'scrubbed'
                }
            }
            else {
                $roleAssignmentIdentityDisplayname = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).displayName
            }
        }
        if (-not $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).signInName) {
            $roleAssignmentIdentitySignInName = 'n/a'
        }
        else {
            if ($htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).type -eq 'User') {
                if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                    $roleAssignmentIdentitySignInName = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).signInName
                }
                else {
                    $roleAssignmentIdentitySignInName = 'scrubbed'
                }
            }
            else {
                $roleAssignmentIdentitySignInName = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).signInName
            }
        }
        $roleAssignmentIdentityObjectId = $L0mgmtGroupRoleAssignment.properties.principalId
        $roleAssignmentIdentityObjectType = $htPrincipals.($L0mgmtGroupRoleAssignment.properties.principalId).type
        $roleAssignmentScope = $L0mgmtGroupRoleAssignment.properties.scope
        $roleAssignmentScopeName = $roleAssignmentScope -replace '.*/'
        $roleAssignmentScopeType = 'MG'

        $roleSecurityCustomRoleOwner = 0
        if ($roleAssignmentsRoleDefinition.Actions -eq '*' -and (($roleAssignmentsRoleDefinition.NotActions)).length -eq 0 -and $roleAssignmentsRoleDefinition.IsCustom -eq $True) {
            $roleSecurityCustomRoleOwner = 1
        }
        $roleSecurityOwnerAssignmentSP = 0
        if (($roleAssignmentsRoleDefinition.Id -eq '8e3af657-a8ff-443c-a75c-2fe8c4bcb635' -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal') -or ($roleAssignmentsRoleDefinition.Actions -eq '*' -and (($roleAssignmentsRoleDefinition.NotActions)).length -eq 0 -and $roleAssignmentsRoleDefinition.IsCustom -eq $True -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal')) {
            $roleSecurityOwnerAssignmentSP = 1
        }

        $createdBy = ''
        $createdOn = ''
        $createdOnUnformatted = $null
        $updatedBy = ''
        $updatedOn = ''

        if ($L0mgmtGroupRoleAssignment.properties.createdBy) {
            $createdBy = $L0mgmtGroupRoleAssignment.properties.createdBy
        }
        if ($L0mgmtGroupRoleAssignment.properties.createdOn) {
            $createdOn = $L0mgmtGroupRoleAssignment.properties.createdOn
        }
        if ($L0mgmtGroupRoleAssignment.properties.updatedBy) {
            $updatedBy = $L0mgmtGroupRoleAssignment.properties.updatedBy
        }
        if ($L0mgmtGroupRoleAssignment.properties.updatedOn) {
            $updatedOn = $L0mgmtGroupRoleAssignment.properties.updatedOn
        }
        $createdOnUnformatted = $L0mgmtGroupRoleAssignment.properties.createdOn

        $addRowToTableDone = $true
        addRowToTable `
            -level $hierarchyLevel `
            -mgName $scopeDisplayName `
            -mgId $scopeId `
            -mgParentId $mgParentId `
            -mgParentName $mgParentName `
            -mgASCSecureScore $mgAscSecureScoreResult `
            -RoleDefinitionId $roleDefinitionIdGuid `
            -RoleDefinitionName $roleDefinitionName `
            -RoleIsCustom $roleAssignmentsRoleDefinition.IsCustom `
            -RoleAssignableScopes ($roleAssignmentsRoleDefinition.AssignableScopes -join "$CsvDelimiterOpposite ") `
            -RoleActions ($roleAssignmentsRoleDefinition.Actions -join "$CsvDelimiterOpposite ") `
            -RoleNotActions ($roleAssignmentsRoleDefinition.NotActions -join "$CsvDelimiterOpposite ") `
            -RoleDataActions ($roleAssignmentsRoleDefinition.DataActions -join "$CsvDelimiterOpposite ") `
            -RoleNotDataActions ($roleAssignmentsRoleDefinition.NotDataActions -join "$CsvDelimiterOpposite ") `
            -RoleCanDoRoleAssignments $roleAssignmentsRoleDefinition.RoleCanDoRoleAssignments `
            -RoleAssignmentIdentityDisplayname $roleAssignmentIdentityDisplayname `
            -RoleAssignmentIdentitySignInName $roleAssignmentIdentitySignInName `
            -RoleAssignmentIdentityObjectId $roleAssignmentIdentityObjectId `
            -RoleAssignmentIdentityObjectType $roleAssignmentIdentityObjectType `
            -RoleAssignmentId $roleAssignmentId `
            -RoleAssignmentScope $roleAssignmentScope `
            -RoleAssignmentScopeName $roleAssignmentScopeName `
            -RoleAssignmentScopeType $roleAssignmentScopeType `
            -RoleAssignmentCreatedBy $createdBy `
            -RoleAssignmentCreatedOn $createdOn `
            -RoleAssignmentCreatedOnUnformatted $createdOnUnformatted `
            -RoleAssignmentUpdatedBy $updatedBy `
            -RoleAssignmentUpdatedOn $updatedOn `
            -RoleAssignmentsLimit $LimitRBACRoleAssignmentsManagementGroup `
            -RoleAssignmentsCount $L0mgmtGroupRoleAssignmentsLimitUtilization `
            -RoleSecurityCustomRoleOwner $roleSecurityCustomRoleOwner `
            -RoleSecurityOwnerAssignmentSP $roleSecurityOwnerAssignmentSP `
            -RoleAssignmentPIM $pim `
            -RoleAssignmentPIMAssignmentType $pimAssignmentType `
            -RoleAssignmentPIMSlotStart $pimSlotStart `
            -RoleAssignmentPIMSlotEnd $pimSlotEnd
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionRoleAssignmentsMG = $function:dataCollectionRoleAssignmentsMG.ToString()

function dataCollectionRoleAssignmentsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        $hierarchyLevel,
        $childMgDisplayName,
        $childMgId,
        $childMgParentId,
        $childMgParentName,
        $mgAscSecureScoreResult,
        $subscriptionQuotaId,
        $subscriptionState,
        $subscriptionASCSecureScore,
        $subscriptionTags,
        $subscriptionTagsCount
    )

    $addRowToTableDone = $false
    #Usage
    $currentTask = "Getting Role assignments usage metrics for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/roleAssignmentsUsageMetrics?api-version=2019-08-01-preview"
    $method = 'GET'
    $roleAssignmentsUsage = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -listenOn 'Content' -caller 'CustomDataCollection'

    $script:htSubscriptionsRoleAssignmentLimit.($scopeId) = $roleAssignmentsUsage.roleAssignmentsLimit

    #PIM SubscriptionRoleAssignmentScheduleInstances
    $currentTask = "Getting ARM RoleAssignment ScheduleInstances for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/roleAssignmentScheduleInstances?api-version=2020-10-01"
    $method = 'GET'
    $roleAssignmentScheduleInstancesFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    if ($roleAssignmentScheduleInstancesFromAPI -eq 'ResourceNotOnboarded' -or $roleAssignmentScheduleInstancesFromAPI -eq 'TenantNotOnboarded' -or $roleAssignmentScheduleInstancesFromAPI -eq 'InvalidResourceType' -or $roleAssignmentScheduleInstancesFromAPI -eq 'RoleAssignmentScheduleInstancesError') {
        #Write-Host "Scope '$($scopeDisplayName)' ('$scopeId') not onboarded in PIM"
    }
    else {
        $roleAssignmentScheduleInstances = ($roleAssignmentScheduleInstancesFromAPI.where( { ($_.properties.roleAssignmentScheduleId -replace '.*/') -ne ($_.properties.originRoleAssignmentId -replace '.*/') }))
        $roleAssignmentScheduleInstancesCount = $roleAssignmentScheduleInstances.Count
        if ($roleAssignmentScheduleInstancesCount -gt 0) {
            $htRoleAssignmentsPIM = @{}
            foreach ($roleAssignmentScheduleInstance in $roleAssignmentScheduleInstances) {
                $htRoleAssignmentsPIM.($roleAssignmentScheduleInstance.properties.originRoleAssignmentId.tolower()) = $roleAssignmentScheduleInstance.properties
            }
        }
    }

    #RoleAssignment API Sub
    $currentTask = "Getting Role assignments API for Subscription: '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
    $uri = "$($azAPICallConf['azAPIEndpointUrls'].ARM)/subscriptions/$($scopeId)/providers/Microsoft.Authorization/roleAssignments?api-version=2015-07-01"
    $method = 'GET'
    $roleAssignmentsFromAPI = AzAPICall -AzAPICallConfiguration $azAPICallConf -uri $uri -method $method -currentTask $currentTask -caller 'CustomDataCollection'

    $baseRoleAssignments = [System.Collections.ArrayList]@()
    if ($roleAssignmentsFromAPI.Count -gt 0) {
        foreach ($roleAssignmentFromAPI in $roleAssignmentsFromAPI) {

            if ($roleAssignmentFromAPI.id -match "/subscriptions/$($scopeId)/") {
                if (-not $htRoleAssignmentsFromAPIInheritancePrevention.($roleAssignmentFromAPI.id -replace '.*/')) {
                    $null = $baseRoleAssignments.Add($roleAssignmentFromAPI)
                }
                else {
                    $null = $baseRoleAssignments.Add($htRoleAssignmentsFromAPIInheritancePrevention.($roleAssignmentFromAPI.id -replace '.*/').assignment)
                }
            }
            else {
                $null = $baseRoleAssignments.Add($roleAssignmentFromAPI)
            }
        }
    }

    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC -eq $true) {
        $relevantRAs = $baseRoleAssignments.where( { $_.id -notmatch "/subscriptions/$($scopeId)/resourcegroups/" } )
    }
    else {
        $relevantRAs = $baseRoleAssignments
    }
    if ($relevantRAs.Count -gt 0) {
        $principalsToResolve = @()
        $principalsToResolve = foreach ($ra in $relevantRAs.properties | Sort-Object -Property principalId -Unique) {
            if (-not $htPrincipals.($ra.principalId)) {
                $ra.principalId
            }
        }

        if ($principalsToResolve.Count -gt 0) {
            ResolveObjectIds -objectIds $principalsToResolve
        }
    }


    $L1mgmtGroupSubRoleAssignments = $baseRoleAssignments

    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC -eq $true) {
        foreach ($L1mgmtGroupSubRoleAssignmentOnRg in $L1mgmtGroupSubRoleAssignments.where( { $_.id -match "/subscriptions/$($scopeId)/resourcegroups/" } )) {
            if (-not ($htCacheAssignmentsRBACOnResourceGroupsAndResources).($L1mgmtGroupSubRoleAssignmentOnRg.id)) {

                $roleDefinitionId = $L1mgmtGroupSubRoleAssignmentOnRg.properties.roleDefinitionId
                $roleDefinitionIdGuid = $roleDefinitionId -replace '.*/'

                if (-not ($htCacheDefinitionsRole).($roleDefinitionIdGuid)) {
                    $roleAssignmentsRoleDefinition = ''
                    $roleDefinitionName = "'This roleDefinition likely was deleted although a roleAssignment existed'"
                }
                else {
                    $roleAssignmentsRoleDefinition = ($htCacheDefinitionsRole).($roleDefinitionIdGuid)
                    $roleDefinitionName = $roleAssignmentsRoleDefinition.Name
                }

                #assignment
                $arrayRoleAssignment = [System.Collections.ArrayList]@()
                $null = $arrayRoleAssignment.Add([PSCustomObject]@{
                        RoleAssignmentId   = $L1mgmtGroupSubRoleAssignmentOnRg.id
                        Scope              = $L1mgmtGroupSubRoleAssignmentOnRg.properties.scope
                        RoleDefinitionName = $roleDefinitionName
                        RoleDefinitionId   = $L1mgmtGroupSubRoleAssignmentOnRg.properties.roleDefinitionId -replace '.*/'
                        ObjectId           = $L1mgmtGroupSubRoleAssignmentOnRg.properties.principalId
                    })

                ($script:htCacheAssignmentsRBACOnResourceGroupsAndResources).($L1mgmtGroupSubRoleAssignmentOnRg.id) = $arrayRoleAssignment
            }
        }
    }

    if ($azAPICallConf['htParameters'].LargeTenant -eq $true -or $azAPICallConf['htParameters'].RBACAtScopeOnly -eq $true) {
        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC -eq $false) {
            $assignmentsScope = $L1mgmtGroupSubRoleAssignments
        }
        else {
            $assignmentsScope = $L1mgmtGroupSubRoleAssignments.where( { $_.properties.Scope -eq "/subscriptions/$($scopeId)" } )
        }
    }
    else {
        if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC -eq $false) {
            $assignmentsScope = $L1mgmtGroupSubRoleAssignments
        }
        else {
            $assignmentsScope = $L1mgmtGroupSubRoleAssignments.where( { $_.id -notmatch "/subscriptions/$($scopeId)/resourcegroups/" } )
        }
    }

    foreach ($L1mgmtGroupSubRoleAssignment in $assignmentsScope) {

        $roleAssignmentId = ($L1mgmtGroupSubRoleAssignment.id).ToLower()
        $roleDefinitionId = $L1mgmtGroupSubRoleAssignment.properties.roleDefinitionId
        $roleDefinitionIdGuid = $roleDefinitionId -replace '.*/'

        if (-not ($htCacheDefinitionsRole).($roleDefinitionIdGuid)) {
            $roleAssignmentsRoleDefinition = ''
            $roleDefinitionName = "'This roleDefinition likely was deleted although a roleAssignment existed'"
        }
        else {
            $roleAssignmentsRoleDefinition = ($htCacheDefinitionsRole).($roleDefinitionIdGuid)
            $roleDefinitionName = $roleAssignmentsRoleDefinition.Name
        }

        $roleAssignmentIdentityObjectId = $L1mgmtGroupSubRoleAssignment.properties.principalId
        $roleAssignmentIdentityObjectType = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).type
        $roleAssignmentScope = $L1mgmtGroupSubRoleAssignment.properties.scope
        $roleAssignmentScopeName = $roleAssignmentScope -replace '.*/'

        if ($roleAssignmentScope -like '/subscriptions/*' -and $roleAssignmentScope -notlike '/subscriptions/*/resourcegroups/*') {
            $roleAssignmentScopeType = 'Sub'
            $roleAssignmentScopeRG = ''
            $roleAssignmentScopeRes = ''
        }
        if ($roleAssignmentScope -like '/subscriptions/*/resourcegroups/*' -and $roleAssignmentScope -notlike '/subscriptions/*/resourcegroups/*/providers*') {
            $roleAssignmentScopeType = 'RG'
            $roleAssignmentScopeSplit = $roleAssignmentScope.Split('/')
            $roleAssignmentScopeRG = $roleAssignmentScopeSplit[4]
            $roleAssignmentScopeRes = ''
        }
        if ($roleAssignmentScope -like '/subscriptions/*/resourcegroups/*/providers*') {
            $roleAssignmentScopeType = 'Res'
            $roleAssignmentScopeSplit = $roleAssignmentScope.Split('/')
            $roleAssignmentScopeRG = $roleAssignmentScopeSplit[4]
            $roleAssignmentScopeRes = $roleAssignmentScopeSplit[8]
        }

        if ($htRoleAssignmentsPIM.($roleAssignmentId)) {
            $hlperPim = $htRoleAssignmentsPIM.($roleAssignmentId)
            $pim = 'true'
            $pimAssignmentType = $hlperPim.assignmentType
            $pimSlotStart = $($hlperPim.startDateTime)
            if ($hlperPim.endDateTime) {
                $pimSlotEnd = $($hlperPim.endDateTime)
            }
            else {
                $pimSlotEnd = 'eternity'
            }
        }
        else {
            $pim = 'false'
            $pimAssignmentType = ''
            $pimSlotStart = ''
            $pimSlotEnd = ''
        }

        if ($roleAssignmentId -like "/subscriptions/$($scopeId)/*") {

            #assignment
            $splitAssignment = ($roleAssignmentId).Split('/')
            $arrayRoleAssignment = [System.Collections.ArrayList]@()
            $null = $arrayRoleAssignment.Add([PSCustomObject]@{
                    RoleAssignmentId   = $roleAssignmentId
                    Scope              = $L1mgmtGroupSubRoleAssignment.properties.scope
                    DisplayName        = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).displayName
                    SignInName         = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).signInName
                    RoleDefinitionName = $roleDefinitionName
                    RoleDefinitionId   = $L1mgmtGroupSubRoleAssignment.properties.roleDefinitionId -replace '.*/'
                    ObjectId           = $L1mgmtGroupSubRoleAssignment.properties.principalId
                    ObjectType         = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).type
                    PIM                = $pim
                })

            $htTemp = @{}
            $htTemp.Assignment = $arrayRoleAssignment

            $htTemp.AssignmentScopeTenMgSubRgRes = $roleAssignmentScopeType
            if ($roleAssignmentScopeType -eq 'Sub') {
                $htTemp.AssignmentScopeId = [string]$splitAssignment[2]
            }
            if ($roleAssignmentScopeType -eq 'RG') {
                $htTemp.AssignmentScopeId = "$($splitAssignment[2])/$($splitAssignment[4])"
            }
            if ($roleAssignmentScopeType -eq 'Res') {
                $htTemp.AssignmentScopeId = "$($splitAssignment[2])/$($splitAssignment[4])/$($splitAssignment[8])"
                $htTemp.ResourceType = "$($splitAssignment[6])-$($splitAssignment[7])"
            }
            ($script:htCacheAssignmentsRole).($roleAssignmentId) = $htTemp
        }


        if (($htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).displayName).length -eq 0) {
            $roleAssignmentIdentityDisplayname = 'n/a'
        }
        else {
            if ($htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).type -eq 'User') {
                if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                    $roleAssignmentIdentityDisplayname = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).displayName
                }
                else {
                    $roleAssignmentIdentityDisplayname = 'scrubbed'
                }
            }
            else {
                $roleAssignmentIdentityDisplayname = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).displayName
            }
        }
        if (-not $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).signInName) {
            $roleAssignmentIdentitySignInName = 'n/a'
        }
        else {
            if ($htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).type -eq 'User') {
                if ($azAPICallConf['htParameters'].DoNotShowRoleAssignmentsUserData -eq $false) {
                    $roleAssignmentIdentitySignInName = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).signInName
                }
                else {
                    $roleAssignmentIdentitySignInName = 'scrubbed'
                }
            }
            else {
                $roleAssignmentIdentitySignInName = $htPrincipals.($L1mgmtGroupSubRoleAssignment.properties.principalId).signInName
            }
        }

        $roleSecurityCustomRoleOwner = 0
        if (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Actions -eq '*' -and ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotActions)).length -eq 0 -and ($htCacheDefinitionsRole).$($roleDefinitionIdGuid).IsCustom -eq $True) {
            $roleSecurityCustomRoleOwner = 1
        }
        $roleSecurityOwnerAssignmentSP = 0
        if ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Id -eq '8e3af657-a8ff-443c-a75c-2fe8c4bcb635' -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal') -or (($htCacheDefinitionsRole).$($roleDefinitionIdGuid).Actions -eq '*' -and ((($htCacheDefinitionsRole).$($roleDefinitionIdGuid).NotActions)).length -eq 0 -and ($htCacheDefinitionsRole).$($roleDefinitionIdGuid).IsCustom -eq $True -and $roleAssignmentIdentityObjectType -eq 'ServicePrincipal')) {
            $roleSecurityOwnerAssignmentSP = 1
        }

        $createdBy = ''
        $createdOn = ''
        $createdOnUnformatted = $null
        $updatedBy = ''
        $updatedOn = ''

        if ($L1mgmtGroupSubRoleAssignment.properties.createdBy) {
            $createdBy = $L1mgmtGroupSubRoleAssignment.properties.createdBy
        }
        if ($L1mgmtGroupSubRoleAssignment.properties.createdOn) {
            $createdOn = $L1mgmtGroupSubRoleAssignment.properties.createdOn
        }
        if ($L1mgmtGroupSubRoleAssignment.properties.updatedBy) {
            $updatedBy = $L1mgmtGroupSubRoleAssignment.properties.updatedBy
        }
        if ($L1mgmtGroupSubRoleAssignment.properties.updatedOn) {
            $updatedOn = $L1mgmtGroupSubRoleAssignment.properties.updatedOn
        }
        $createdOnUnformatted = $L1mgmtGroupSubRoleAssignment.properties.createdOn

        $addRowToTableDone = $true
        addRowToTable `
            -level $hierarchyLevel `
            -mgName $childMgDisplayName `
            -mgId $childMgId `
            -mgParentId $childMgParentId `
            -mgParentName $childMgParentName `
            -mgASCSecureScore $mgAscSecureScoreResult `
            -Subscription $scopeDisplayName `
            -SubscriptionId $scopeId `
            -SubscriptionQuotaId $subscriptionQuotaId `
            -SubscriptionState $subscriptionState `
            -SubscriptionASCSecureScore $subscriptionASCSecureScore `
            -SubscriptionTags $subscriptionTags `
            -SubscriptionTagsCount $subscriptionTagsCount `
            -RoleDefinitionId $roleDefinitionIdGuid `
            -RoleDefinitionName $roleDefinitionName `
            -RoleIsCustom $roleAssignmentsRoleDefinition.IsCustom `
            -RoleAssignableScopes ($roleAssignmentsRoleDefinition.AssignableScopes -join "$CsvDelimiterOpposite ") `
            -RoleActions ($roleAssignmentsRoleDefinition.Actions -join "$CsvDelimiterOpposite ") `
            -RoleNotActions ($roleAssignmentsRoleDefinition.NotActions -join "$CsvDelimiterOpposite ") `
            -RoleDataActions ($roleAssignmentsRoleDefinition.DataActions -join "$CsvDelimiterOpposite ") `
            -RoleNotDataActions ($roleAssignmentsRoleDefinition.NotDataActions -join "$CsvDelimiterOpposite ") `
            -RoleCanDoRoleAssignments $roleAssignmentsRoleDefinition.RoleCanDoRoleAssignments `
            -RoleAssignmentIdentityDisplayname $roleAssignmentIdentityDisplayname `
            -RoleAssignmentIdentitySignInName $roleAssignmentIdentitySignInName `
            -RoleAssignmentIdentityObjectId $roleAssignmentIdentityObjectId `
            -RoleAssignmentIdentityObjectType $roleAssignmentIdentityObjectType `
            -RoleAssignmentId $roleAssignmentId `
            -RoleAssignmentScope $roleAssignmentScope `
            -RoleAssignmentScopeName $roleAssignmentScopeName `
            -RoleAssignmentScopeRG $roleAssignmentScopeRG `
            -RoleAssignmentScopeRes $roleAssignmentScopeRes `
            -RoleAssignmentScopeType $roleAssignmentScopeType `
            -RoleAssignmentCreatedBy $createdBy `
            -RoleAssignmentCreatedOn $createdOn `
            -RoleAssignmentCreatedOnUnformatted $createdOnUnformatted `
            -RoleAssignmentUpdatedBy $updatedBy `
            -RoleAssignmentUpdatedOn $updatedOn `
            -RoleAssignmentsLimit $roleAssignmentsUsage.roleAssignmentsLimit `
            -RoleAssignmentsCount $roleAssignmentsUsage.roleAssignmentsCurrentCount `
            -RoleSecurityCustomRoleOwner $roleSecurityCustomRoleOwner `
            -RoleSecurityOwnerAssignmentSP $roleSecurityOwnerAssignmentSP `
            -RoleAssignmentPIM $pim `
            -RoleAssignmentPIMAssignmentType $pimAssignmentType `
            -RoleAssignmentPIMSlotStart $pimSlotStart `
            -RoleAssignmentPIMSlotEnd $pimSlotEnd
    }

    $returnObject = @{}
    if ($addRowToTableDone) {
        $returnObject.'addRowToTableDone' = @{}
    }
    return $returnObject
}
$funcDataCollectionRoleAssignmentsSub = $function:dataCollectionRoleAssignmentsSub.ToString()

function dataCollectionClassicAdministratorsSub {
    [CmdletBinding()]Param(
        [string]$scopeId,
        [string]$scopeDisplayName,
        [string]$subscriptionMgPath,
        $subscriptionQuotaId
    )

    $apiEndPoint = $azAPICallConf['azAPIEndpointUrls'].ARM
    $api = "/subscriptions/$($scopeId)/providers/Microsoft.Authorization/classicAdministrators"
    $apiVersion = '?api-version=2015-07-01'
    $uri = $apiEndPoint + $api + $apiVersion
    $azAPICallPayload = @{
        uri                    = $uri
        method                 = 'GET'
        currentTask            = "classicAdministrators '$($scopeDisplayName)' ('$scopeId') [quotaId:'$subscriptionQuotaId']"
        AzAPICallConfiguration = $azAPICallConf
    }

    $AzApiCallResult = AzAPICall @azAPICallPayload
    if ($AzApiCallResult -ne 'ClassicAdministratorListFailed') {
        $arrayClassicAdministrators = [System.Collections.ArrayList]@()
        foreach ($roleAll in $AzApiCallResult) {
            $splitPropertiesRole = $roleAll.properties.role.Split(';')
            foreach ($role in $splitPropertiesRole) {
                $null = $arrayClassicAdministrators.Add([PSCustomObject]@{
                        Subscription       = $scopeDisplayName
                        SubscriptionId     = $scopeId
                        SubscriptionMgPath = $subscriptionMgPath
                        Identity           = $roleAll.properties.emailAddress
                        Role               = $role
                        Id                 = $roleAll.id
                    }) 
            }
        }
        $script:htClassicAdministrators.($scopeId) = @{}
        $script:htClassicAdministrators.($scopeId).ClassicAdministrators = $arrayClassicAdministrators
    }
}
$funcDataCollectionClassicAdministratorsSub = $function:dataCollectionClassicAdministratorsSub.ToString()

#endregion functions4DataCollection
#region HTML
function HierarchyMgHTML($mgChild) {
    $mgDetails = $htMgDetails.($mgChild).details
    $mgName = $mgDetails.mgName
    $mgId = $mgDetails.MgId

    if ($mgId -eq ($azAPICallConf['checkContext']).Tenant.Id) {
        if ($mgId -eq $defaultManagementGroupId) {
            $class = "class=`"tenantRootGroup mgnonradius defaultMG`""
        }
        else {
            $class = "class=`"tenantRootGroup mgnonradius`""
        }
    }
    else {
        if ($mgId -eq $defaultManagementGroupId) {
            $class = "class=`"mgnonradius defaultMG`""
        }
        else {
            $class = "class=`"mgnonradius`""
        }
        $liclass = ''
        $liId = ''
    }
    if ($mgName -eq $mgId) {
        $mgNameAndOrId = $mgName -replace '<', '&lt;' -replace '>', '&gt;'
    }
    else {
        $mgNameAndOrId = "$($mgName -replace '<', '&lt;' -replace '>', '&gt;')<br><i>$mgId</i>"
    }

    $mgPolicyAssignmentCount = 0
    if ($htMgAtScopePolicyAssignments.($mgId)) {
        $mgPolicyAssignmentCount = $htMgAtScopePolicyAssignments.($mgId).AssignmentsCount
    }
    $mgPolicyPolicySetScopedCount = 0
    if ($htMgAtScopePoliciesScoped.($mgId)) {
        $mgPolicyPolicySetScopedCount = $htMgAtScopePoliciesScoped.($mgId).ScopedCount
    }
    $mgIdRoleAssignmentCount = 0
    if ($htMgAtScopeRoleAssignments.($mgId)) {
        $mgIdRoleAssignmentCount = $htMgAtScopeRoleAssignments.($mgId).AssignmentsCount
    }
    $script:html += @"
                    <li $liId $liclass>
                        <a $class href="#table_$mgId" id="hierarchy_$mgId">
                            <div class="main">

                                <div class="extraInfo">
                                    <div class="extraInfoContent">
"@
    if ($mgPolicyAssignmentCount -gt 0 -or $mgPolicyPolicySetScopedCount -gt 0) {
        if ($mgPolicyAssignmentCount -gt 0 -and $mgPolicyPolicySetScopedCount -gt 0) {
            $script:html += @"
                                        <div class="extraInfoPolicyAss1">
                                            <abbr class="abbrTree" title="$($mgPolicyAssignmentCount) Policy assignments">$($mgPolicyAssignmentCount)</abbr>
                                        </div>
                                        <div class="extraInfoPolicyScoped1">
                                            <abbr class="abbrTree" title="$($mgPolicyPolicySetScopedCount) Policy/PolicySet definitions scoped">$($mgPolicyPolicySetScopedCount)</abbr>
                                        </div>
"@
        }
        else {
            if ($mgPolicyAssignmentCount -gt 0) {
                $script:html += @"
                                            <div class="extraInfoPolicyAss0">
                                                <abbr class="abbrTree" title="$($mgPolicyAssignmentCount) Policy assignments">$($mgPolicyAssignmentCount)</abbr>
                                            </div>
"@
            }
            if ($mgPolicyPolicySetScopedCount -gt 0) {
                $script:html += @"
                                            <div class="extraInfoPolicyScoped0">
                                                <abbr class="abbrTree" title="$($mgPolicyPolicySetScopedCount) Policy/PolicySet definitions scoped">$($mgPolicyPolicySetScopedCount)</abbr>
                                            </div>
"@
            }
        }
    }
    else {
        $script:html += @'
    <div class="extraInfoPlchldr"></div>
'@
    }
    $script:html += @'
                                            </div>
                                            <div class="treeMgLogo">
                                                <img class="imgTreeLogo" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg">
                                            </div>
                                            <div class="extraInfoContent">
'@
    if ($mgIdRoleAssignmentCount -gt 0) {
        $script:html += @"
                                            <div class="extraInfoRoleAss">
                                                <abbr class="abbrTree" title="$($mgIdRoleAssignmentCount) Role assignments">$($mgIdRoleAssignmentCount)</abbr>
                                            </div>
"@
    }
    else {
        $script:html += @'
    <div class="extraInfoPlchldr"></div>
'@
    }
    $script:html += @"
                                    </div>
                                </div>

                                <div class="fitme" id="fitme">$($mgNameAndOrId)
                                </div>
                            </div>
                        </a>
"@
    $childMgs = $htMgDetails.($mgId).mgChildren
    if (($childMgs).count -gt 0) {
        $script:html += @'
                <ul>
'@
        foreach ($childMg in $childMgs) {
            HierarchyMgHTML -mgChild $childMg
        }
        HierarchySubForMgHTML -mgChild $mgId
        $script:html += @'
                </ul>
            </li>
'@
    }
    else {
        HierarchySubForMgUlHTML -mgChild $mgId
        $script:html += @'
            </li>
'@
    }
}

function HierarchySubForMgHTML($mgChild) {
    $subscriptions = $htMgDetails.($mgChild).Subscriptions.SubScriptionId
    $subscriptionsCnt = ($subscriptions).count
    $subscriptionsOutOfScopelinked = $outOfScopeSubscriptions.where( { $_.ManagementGroupId -eq $mgChild } )
    $subscriptionsOutOfScopelinkedCnt = ($subscriptionsOutOfScopelinked).count
    Write-Host "  Building HierarchyMap for MG '$mgChild', $($subscriptionsCnt) Subscriptions"
    if ($subscriptionsCnt -gt 0 -or $subscriptionsOutOfScopelinkedCnt -gt 0) {
        if ($subscriptionsCnt -gt 0 -and $subscriptionsOutOfScopelinkedCnt -gt 0) {
            $script:html += @"
            <li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg">$(($subscriptions).count)x <img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg">$(($subscriptionsOutOfScopelinked).count)x</div></a></li>
"@
        }
        if ($subscriptionsCnt -gt 0 -and $subscriptionsOutOfScopelinkedCnt -eq 0) {
            $script:html += @"
            <li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> $(($subscriptions).count)x</div></a></li>
"@
        }
        if ($subscriptionsCnt -eq 0 -and $subscriptionsOutOfScopelinkedCnt -gt 0) {
            $script:html += @"
            <li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg">$(($subscriptionsOutOfScopelinked).count)x</div></a></li>
"@
        }
    }
}

function HierarchySubForMgUlHTML($mgChild) {
    $subscriptions = $htMgDetails.($mgChild).Subscriptions.SubScriptionId
    $subscriptionsCnt = ($subscriptions).count
    $subscriptionsOutOfScopelinked = $outOfScopeSubscriptions.where( { $_.ManagementGroupId -eq $mgChild } )
    $subscriptionsOutOfScopelinkedCnt = ($subscriptionsOutOfScopelinked).count
    Write-Host "  Building HierarchyMap for MG '$mgChild', $($subscriptionsCnt) Subscriptions"
    if ($subscriptionsCnt -gt 0 -or $subscriptionsOutOfScopelinkedCnt -gt 0) {
        if ($subscriptionsCnt -gt 0 -and $subscriptionsOutOfScopelinkedCnt -gt 0) {
            $script:html += @"
            <ul><li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> $(($subscriptions).count)x <img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg">$(($subscriptionsOutOfScopelinked).count)x</div></a></li></ul>
"@
        }
        if ($subscriptionsCnt -gt 0 -and $subscriptionsOutOfScopelinkedCnt -eq 0) {
            $script:html += @"
            <ul><li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> $(($subscriptions).count)x</div></a></li></ul>
"@
        }
        if ($subscriptionsCnt -eq 0 -and $subscriptionsOutOfScopelinkedCnt -gt 0) {
            $script:html += @"
            <ul><li><a href="#table_$mgChild"><div class="hierarchyTreeSubs" id="hierarchySub_$mgChild"><img class="imgSubTree" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg">$(($subscriptionsOutOfScopelinked).count)x</div></a></li></ul>
"@
        }
    }
}

function processScopeInsights($mgChild, $mgChildOf) {
    $mgDetails = $htMgDetails.($mgChild).details
    $mgName = $mgDetails.mgName
    $mgLevel = $mgDetails.Level
    $mgId = $mgDetails.MgId

    if (-not $NoScopeInsights) {
        if ($mgId -eq $defaultManagementGroupId) {
            $classDefaultMG = 'defaultMG'
        }
        else {
            $classDefaultMG = ''
        }

        switch ($mgLevel) {
            '0' { $levelSpacing = '| L0 &ndash;&nbsp;' }
            '1' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&ndash; L1 &ndash;&nbsp;' }
            '2' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash; &ndash; L2 &ndash;&nbsp;' }
            '3' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash; &ndash; &ndash; L3 &ndash;&nbsp;' }
            '4' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash; &ndash; &ndash; &ndash; L4 &ndash;&nbsp;' }
            '5' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash; &ndash; &ndash; &ndash; &ndash; L5 &ndash;&nbsp;' }
            '6' { $levelSpacing = '| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash; &ndash; &ndash; &ndash; &ndash; &ndash; L6 &ndash;&nbsp;' }
        }

        $mgPath = $htManagementGroupsMgPath.($mgChild).pathDelimited

        $mgLinkedSubsCount = ((($optimizedTableForPathQuery.where( { $_.MgId -eq $mgChild -and -not [String]::IsNullOrEmpty($_.SubscriptionId) } )).SubscriptionId | Get-Unique)).count
        $subscriptionsOutOfScopelinkedCount = ($outOfScopeSubscriptions.where( { $_.ManagementGroupId -eq $mgChild } )).count
        if ($mgLinkedSubsCount -gt 0 -and $subscriptionsOutOfScopelinkedCount -eq 0) {
            $subInfo = "<img class=`"imgSub`" src=`"https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg`">$mgLinkedSubsCount"
        }
        if ($mgLinkedSubsCount -gt 0 -and $subscriptionsOutOfScopelinkedCount -gt 0) {
            $subInfo = "<img class=`"imgSub`" src=`"https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg`">$mgLinkedSubsCount <img class=`"imgSub`" src=`"https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg`">$subscriptionsOutOfScopelinkedCount"
        }
        if ($mgLinkedSubsCount -eq 0 -and $subscriptionsOutOfScopelinkedCount -gt 0) {
            $subInfo = "<img class=`"imgSub`" src=`"https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_excluded_r.svg`">$subscriptionsOutOfScopelinkedCount"
        }
        if ($mgLinkedSubsCount -eq 0 -and $subscriptionsOutOfScopelinkedCount -eq 0) {
            $subInfo = "<img class=`"imgSub`" src=`"https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions_grey.svg`">"
        }

        if ($mgName -eq $mgId) {
            $mgNameAndOrId = "<b>$($mgName -replace '<', '&lt;' -replace '>', '&gt;')</b>"
        }
        else {
            $mgNameAndOrId = "<b>$($mgName -replace '<', '&lt;' -replace '>', '&gt;')</b> ($mgId)"
        }

        $script:html += @"
<button type="button" class="collapsible" id="table_$mgId">$levelSpacing<img class="imgMg $($classDefaultMG)" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg"> <span class="valignMiddle">$mgNameAndOrId $subInfo</span></button>
<div class="content">
<table class="bottomrow">
<tr><td class="detailstd"><p><a href="#hierarchy_$mgId"><i class="fa fa-eye" aria-hidden="true"></i> <i>Highlight Management Group in HierarchyMap</i></a></p></td></tr>
"@
        if ($mgId -eq $defaultManagementGroupId) {
            $script:html += @'
        <tr><td class="detailstd"><p><i class="fa fa-circle" aria-hidden="true"></i> <b>Default</b> Management Group <a class="externallink" href="https://docs.microsoft.com/en-us/azure/governance/management-groups/how-to/protect-resource-hierarchy#setting---default-management-group" target="_blank" rel="noopener" rel="noopener">docs <i class="fa fa-external-link" aria-hidden="true"></i></a></p></td></tr>
'@
        }
        $script:html += @"
<tr><td class="detailstd"><p>Management Group Name: <b>$($mgName -replace '<', '&lt;' -replace '>', '&gt;')</b></p></td></tr>
<tr><td class="detailstd"><p>Management Group Id: <b>$mgId</b></p></td></tr>
<tr><td class="detailstd"><p>Management Group Path: $mgPath</p></td></tr>
"@
    }
    processScopeInsightsMgOrSub -mgOrSub 'mg' -mgchild $mgId
    processScopeInsightsMGSubs -mgChild $mgId
    $childMgs = $htMgDetails.($mgId).mgChildren
    if (($childMgs).count -gt 0) {
        foreach ($childMg in $childMgs) {
            processScopeInsights -mgChild $childMg -mgChildOf $mgId
        }
    }
}

function processScopeInsightsMGSubs($mgChild) {
    $subscriptions = $htMgDetails.($mgChild).Subscriptions
    $subscriptionLinkedCount = ($subscriptions).count
    $subscriptionsOutOfScopelinked = $outOfScopeSubscriptions.where( { $_.ManagementGroupId -eq $mgChild } )
    $subscriptionsOutOfScopelinkedCount = ($subscriptionsOutOfScopelinked).count
    if ($subscriptionsOutOfScopelinkedCount -gt 0) {
        $subscriptionsOutOfScopelinkedDetail = "($($subscriptionsOutOfScopelinkedCount) out-of-scope)"
    }
    else {
        $subscriptionsOutOfScopelinkedDetail = ''
    }
    Write-Host "  Building ScopeInsights MG '$mgChild', $subscriptionLinkedCount Subscriptions"

    if ($subscriptionLinkedCount -gt 0) {
        if (-not $NoScopeInsights) {
            $script:html += @"
    <tr>
        <td class="detailstd">
            <button type="button" class="collapsible"><p><i class="fa fa-check-circle blue" aria-hidden="true"></i> $subscriptionLinkedCount Subscriptions linked $subscriptionsOutOfScopelinkedDetail</p></button>
            <div class="content"><!--collapsible-->
"@
        }
        foreach ($subEntry in $subscriptions | Sort-Object -Property subscription, subscriptionId) {
            #$subPath = $htSubscriptionsMgPath.($subEntry.subscriptionId).pathDelimited
            if ($subscriptionLinkedCount -gt 1) {
                if (-not $NoScopeInsights) {
                    $script:html += @"
                <button type="button" class="collapsible"> <img class="imgSub" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle"><b>$($subEntry.subscription -replace '<', '&lt;' -replace '>', '&gt;')</b> ($($subEntry.subscriptionId))</span></button>
                <div class="contentSub"><!--collapsiblePerSub-->
"@
                }
            }
            #exactly 1
            else {
                if (-not $NoScopeInsights) {
                    $script:html += @"
                <img class="imgSub" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-2-Subscriptions.svg"> <span class="valignMiddle"><b>$($subEntry.subscription -replace '<', '&lt;' -replace '>', '&gt;')</b> ($($subEntry.subscriptionId))</span></button>
"@
                }
            }
            if (-not $NoScopeInsights) {
                $script:html += @"
                <table class="subTable">
                <tr><td class="detailstd"><p><a href="#hierarchySub_$mgChild"><i class="fa fa-eye" aria-hidden="true"></i> <i>Highlight Subscription in HierarchyMap</i></a></p></td></tr>
"@
            }

            if (-not $azAPICallConf['htParameters'].ManagementGroupsOnly) {
                processScopeInsightsMgOrSub -mgOrSub 'sub' -subscriptionId $subEntry.subscriptionId -subscriptionsMgId $mgChild
            }

            if (-not $NoScopeInsights) {
                $script:html += @'
                </table><!--subTable-->
'@
            }
            if ($subscriptionLinkedCount -gt 1) {
                if (-not $NoScopeInsights) {
                    $script:html += @'
                </div><!--collapsiblePerSub-->
'@
                }
            }
        }
        if (-not $NoScopeInsights) {
            $script:html += @'
            </div><!--collapsible-->
'@
        }

    }
    else {
        if (-not $NoScopeInsights) {
            $script:html += @"
    <tr>
        <td class="detailstd">
            <p><i class="fa fa-ban" aria-hidden="true"></i> $subscriptionLinkedCount Subscriptions linked $subscriptionsOutOfScopelinkedDetail</p>
"@
        }
    }
    if (-not $NoScopeInsights) {
        $script:html += @'
                </td>
            </tr>

</table>
</div>
'@
    }
}
#endregion HTML
#endregion Functions

$funcAddRowToTable = $function:addRowToTable.ToString()
$funcGetGroupmembers = $function:GetGroupmembers.ToString()
$funcResolveObjectIds = $function:ResolveObjectIds.ToString()
$funcNamingValidation = $function:NamingValidation.ToString()

testPowerShellVersion
showMemoryUsage
setOutput
if ($DoTranscript) {
    setTranscript
}

#region verifyModules3rd
$modules = [System.Collections.ArrayList]@()
$null = $modules.Add([PSCustomObject]@{
        ModuleName         = 'AzAPICall'
        ModuleVersion      = $AzAPICallVersion
        ModuleProductName  = 'AzAPICall'
        ModulePathPipeline = 'AzAPICallModule'
    })

if ($DoPSRule) {
    
    <#temporary workaround / PSRule/Azure DevOps Az.Resources module requirements
    if ($env:SYSTEM_TEAMPROJECTID -and $env:BUILD_REPOSITORY_ID) {
        $PSRuleVersion = '1.14.3'
        Write-Host "Running in Azure DevOps; enforce PSRule version '$PSRuleVersion' (Az.Resources dependency on latest PSRule)"
    }
    #>

    $null = $modules.Add([PSCustomObject]@{
            ModuleName         = 'PSRule.Rules.Azure'
            ModuleVersion      = $PSRuleVersion
            ModuleProductName  = 'PSRule'
            ModulePathPipeline = 'PSRuleModule'
        })
}
verifyModules3rd -modules $modules
#endregion verifyModules3rd

#Region initAZAPICall
Write-Host "Initialize 'AzAPICall'"
$parameters4AzAPICallModule = @{
    DebugAzAPICall           = $DebugAzAPICall
    SubscriptionId4AzContext = $SubscriptionId4AzContext
    GithubRepository         = $GithubRepository
}
$azAPICallConf = initAzAPICall @parameters4AzAPICallModule
Write-Host " Initialize 'AzAPICall' succeeded" -ForegroundColor Green
#EndRegion initAZAPICall

checkAzGovVizVersion

#region promptNewAzGovVizVersionAvailable
if ($azGovVizNewerVersionAvailable) {
    if (-not $azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
        Write-Host ''
        Write-Host " * * * This AzGovViz version ($ProductVersion) is not up to date. Get the latest AzGovViz version ($azGovVizVersionOnRepositoryFull)! * * *" -ForegroundColor Green
        Write-Host 'Check the AzGovViz history: https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting/blob/master/history.md'
        Write-Host ' * * * * * * * * * * * * * * * * * * * * * *' -ForegroundColor Green
        pause
    }
}
#endregion promptNewAzGovVizVersionAvailable

handleCloudEnvironment

#region recommendPSRule
if (-not $azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
    if (-not $DoPSRule) {
        Write-Host ""
        Write-Host " * * * RECOMMENDATION: PSRule for Azure * * *" -ForegroundColor Magenta
        Write-Host "Parameter -DoPSRule == '$DoPSRule'"
        Write-Host "'PSRule for Azure' based ouputs provide aggregated Microsoft Azure Well-Architected Framework (WAF) aligned resource analysis results including guidance for remediation."
        Write-Host "Consider running AzGovViz with the parameter -DoPSRule (example: .\pwsh\AzGovVizParallel.ps1 -DoPSRule)"
        Write-Host " * * * * * * * * * * * * * * * * * * * * * *" -ForegroundColor Magenta
        pause
    }
}
#endregion recommendPSRule

addHtParameters

#region delimiterOpposite
if ($CsvDelimiter -eq ';') {
    $CsvDelimiterOpposite = ','
}
if ($CsvDelimiter -eq ',') {
    $CsvDelimiterOpposite = ';'
}
#endregion delimiterOpposite

#region runDataCollection

#run

validateAccess
getFileNaming

Write-Host "Running AzGovViz for ManagementGroupId: '$ManagementGroupId'" -ForegroundColor Yellow

$newTable = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
$htMgDetails = @{}
$htSubDetails = @{}

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
    #helper ht / collect results /save some time
    $htCacheDefinitionsPolicy = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheDefinitionsPolicySet = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheDefinitionsRole = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheDefinitionsBlueprint = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htRoleDefinitionIdsUsedInPolicy = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htPoliciesUsedInPolicySets = @{}
    $htSubscriptionTags = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheAssignmentsPolicyOnResourceGroupsAndResources = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheAssignmentsRole = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheAssignmentsRBACOnResourceGroupsAndResources = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheAssignmentsBlueprint = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCacheAssignmentsPolicy = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCachePolicyComplianceMG = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCachePolicyComplianceSUB = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCachePolicyComplianceResponseTooLargeMG = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htCachePolicyComplianceResponseTooLargeSUB = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $outOfScopeSubscriptions = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htAllSubscriptionsFromAPI = @{}
    if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
        $htManagementGroupsCost = @{}
        $htAzureConsumptionSubscriptions = @{}
        $arrayConsumptionData = [System.Collections.ArrayList]@()
        $arrayTotalCostSummary = @()
        $azureConsumptionStartDate = ((Get-Date).AddDays( - ($($AzureConsumptionPeriod)))).ToString('yyyy-MM-dd')
        $azureConsumptionEndDate = ((Get-Date).AddDays(-1)).ToString('yyyy-MM-dd')
    }
    $customDataCollectionDuration = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htResourceLocks = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htAllTagList = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htAllTagList.AllScopes = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htAllTagList.Subscription = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htAllTagList.ResourceGroup = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htAllTagList.Resource = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $arrayTagList = [System.Collections.ArrayList]@()
    $htSubscriptionTagList = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htPolicyAssignmentExemptions = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htUserTypesGuest = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $resourcesAll = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $resourcesIdsAll = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $resourceGroupsAll = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htResourceProvidersAll = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $arrayFeaturesAll = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htResourceTypesUniqueResource = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $arrayDataCollectionProgressMg = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arrayDataCollectionProgressSub = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arraySubResourcesAddArrayDuration = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arrayDiagnosticSettingsMgSub = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htDiagnosticSettingsMgSub = @{}
    $htDiagnosticSettingsMgSub.mg = @{}
    $htDiagnosticSettingsMgSub.sub = @{}
    $htMgAtScopePolicyAssignments = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htMgAtScopePoliciesScoped = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htMgAtScopeRoleAssignments = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htMgASCSecureScore = @{}
    $htConsumptionExceptionLog = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htConsumptionExceptionLog.Mg = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htConsumptionExceptionLog.Sub = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htRoleAssignmentsFromAPIInheritancePrevention = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.PolicyAssignment = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.Policy = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.PolicySet = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.Role = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.Subscription = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htNamingValidation.ManagementGroup = @{} #[System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htPrincipals = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htServicePrincipals = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $htDailySummary = @{}
    $arrayDefenderPlans = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arrayDefenderPlansSubscriptionsSkipped = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arrayUserAssignedIdentities4Resources = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htSubscriptionsRoleAssignmentLimit = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
        $htMgASCSecureScore = @{}
    }
    $htManagedIdentityForPolicyAssignment = @{}
    $htPolicyAssignmentManagedIdentity = @{}
    $htManagedIdentityDisplayName = @{}
    $htAppDetails = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    if (-not $NoAADGroupsResolveMembers) {

        $htAADGroupsDetails = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
        $htAADGroupsExeedingMemberLimit = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
        $arrayGroupRoleAssignmentsOnServicePrincipals = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
        $arrayGroupRequestResourceNotFound = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
        $arrayProgressedAADGroups = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    }
    if ($DoAzureConsumption) {
        $allConsumptionData = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    }
    $arrayPsRule = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $arrayPSRuleTracking = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
    $htClassicAdministrators = [System.Collections.Hashtable]::Synchronized((New-Object System.Collections.Hashtable)) #@{}
    $arrayOrphanedResources = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))
}

getEntities
showMemoryUsage
setBaseVariablesMG

if ($azAPICallConf['htParameters'].accountType -eq 'User') {
    getTenantDetails
}

getDefaultManagementGroup

runInfo

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {

    #checkContextSubscriptionQuotaId -AADQuotaId $AADQuotaId
    #testAzContext
    getSubscriptions
    detailSubscriptions
    showMemoryUsage
    getOrphanedResources
    showMemoryUsage

    if ($azAPICallConf['htParameters'].NoMDfCSecureScore -eq $false) {
        getMDfCSecureScoreMG
    }

    if ($azAPICallConf['htParameters'].DoAzureConsumption -eq $true) {
        getConsumption
    }

    cacheBuiltIn
    showMemoryUsage

    Write-Host 'Collecting custom data'
    $startDataCollection = Get-Date

    processDataCollection -mgId $ManagementGroupId
    showMemoryUsage

    exportBaseCSV

    $endDataCollection = Get-Date
    Write-Host "Collecting custom data duration: $((NEW-TIMESPAN -Start $startDataCollection -End $endDataCollection).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startDataCollection -End $endDataCollection).TotalSeconds) seconds)"
}
else {
    processHierarchyMapOnly
    exportBaseCSV
}

prepareData
showMemoryUsage

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {

    $rbacBaseQuery = $newTable.where({ -not [String]::IsNullOrEmpty($_.RoleDefinitionName) } ) | Sort-Object -Property RoleIsCustom, RoleDefinitionName | Select-Object -Property Level, Role*, mg*, Subscription*
    $roleAssignmentsUniqueById = $rbacBaseQuery | Sort-Object -Property RoleAssignmentId -Unique

    if (-not $NoAADGroupsResolveMembers) {
        processAADGroups
        showMemoryUsage
    }

    processApplications
    showMemoryUsage

    processManagedIdentities
    showMemoryUsage

    createTagList
    showMemoryUsage

    if ($azAPICallConf['htParameters'].NoResources -eq $false) {
        getResourceDiagnosticsCapability
        showMemoryUsage
    }
}
#endregion runDataCollection

#region createoutputs

#region BuildHTML
#testhelper
#$fileTimestamp = (Get-Date -Format $FileTimeStampFormat)

$startBuildHTML = Get-Date
Write-Host 'Building HTML'
$html = $null

#getFileNaming

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
    #region preQueries
    Write-Host ' Building preQueries'
    $startPreQueries = Get-Date

    Write-Host 'Create Policy/Set helper hash table'
    $startHelperHt = Get-Date
    $tenantAllPolicySets = ($htCacheDefinitionsPolicySet).Values
    $tenantAllPolicySetsCount = ($tenantAllPolicySets).count
    if ($tenantAllPolicySetsCount -gt 0) {
        foreach ($policySet in $tenantAllPolicySets) {
            $PolicySetPolicyIds = $policySet.PolicySetPolicyIds
            foreach ($PolicySetPolicyId in $PolicySetPolicyIds) {

                if ($policySet.LinkToAzAdvertizer) {
                    $hlperDisplayNameWithOrWithoutLinkToAzAdvertizer = "$($policySet.LinkToAzAdvertizer) ($($policySet.PolicyDefinitionId))"
                }
                else {
                    $hlperDisplayNameWithOrWithoutLinkToAzAdvertizer = "$($policySet.DisplayName) ($($policySet.PolicyDefinitionId))"
                }
                $hlper4CSVOutput = "$($policySet.DisplayName) ($($policySet.PolicyDefinitionId))"
                if (-not $htPoliciesUsedInPolicySets.($PolicySetPolicyId)) {
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId) = @{}
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet = [array]$hlperDisplayNameWithOrWithoutLinkToAzAdvertizer
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet4CSV = [array]$hlper4CSVOutput
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySetIdOnly = [array]($policySet.PolicyDefinitionId)
                }
                else {
                    $array = $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet
                    $array += $hlperDisplayNameWithOrWithoutLinkToAzAdvertizer
                    $arrayCSV = $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet4CSV
                    $arrayCSV += $hlper4CSVOutput
                    $arrayIdOnly = $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySetIdOnly
                    $arrayIdOnly += $policySet.PolicyDefinitionId
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet = $array
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySet4CSV = $arrayCSV
                    $htPoliciesUsedInPolicySets.($PolicySetPolicyId).policySetIdOnly = $arrayIdOnly
                }
            }
        }
    }
    $endHelperHt = Get-Date
    Write-Host "Create Policy/Set helper hash table duration: $((NEW-TIMESPAN -Start $startHelperHt -End $endHelperHt).TotalSeconds) seconds"

    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
        $policyBaseQuery = $newTable.where({ -not [String]::IsNullOrEmpty($_.PolicyVariant) } ) | Sort-Object -Property PolicyType, Policy | Select-Object -Property Level, Policy*, mg*, Subscription*
    }
    else {
        $policyBaseQuery = $newTable.where({ -not [String]::IsNullOrEmpty($_.PolicyVariant) -and ($_.PolicyAssignmentScopeMgSubRg -eq 'Mg' -or $_.PolicyAssignmentScopeMgSubRg -eq 'Sub') } ) | Sort-Object -Property PolicyType, Policy | Select-Object -Property Level, Policy*, mg*, Subscription*
    }

    $policyBaseQuerySubscriptions = $policyBaseQuery.where({ -not [String]::IsNullOrEmpty($_.SubscriptionId) } )
    $policyBaseQueryManagementGroups = $policyBaseQuery.where({ [String]::IsNullOrEmpty($_.SubscriptionId) } )
    $policyPolicyBaseQueryScopeInsights = ($policyBaseQuery | Select-Object Mg*, Subscription*, PolicyAssignmentAtScopeCount, PolicySetAssignmentAtScopeCount, PolicyAndPolicySetAssignmentAtScopeCount, PolicyAssignmentLimit -Unique)
    $policyBaseQueryUniqueAssignments = $policyBaseQuery | Select-Object -Property Policy* | Sort-Object -Property PolicyAssignmentId -Unique
    $policyAssignmentsOrphaned = $policyBaseQuery.where({ $_.PolicyAvailability -eq 'na' } ) | Sort-Object -Property PolicyAssignmentId -Unique
    $policyAssignmentsOrphanedCount = $policyAssignmentsOrphaned.Count
    Write-Host "  $policyAssignmentsOrphanedCount orphaned Policy assignments found"

    $htPolicyWithAssignmentsBase = @{}
    foreach ($policyAssignment in $policyBaseQueryUniqueAssignments) {
        if ($policyAssignment.PolicyVariant -eq 'Policy') {
            if (-not $htPolicyWithAssignmentsBase.($policyAssignment.PolicyDefinitionId)) {
                $htPolicyWithAssignmentsBase.($policyAssignment.PolicyDefinitionId) = @{}
                $htPolicyWithAssignmentsBase.($policyAssignment.PolicyDefinitionId).Assignments = [array]$policyAssignment.PolicyAssignmentId
            }
            else {
                $usedInAssignments = $htPolicyWithAssignmentsBase.($policyAssignment.PolicyDefinitionId).Assignments
                $usedInAssignments += $policyAssignment.PolicyAssignmentId
                $htPolicyWithAssignmentsBase.($policyAssignment.PolicyDefinitionId).Assignments = $usedInAssignments
            }
        }
    }

    $policyPolicySetBaseQueryUniqueAssignments = $policyBaseQueryUniqueAssignments.where({ $_.PolicyVariant -eq 'PolicySet' } )
    $policyBaseQueryUniqueCustomDefinitions = ($policyBaseQuery.where({ $_.PolicyType -eq 'Custom' } )) | select-object PolicyVariant, PolicyDefinitionId -Unique
    $policyPolicyBaseQueryUniqueCustomDefinitions = ($policyBaseQueryUniqueCustomDefinitions.where({ $_.PolicyVariant -eq 'Policy' } )).PolicyDefinitionId
    $policyPolicySetBaseQueryUniqueCustomDefinitions = ($policyBaseQueryUniqueCustomDefinitions.where({ $_.PolicyVariant -eq 'PolicySet' } )).PolicyDefinitionId

    $rbacBaseQueryArrayListNotGroupOwner = $rbacBaseQuery.where({ $_.RoleAssignmentIdentityObjectType -ne 'Group' -and $_.RoleDefinitionName -eq 'Owner' }) | Select-Object -Property mgid, SubscriptionId, RoleAssignmentId, RoleDefinitionName, RoleDefinitionId, RoleAssignmentIdentityObjectType, RoleAssignmentIdentityDisplayname, RoleAssignmentIdentitySignInName, RoleAssignmentIdentityObjectId
    $rbacBaseQueryArrayListNotGroupUserAccessAdministrator = $rbacBaseQuery.where({ $_.RoleAssignmentIdentityObjectType -ne 'Group' -and $_.RoleDefinitionName -eq 'User Access Administrator' }) | Select-Object -Property mgid, SubscriptionId, RoleAssignmentId, RoleDefinitionName, RoleDefinitionId, RoleAssignmentIdentityObjectType, RoleAssignmentIdentityDisplayname, RoleAssignmentIdentitySignInName, RoleAssignmentIdentityObjectId
    $roleAssignmentsForServicePrincipals = (($roleAssignmentsUniqueById.where({ $_.RoleAssignmentIdentityObjectType -eq 'ServicePrincipal' })))
    $htRoleAssignmentsForServicePrincipals = @{}
    foreach ($spWithRoleAssignment in $roleAssignmentsForServicePrincipals | Group-Object -Property RoleAssignmentIdentityObjectId) {
        if (-not $htRoleAssignmentsForServicePrincipals.($spWithRoleAssignment.Name)) {
            $htRoleAssignmentsForServicePrincipals.($spWithRoleAssignment.Name) = @{}
            $htRoleAssignmentsForServicePrincipals.($spWithRoleAssignment.Name).RoleAssignments = $spWithRoleAssignment.group
        }
    }

    $blueprintBaseQuery = ($newTable | Select-Object mgid, SubscriptionId, Blueprint*).where({ -not [String]::IsNullOrEmpty($_.BlueprintName) } )
    $mgsAndSubs = (($optimizedTableForPathQuery.where({ $_.mgId -ne '' -and $_.Level -ne '0' } )) | select-object MgId, SubscriptionId -unique)

    #region create array Policy definitions
    $tenantAllPoliciesCount = (($htCacheDefinitionsPolicy).Values).count
    $tenantCustomPolicies = (($htCacheDefinitionsPolicy).Values).where({ $_.Type -eq 'Custom' } )
    $tenantCustomPoliciesCount = ($tenantCustomPolicies).count
    #endregion create array Policy definitions

    #region create array PolicySet definitions
    $tenantCustomPolicySets = $tenantAllPolicySets.where({ $_.Type -eq 'Custom' } )
    $tenantCustompolicySetsCount = ($tenantCustomPolicySets).count
    #endregion create array PolicySet definitions

    #region assignmentRgRes
    $htPoliciesWithAssignmentOnRgRes = @{}
    foreach ($policyAssignmentRgRes in ($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values | Sort-Object -Property id -Unique) {
        $hlperPolDefId = (($policyAssignmentRgRes.properties.policyDefinitionId).ToLower())
        if (-not $htPoliciesWithAssignmentOnRgRes.($hlperPolDefId)) {
            $pscustomObj = [System.Collections.ArrayList]@()
            $null = $pscustomObj.Add([PSCustomObject]@{
                    PolicyAssignmentId          = ($policyAssignmentRgRes.Id).ToLower()
                    PolicyAssignmentDisplayName = $policyAssignmentRgRes.properties.displayName
                })
            $htPoliciesWithAssignmentOnRgRes.($hlperPolDefId) = @{}
            $htPoliciesWithAssignmentOnRgRes.($hlperPolDefId).Assignments = [array](($pscustomObj))
        }
        else {
            $pscustomObj = [System.Collections.ArrayList]@()
            $null = $pscustomObj.Add([PSCustomObject]@{
                    PolicyAssignmentId          = ($policyAssignmentRgRes.Id).ToLower()
                    PolicyAssignmentDisplayName = $policyAssignmentRgRes.properties.displayName
                })
            $array = @()
            $array += $htPoliciesWithAssignmentOnRgRes.($hlperPolDefId).Assignments
            $array += (($pscustomObj))
            $htPoliciesWithAssignmentOnRgRes.($hlperPolDefId).Assignments = $array
        }
    }
    #endregion assignmentRgRes

    $tenantAllRoles = ($htCacheDefinitionsRole).Values
    $tenantAllRolesCount = ($tenantAllRoles).Count
    $tenantCustomRoles = $tenantAllRoles.where({ $_.IsCustom -eq $True } )
    $tenantCustomRolesCount = ($tenantCustomRoles).Count
    $tenantAllRolesCanDoRoleAssignments = $tenantAllRoles.where({ $_.RoleCanDoRoleAssignments -eq $True } )
    $tenantAllRolesCanDoRoleAssignmentsCount = $tenantAllRolesCanDoRoleAssignments.Count

    $mgSubRoleAssignmentsArrayFromHTValues = ($htCacheAssignmentsRole).Values.Assignment
    if ($azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
        $rgResRoleAssignmentsArrayFromHTValues = ($htCacheAssignmentsRBACOnResourceGroupsAndResources).Values
    }

    #region diagnostics Mg/Sub
    $diagnosticSettingsMg = $arrayDiagnosticSettingsMgSub.where({ $_.Scope -eq 'Mg' -and $_.DiagnosticsPresent -eq 'true' })
    $diagnosticSettingsMgCount = $diagnosticSettingsMg.Count
    $diagnosticSettingsMgCategories = ($diagnosticSettingsMg.DiagnosticCategories | Group-Object -Property Category).Name
    $diagnosticSettingsMgGrouped = $diagnosticSettingsMg | Group-Object -Property ScopeId
    $diagnosticSettingsMgManagementGroupsCount = ($diagnosticSettingsMgGrouped | Measure-Object).Count

    foreach ($entry in $diagnosticSettingsMgGrouped) {
        $dsgrouped = $entry.group | Group-Object -property DiagnosticSettingName

        foreach ($ds in $dsgrouped) {
            $targetTypegrouped = $ds.group | Group-Object -property DiagnosticTargetType
            foreach ($tt in $targetTypegrouped) {
                if (-not ($htDiagnosticSettingsMgSub).mg.($entry.Name)) {
                    ($htDiagnosticSettingsMgSub).mg.($entry.Name) = @{}
                }
                if (-not ($htDiagnosticSettingsMgSub).mg.($entry.Name).($ds.Name)) {
                    ($htDiagnosticSettingsMgSub).mg.($entry.Name).($ds.Name) = @{}
                }
                if (-not ($htDiagnosticSettingsMgSub).mg.($entry.Name).($ds.Name).($tt.Name)) {
                    ($htDiagnosticSettingsMgSub).mg.($entry.Name).($ds.Name).($tt.Name) = $tt.group
                }
            }
        }
    }

    foreach ($mg in $htManagementGroupsMgPath.Values) {
        foreach ($mgWithDiag in ($htDiagnosticSettingsMgSub).mg.keys) {
            if ($mg.ParentNameChain -contains $mgWithDiag) {
                foreach ($diagSet in ($htDiagnosticSettingsMgSub).mg.($mgWithDiag).keys) {
                    foreach ($tt in ($htDiagnosticSettingsMgSub).mg.($mgWithDiag).($diagset).keys) {
                        foreach ($tid in ($htDiagnosticSettingsMgSub).mg.($mgWithDiag).($diagset).($tt)) {
                            $null = $script:diagnosticSettingsMg.Add([PSCustomObject]@{
                                    Scope                     = 'Mg'
                                    ScopeName                 = $mg.displayName
                                    ScopeId                   = $mg.Id
                                    ScopeMgPath               = $htManagementGroupsMgPath.($mg.Id).pathDelimited
                                    DiagnosticsInheritedOrnot = $true
                                    DiagnosticsInheritedFrom  = $mgWithDiag
                                    DiagnosticsPresent        = 'true'
                                    DiagnosticSettingName     = $diagSet
                                    DiagnosticTargetType      = $tt
                                    DiagnosticTargetId        = $tid.DiagnosticTargetId
                                    DiagnosticCategories      = $tid.DiagnosticCategories
                                    DiagnosticCategoriesHt    = $tid.DiagnosticCategoriesHt
                                })
                        }
                    }
                }
            }
        }
    }
    $mgsDiagnosticsApplicableCount = $diagnosticSettingsMg.Count

    $arrayMgsWithoutDiagnostics = [System.Collections.ArrayList]@()
    foreach ($mg in $htManagementGroupsMgPath.Values) {
        if ($diagnosticSettingsMg.ScopeId -notcontains $mg.Id) {
            $null = $arrayMgsWithoutDiagnostics.Add([PSCustomObject]@{
                    ScopeName   = $mg.DisplayName
                    ScopeId     = $mg.Id
                    ScopeMgPath = $mg.pathDelimited
                })
        }
    }
    $arrayMgsWithoutDiagnosticsCount = $arrayMgsWithoutDiagnostics.Count


    $diagnosticSettingsSub = $arrayDiagnosticSettingsMgSub.where({ $_.Scope -eq 'Sub' -and $_.DiagnosticsPresent -eq 'true' })
    $diagnosticSettingsSubCount = $diagnosticSettingsSub.Count
    $diagnosticSettingsSubNoDiag = $arrayDiagnosticSettingsMgSub.where({ $_.Scope -eq 'Sub' -and $_.DiagnosticsPresent -eq 'false' })
    $diagnosticSettingsSubNoDiagCount = $diagnosticSettingsSubNoDiag.Count
    $diagnosticSettingsSubCategories = ($diagnosticSettingsSub.DiagnosticCategories | Group-Object -Property Category).Name
    $diagnosticSettingsSubGrouped = $diagnosticSettingsSub | Group-Object -Property ScopeId
    $diagnosticSettingsSubSubscriptionsCount = ($diagnosticSettingsSubGrouped | Measure-Object).Count

    foreach ($entry in $diagnosticSettingsSubGrouped) {
        $dsgrouped = $entry.group | Group-Object -property DiagnosticSettingName

        foreach ($ds in $dsgrouped) {
            $targetTypegrouped = $ds.group | Group-Object -property DiagnosticTargetType
            foreach ($tt in $targetTypegrouped) {
                if (-not ($htDiagnosticSettingsMgSub).sub.($entry.Name)) {
                    ($htDiagnosticSettingsMgSub).sub.($entry.Name) = @{}
                }
                if (-not ($htDiagnosticSettingsMgSub).sub.($entry.Name).($ds.Name)) {
                    ($htDiagnosticSettingsMgSub).sub.($entry.Name).($ds.Name) = @{}
                }
                if (-not ($htDiagnosticSettingsMgSub).sub.($entry.Name).($ds.Name).($tt.Name)) {
                    ($htDiagnosticSettingsMgSub).sub.($entry.Name).($ds.Name).($tt.Name) = $tt.group
                }
            }
        }
    }
    #endregion diagnostics Mg/Sub

    #region DefenderPlans
    $defenderPlansGroupedBySub = $arrayDefenderPlans | Sort-Object -Property subscriptionName | Group-Object -Property subscriptionName, subscriptionId, subscriptionMgPath
    $subsDefenderPlansCount = ($defenderPlansGroupedBySub | Measure-Object).Count
    $defenderCapabilities = ($arrayDefenderPlans.defenderPlan | Sort-Object -Unique)
    $defenderCapabilitiesCount = $defenderCapabilities.Count
    $defenderPlansGroupedByPlan = $arrayDefenderPlans | Group-Object -Property defenderPlan, defenderPlanTier
    $defenderPlansGroupedByPlanCount = ($defenderPlansGroupedByPlan | Measure-Object).Count
    if ($defenderPlansGroupedByPlan.Name -contains 'ContainerRegistry, Standard' -or $defenderPlansGroupedByPlan.Name -contains 'KubernetesService, Standard') {
        if ($defenderPlansGroupedByPlan.Name -contains 'ContainerRegistry, Standard') {
            $defenderPlanDeprecatedContainerRegistry = $true
        }
        if ($defenderPlansGroupedByPlan.Name -contains 'KubernetesService, Standard') {
            $defenderPlanDeprecatedKubernetesService = $true
        }
    }
    #endregion DefenderPlans

    $endPreQueries = Get-Date
    Write-Host " Pre Queries duration: $((NEW-TIMESPAN -Start $startPreQueries -End $endPreQueries).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startPreQueries -End $endPreQueries).TotalSeconds) seconds)"
    showMemoryUsage
    #endregion preQueries

    #region summarizeDataCollectionResults
    $startSummarizeDataCollectionResults = Get-Date
    Write-Host 'Summary data collection'
    $mgsDetails = ($optimizedTableForPathQueryMg | Select-Object Level, MgId -Unique)
    $mgDepth = ($mgsDetails.Level  | measure-object -maximum).Maximum
    $totalMgCount = ($mgsDetails).count
    $totalSubCount = ($optimizedTableForPathQuerySub).count
    $totalSubOutOfScopeCount = ($outOfScopeSubscriptions).count
    $totalSubIncludedAndExcludedCount = $totalSubCount + $totalSubOutOfScopeCount
    $totalResourceCount = $($resourcesIdsAll.Count)

    $totalPolicyAssignmentsCount = (($htCacheAssignmentsPolicy).keys).count

    $policyAssignmentsMg = (($htCacheAssignmentsPolicy).Values.where({ $_.AssignmentScopeMgSubRg -eq 'Mg' } ))
    $totalPolicyAssignmentsCountMg = $policyAssignmentsMg.Count

    $totalPolicyAssignmentsCountSub = (($htCacheAssignmentsPolicy).Values.where({ $_.AssignmentScopeMgSubRg -eq 'Sub' } )).count

    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsOnPolicy) {
        $totalPolicyAssignmentsCountRg = (($htCacheAssignmentsPolicy).Values.where({ $_.AssignmentScopeMgSubRg -eq 'Rg' -or $_.AssignmentScopeMgSubRg -eq 'Res' } )).count
    }
    else {
        $totalPolicyAssignmentsCountRg = (($htCacheAssignmentsPolicyOnResourceGroupsAndResources).values).count
        $totalPolicyAssignmentsCount = $totalPolicyAssignmentsCount + $totalPolicyAssignmentsCountRg
    }

    $totalRoleAssignmentsCount = (($htCacheAssignmentsRole).keys).count
    $totalRoleAssignmentsCountTen = (($htCacheAssignmentsRole).keys.where({ ($htCacheAssignmentsRole).($_).AssignmentScopeTenMgSubRgRes -eq 'Tenant' } )).count
    $totalRoleAssignmentsCountMG = (($htCacheAssignmentsRole).keys.where({ ($htCacheAssignmentsRole).($_).AssignmentScopeTenMgSubRgRes -eq 'MG' } )).count
    $totalRoleAssignmentsCountSub = (($htCacheAssignmentsRole).keys.where({ ($htCacheAssignmentsRole).($_).AssignmentScopeTenMgSubRgRes -eq 'Sub' } )).count
    if (-not $azAPICallConf['htParameters'].DoNotIncludeResourceGroupsAndResourcesOnRBAC) {
        $totalRoleAssignmentsCountRG = (($htCacheAssignmentsRole).keys.where({ ($htCacheAssignmentsRole).($_).AssignmentScopeTenMgSubRgRes -eq 'RG' } )).count
        $totalRoleAssignmentsCountRes = (($htCacheAssignmentsRole).keys.where({ ($htCacheAssignmentsRole).($_).AssignmentScopeTenMgSubRgRes -eq 'Res' } )).count
        $totalRoleAssignmentsResourceGroupsAndResourcesCount = $totalRoleAssignmentsCountRG + $totalRoleAssignmentsCountRes
    }
    else {
        $totalRoleAssignmentsResourceGroupsAndResourcesCount = (($htCacheAssignmentsRBACOnResourceGroupsAndResources).values).count
        $totalRoleAssignmentsCount = $totalRoleAssignmentsCount + $totalRoleAssignmentsResourceGroupsAndResourcesCount
    }

    $totalRoleDefinitionsCustomCount = ((($htCacheDefinitionsRole).keys.where({ ($htCacheDefinitionsRole).($_).IsCustom -eq $True } ))).count
    $totalBlueprintDefinitionsCount = ((($htCacheDefinitionsBlueprint).keys)).count
    $totalBlueprintAssignmentsCount = (($htCacheAssignmentsBlueprint).keys).count
    $totalResourceTypesCount = ($resourceTypesDiagnosticsArray).Count

    Write-Host " Total Management Groups: $totalMgCount (depth $mgDepth)"
    $htDailySummary.'ManagementGroups' = $totalMgCount
    Write-Host " Total Subscriptions: $totalSubIncludedAndExcludedCount ($totalSubCount included; $totalSubOutOfScopeCount out-of-scope)"
    $htDailySummary.'Subscriptions' = $totalSubCount
    $htDailySummary.'SubscriptionsOutOfScope' = $totalSubOutOfScopeCount
    Write-Host " Total Custom Policy definitions: $tenantCustomPoliciesCount"
    $htDailySummary.'PolicyDefinitionsCustom' = $tenantCustomPoliciesCount
    Write-Host " Total Custom PolicySet definitions: $tenantCustompolicySetsCount"
    $htDailySummary.'PolicySetDefinitionsCustom' = $tenantCustompolicySetsCount
    Write-Host " Total Policy assignments: $($totalPolicyAssignmentsCount)"
    $htDailySummary.'PolicyAssignments' = $totalPolicyAssignmentsCount
    Write-Host " Total Policy assignments ManagementGroups $($totalPolicyAssignmentsCountMg)"
    $htDailySummary.'PolicyAssignments_ManagementGroups' = $totalPolicyAssignmentsCountMg
    Write-Host " Total Policy assignments Subscriptions $($totalPolicyAssignmentsCountSub)"
    $htDailySummary.'PolicyAssignments_Subscriptions' = $totalPolicyAssignmentsCountSub
    Write-Host " Total Policy assignments ResourceGroups: $($totalPolicyAssignmentsCountRg)"
    $htDailySummary.'PolicyAssignments_ResourceGroups' = $totalPolicyAssignmentsCountRg
    Write-Host " Total Custom Role definitions: $totalRoleDefinitionsCustomCount"
    $htDailySummary.'RoleDefinitionsCustom' = $totalRoleDefinitionsCustomCount
    Write-Host " Total Role assignments: $totalRoleAssignmentsCount"
    $htDailySummary.'TotalRoleAssignments' = $totalRoleAssignmentsCount
    Write-Host " Total Role assignments (Tenant): $totalRoleAssignmentsCountTen"
    $htDailySummary.'TotalRoleAssignments_Tenant' = $totalRoleAssignmentsCountTen
    Write-Host " Total Role assignments (ManagementGroups): $totalRoleAssignmentsCountMG"
    $htDailySummary.'TotalRoleAssignments_ManagementGroups' = $totalRoleAssignmentsCountMG
    Write-Host " Total Role assignments (Subscriptions): $totalRoleAssignmentsCountSub"
    $htDailySummary.'TotalRoleAssignments_Subscriptions' = $totalRoleAssignmentsCountSub
    Write-Host " Total Role assignments (ResourceGroups and Resources): $totalRoleAssignmentsResourceGroupsAndResourcesCount"
    $htDailySummary.'TotalRoleAssignments_RgRes' = $totalRoleAssignmentsResourceGroupsAndResourcesCount
    Write-Host " Total Blueprint definitions: $totalBlueprintDefinitionsCount"
    $htDailySummary.'Blueprints' = $totalBlueprintDefinitionsCount
    Write-Host " Total Blueprint assignments: $totalBlueprintAssignmentsCount"
    $htDailySummary.'BlueprintAssignments' = $totalBlueprintAssignmentsCount
    Write-Host " Total Resources: $totalResourceCount"
    $htDailySummary.'Resources' = $totalResourceCount
    Write-Host " Total Resource Types: $totalResourceTypesCount"
    $htDailySummary.'ResourceTypes' = $totalResourceTypesCount

    $rbacUnique = $rbacAll | Sort-Object -Property RoleAssignmentId -Unique
    $rbacUniqueObjectIds = $rbacUnique | Sort-Object -Property ObjectId -Unique
    $rbacUniqueObjectIdsNonPIM = $rbacUnique.where({ $_.RoleAssignmentPIMRelated -eq $false } ) | Sort-Object -Property ObjectId -Unique
    $rbacUniqueObjectIdsPIM = $rbacUnique.where({ $_.RoleAssignmentPIMRelated -eq $true } ) | Sort-Object -Property ObjectId -Unique

    if ($rbacUniqueObjectIds.Count -gt 0) {
        $rbacUniqueObjectIdsGrouped = $rbacUniqueObjectIds | Group-Object -Property ObjectType
        foreach ($principalType in $rbacUniqueObjectIdsGrouped) {
            $htDailySummary."TotalUniquePrincipalWithPermission_$($principalType.Name)" = $principalType.Count
        }
        $htDailySummary.'TotalUniquePrincipalWithPermission_SP' = $rbacUniqueObjectIds.where({ $_.ObjectType -like 'SP*' } ).count
        $htDailySummary.'TotalUniquePrincipalWithPermission_User' = $rbacUniqueObjectIds.where({ $_.ObjectType -like 'User*' } ).count
    }

    if ($rbacUniqueObjectIdsNonPIM.Count -gt 0) {
        $rbacUniqueObjectIdsNonPIMGrouped = $rbacUniqueObjectIdsNonPIM | Group-Object -Property ObjectType
        foreach ($principalType in $rbacUniqueObjectIdsNonPIMGrouped) {
            $htDailySummary."TotalUniquePrincipalWithPermissionStatic_$($principalType.Name)" = $principalType.Count
        }
        $htDailySummary.'TotalUniquePrincipalWithPermissionStatic_SP' = $rbacUniqueObjectIdsNonPIM.where({ $_.ObjectType -like 'SP*' } ).count
        $htDailySummary.'TotalUniquePrincipalWithPermissionStatic_User' = $rbacUniqueObjectIdsNonPIM.where({ $_.ObjectType -like 'User*' } ).count
    }

    if ($rbacUniqueObjectIdsPIM.Count -gt 0) {
        $rbacUniqueObjectIdsPIMGrouped = $rbacUniqueObjectIdsPIM | Group-Object -Property ObjectType
        foreach ($principalType in $rbacUniqueObjectIdsPIMGrouped) {
            $htDailySummary."TotalUniquePrincipalWithPermissionPIM_$($principalType.Name)" = $principalType.Count
        }
        $htDailySummary.'TotalUniquePrincipalWithPermissionPIM_SP' = $rbacUniqueObjectIdsPIM.where({ $_.ObjectType -like 'SP*' } ).count
        $htDailySummary.'TotalUniquePrincipalWithPermissionPIM_User' = $rbacUniqueObjectIdsPIM.where({ $_.ObjectType -like 'User*' } ).count
    }

    $endSummarizeDataCollectionResults = Get-Date
    Write-Host " Summary data collection duration: $((NEW-TIMESPAN -Start $startSummarizeDataCollectionResults -End $endSummarizeDataCollectionResults).TotalSeconds) seconds"
    showMemoryUsage
    #endregion summarizeDataCollectionResults
}

$html = @"
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <title>AzGovViz</title>
    <script type="text/javascript">
        var link = document.createElement( "link" );
        rand = Math.floor(Math.random() * 99999);
        link.href = "https://www.azadvertizer.net/azgovvizv4/css/azgovvizversion.css?rnd=" + rand;
        link.type = "text/css";
        link.rel = "stylesheet";
        link.media = "screen,print";
        document.getElementsByTagName( "head" )[0].appendChild( link );
    </script>
    <link rel="stylesheet" type="text/css" href="https://www.azadvertizer.net/azgovvizv4/css/azgovvizmain_004_047.css">
    <script src="https://www.azadvertizer.net/azgovvizv4/js/jquery-3.6.0.min.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/jquery-ui-1.13.0.min.js"></script>
    <script type="text/javascript" src="https://www.azadvertizer.net/azgovvizv4/js/highlight_v004_002.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/fontawesome-0c0b5cbde8.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/tablefilter/tablefilter.js"></script>
    <link rel="stylesheet" href="https://www.azadvertizer.net/azgovvizv4/css/highlight-10.5.0.min.css">
    <script src="https://www.azadvertizer.net/azgovvizv4/js/highlight-10.5.0.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <link rel="stylesheet" type="text/css" href="https://www.azadvertizer.net/azgovvizv4/css/jsonviewer_v01.css">
    <script type="text/javascript" src="https://www.azadvertizer.net/azgovvizv4/js/jsonviewer_v02.js"></script>

    <script>
        `$(window).on('load', function () {
            // Animate loader off screen
            `$(".se-pre-con").fadeOut("slow");;
        });
    </script>

    <script>
    // Quick and simple export target #table_id into a csv
    function download_table_as_csv_semicolon(table_id) {
        // Select rows from table_id
        var rows = document.querySelectorAll('table#' + table_id + ' tr');
        // Construct csv
        var csv = [];
        if (window.helpertfConfig4TenantSummary_roleAssignmentsAll !== 1){
            for (var i = 0; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll('td, th');
                for (var j = 0; j < cols.length; j++) {
                    // Clean innertext to remove multiple spaces and jumpline (break csv)
                    var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                    // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
                    data = data.replace(/"/g, '""');
                    // Push escaped string
                    row.push('"' + data + '"');
                }
                csv.push(row.join(';'));
            }
        }
        else{
            for (var i = 1; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll('td, th');
                for (var j = 0; j < cols.length; j++) {
                    // Clean innertext to remove multiple spaces and jumpline (break csv)
                    var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                    // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
                    data = data.replace(/"/g, '""');
                    // Push escaped string
                    row.push('"' + data + '"');
                }
                csv.push(row.join(';'));
            }
        }
        var csv_string = csv.join('\n');
        // Download it
        var filename = 'export_' + table_id + '_' + new Date().toLocaleDateString('en-CA') + '.csv';
        var link = document.createElement('a');
        link.style.display = 'none';
        link.setAttribute('target', '_blank');
        link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    </script>

    <script>
    // Quick and simple export target #table_id into a csv
    function download_table_as_csv_comma(table_id) {
        // Select rows from table_id
        var rows = document.querySelectorAll('table#' + table_id + ' tr');
        // Construct csv
        var csv = [];
        if (window.helpertfConfig4TenantSummary_roleAssignmentsAll !== 1){
            for (var i = 0; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll('td, th');
                for (var j = 0; j < cols.length; j++) {
                    // Clean innertext to remove multiple spaces and jumpline (break csv)
                    var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                    // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
                    data = data.replace(/"/g, '""');
                    // Push escaped string
                    row.push('"' + data + '"');
                }
                csv.push(row.join(','));
            }
        }
        else{
            for (var i = 1; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll('td, th');
                for (var j = 0; j < cols.length; j++) {
                    // Clean innertext to remove multiple spaces and jumpline (break csv)
                    var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                    // Escape double-quote with double-double-quote (see https://stackoverflow.com/questions/17808511/properly-escape-a-double-quote-in-csv)
                    data = data.replace(/"/g, '""');
                    // Push escaped string
                    row.push('"' + data + '"');
                }
                csv.push(row.join(','));
            }
        }
        var csv_string = csv.join('\n');
        // Download it
        var filename = 'export_' + table_id + '_' + new Date().toLocaleDateString('en-CA') + '.csv';
        var link = document.createElement('a');
        link.style.display = 'none';
        link.setAttribute('target', '_blank');
        link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    </script>
</head>
"@

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
    if (-not $NoSingleSubscriptionOutput) {

        if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
            $HTMLPath = "HTML-Subscriptions_$($ManagementGroupId)"
            if (Test-Path -LiteralPath "$($outputPath)$($DirectorySeparatorChar)$($HTMLPath)") {
                Write-Host ' Cleaning old state (Pipeline only)'
                Remove-Item -Recurse -Force "$($outputPath)$($DirectorySeparatorChar)$($HTMLPath)"
            }
        }
        else {
            $HTMLPath = "HTML-Subscriptions_$($ManagementGroupId)_$($fileTimestamp)"
            Write-Host " Creating new state ($($HTMLPath)) (local only))"
        }

        $null = new-item -Name $HTMLPath -ItemType directory -path $outputPath

        $htmlSubscriptionOnlyStart = $html
        $htmlSubscriptionOnlyStart += @'
    <body>
        <div class="se-pre-con"></div>
        <div class="tree">

        </div>

        <div class="hierprnt" id="hierprnt">
            <div class="hierarchyTables" id="hierarchyTables">
                <p class="pbordered">ScopeInsights</p>
                <table class="subTable">
'@

        $htmlSubscriptionOnlyEnd = @'
</table>
</div>
    </div>
    <div class="footer">
        <div class="VersionDiv VersionLatest"></div>
        <div class="VersionDiv VersionThis"></div>
        <div class="VersionAlert"></div>
    </div>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/toggle_v004_004.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/collapsetable_v004_001.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/fitty_v004_001.min.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/version_v004_002.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/autocorrectOff_v004_001.js"></script>
    <script>
        fitty('#fitme', {
            minSize: 7,
            maxSize: 10
        });
    </script>
</body>

</html>
'@
    }

    $htmlShowHideScopeInfo =
    @"
<p>
    <button id="showHideScopeInfo">Hide<br>ScopeInfo</button>
    <script>
        `$("#showHideScopeInfo").click(function() {
            if (`$(this).html() == "Hide<br>ScopeInfo") {
                `$(this).html("Show<br>ScopeInfo");
                jQuery('.extraInfoContent').hide();
            } else {
                `$(this).html("Hide<br>ScopeInfo");
                jQuery('.extraInfoContent').show();
            };
        });
    </script>
</p>
"@
}
else {
    $htmlShowHideScopeInfo = ''
}

$html += @"
<body>
    <div class="se-pre-con"></div>
    <div class="tree">
        <div class="hierarchyTree" id="hierarchyTree">
            <div class="treeFeatureSel">
                <p class="pbordered pborderedspecial">HierarchyMap</p>
                $($htmlShowHideScopeInfo)
            </div>
"@

$html += @'
<ul>
    <li id="first">
'@

if ($tenantDisplayName) {
    $tenantDetailsDisplay = "$tenantDisplayName<br>$tenantDefaultDomain<br>$($azAPICallConf['checkContext'].Tenant.Id)"
}
else {
    $tenantDetailsDisplay = "$($azAPICallConf['checkContext'].Tenant.Id)"
}

$tenantRoleAssignmentCount = 0
if ($htMgAtScopeRoleAssignments.tenantLevelRoleAssignments) {
    $tenantRoleAssignmentCount = $htMgAtScopeRoleAssignments.tenantLevelRoleAssignments.AssignmentsCount
}
$html += @'
                        <a class="tenant">
                            <div class="main">

                                <div class="extraInfo">
                                    <div class="extraInfoContent">
                                    <div class="extraInfoPlchldr"></div>
'@

$html += @'
                                            </div>
                                            <div class="treeMgLogo">
                                                <img class="imgTreeLogoTenant" src="https://www.azadvertizer.net/azgovvizv4/icon/Azurev2.png">
                                            </div>
                                            <div class="extraInfoContent">
'@
if ($tenantRoleAssignmentCount -gt 0) {
    $html += @"
                                            <div class="extraInfoRoleAss">
                                                <abbr class="abbrTree" title="$($tenantRoleAssignmentCount) Role assignments">$($tenantRoleAssignmentCount)</abbr>
                                            </div>
"@
}
else {
    $html += @'
    <div class="extraInfoPlchldr"></div>
'@
}
$html += @"
                                    </div>
                                </div>

                                <div class="fitme" id="fitme">$($tenantDetailsDisplay)
                                </div>
                            </div>
                        </a>

"@

if ($getMgParentName -eq 'Tenant Root') {
    $html += @'

            <ul>
'@
}
else {
    if ($parentMgNamex -eq $parentMgIdx) {
        $mgNameAndOrId = $parentMgNamex
    }
    else {
        $mgNameAndOrId = "$parentMgNamex<br><i>$parentMgIdx</i>"
    }

    if ($tenantDisplayName) {
        $tenantDetailsDisplay = "$tenantDisplayName<br>$tenantDefaultDomain<br>"
    }
    else {
        $tenantDetailsDisplay = ''
    }

    $policiesMgScoped = ($htCacheDefinitionsPolicy).values.where({ $_.ScopeMgSub -eq 'Mg' })
    $policySetsMgScoped = ($htCacheDefinitionsPolicySet).values.where({ $_.ScopeMgSub -eq 'Mg' })
    $roleAssignmentsMg = (($htCacheAssignmentsRole).values.where({ $_.AssignmentScopeTenMgSubRgRes -eq 'Mg' }))

    foreach ($parentMgId in $htManagementGroupsMgPath.($ManagementGroupId).ParentNameChain) {
        if ($parentMgId -eq $defaultManagementGroupId) {
            $classdefaultMG = 'defaultMG'
        }
        else {
            $classdefaultMG = ''
        }

        $mgPolicyAssignmentCount = ($totalPolicyAssignmentsMg.where({ $_.AssignmentScopeId -eq $parentMgId })).Count
        $mgPolicyPolicySetScopedCount = ($policiesMgScoped.where({ $_.ScopeId -eq $parentMgId }).Count) + ($policySetsMgScoped.where({ $_.ScopeId -eq $parentMgId }).Count)
        $mgIdRoleAssignmentCount = $roleAssignmentsMg.where({ $_.AssignmentScopeId -eq $parentMgId }).Count

        $html += @"
        <ul>

                        <li><a class="mgnonradius parentmgnotaccessible $($classdefaultMG)">
                        <div class="main">

                        <div class="extraInfo">
                            <div class="extraInfoContent">
"@
        if ($mgPolicyAssignmentCount -gt 0 -or $mgPolicyPolicySetScopedCount -gt 0) {
            if ($mgPolicyAssignmentCount -gt 0 -and $mgPolicyPolicySetScopedCount -gt 0) {
                $html += @"
                                <div class="extraInfoPolicyAss1">
                                    <abbr class="abbrTree" title="$($mgPolicyAssignmentCount) Policy assignments">$($mgPolicyAssignmentCount)</abbr>
                                </div>
                                <div class="extraInfoPolicyScoped1">
                                    <abbr class="abbrTree" title="$($mgPolicyPolicySetScopedCount) Policy/PolicySet definitions scoped">$($mgPolicyPolicySetScopedCount)</abbr>
                                </div>
"@
            }
            else {
                if ($mgPolicyAssignmentCount -gt 0) {
                    $html += @"
                                    <div class="extraInfoPolicyAss0">
                                        <abbr class="abbrTree" title="$($mgPolicyAssignmentCount) Policy assignments">$($mgPolicyAssignmentCount)</abbr>
                                    </div>
"@
                }
                if ($mgPolicyPolicySetScopedCount -gt 0) {
                    $html += @"
                                    <div class="extraInfoPolicyScoped0">
                                        <abbr class="abbrTree" title="$($mgPolicyPolicySetScopedCount) Policy/PolicySet definitions scoped">$($mgPolicyPolicySetScopedCount)</abbr>
                                    </div>
"@
                }
            }
        }
        else {
            $html += @'
<div class="extraInfoPlchldr"></div>
'@
        }
        $html += @'
                                    </div>
                                    <div class="treeMgLogo">
                                        <img class="imgTreeLogo" src="https://www.azadvertizer.net/azgovvizv4/icon/Icon-general-11-Management-Groups.svg">
                                    </div>
                                    <div class="extraInfoContent">
'@
        if ($mgIdRoleAssignmentCount -gt 0) {
            $html += @"
                                    <div class="extraInfoRoleAss">
                                        <abbr class="abbrTree" title="$($mgIdRoleAssignmentCount) Role assignments">$($mgIdRoleAssignmentCount)</abbr>
                                    </div>
"@
        }
        else {
            $html += @'
<div class="extraInfoPlchldr"></div>
'@
        }
        $html += @"
                            </div>
                        </div>

                        <div class="fitme" id="fitme">$($parentMgId)
                        </div>
                    </div>
                </a>
"@
    }
    $html += @'
<ul>
'@

}

$starthierarchyMap = Get-Date
Write-Host ' Building HierarchyMap'

HierarchyMgHTML -mgChild $ManagementGroupId
showMemoryUsage
#[System.GC]::Collect()

$endhierarchyMap = Get-Date
Write-Host " Building HierarchyMap duration: $((NEW-TIMESPAN -Start $starthierarchyMap -End $endhierarchyMap).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $starthierarchyMap -End $endhierarchyMap).TotalSeconds) seconds)"

if ($getMgParentName -eq 'Tenant Root') {
    $html += @'
                    </ul>
                </li>
            </ul>
        </div>
    </div>
'@
}
else {
    $html += @'
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
'@
}

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {

    $html += @'
    <div class="summprnt" id="summprnt">
    <div class="summary" id="summary"><p class="pbordered">TenantSummary</p>
'@

    $html | Set-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $html = $null

    $startSummary = Get-Date

    processTenantSummary
    showMemoryUsage

    #region BuildDailySummaryCSV
    $dailySummary4ExportToCSV = [System.Collections.ArrayList]@()
    foreach ($entry in $htDailySummary.keys | sort-Object) {
        $null = $dailySummary4ExportToCSV.Add([PSCustomObject]@{
                capability = $entry
                count      = $htDailySummary.($entry)
            })
    }
    Write-Host " Exporting DailySummary CSV '$($outputPath)$($DirectorySeparatorChar)$($fileName)_DailySummary.csv'"
    $dailySummary4ExportToCSV | Export-Csv -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName)_DailySummary.csv" -Delimiter "$csvDelimiter" -NoTypeInformation
    #endregion BuildDailySummaryCSV

    #[System.GC]::Collect()

    $endSummary = Get-Date
    Write-Host " Building TenantSummary duration: $((NEW-TIMESPAN -Start $startSummary -End $endSummary).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startSummary -End $endSummary).TotalSeconds) seconds)"

    $html += @'
    </div><!--summary-->
    </div><!--summprnt-->

    <div class="definitioninsightsprnt" id="definitioninsightsprnt">
    <div class="definitioninsights" id="definitioninsights"><p class="pbordered">DefinitionInsights</p>
'@
    $html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
    $html = $null

    processDefinitionInsights
    showMemoryUsage
    #[System.GC]::Collect()

    $html += @'
    </div><!--definitionInsights-->
    </div><!--definitionInsightsprnt-->
'@

    if ((-not $NoScopeInsights) -or (-not $NoSingleSubscriptionOutput)) {

        if ((-not $NoScopeInsights)) {
            $html += @'
    <div class="hierprnt" id="hierprnt">
        <div class="hierarchyTables" id="hierarchyTables"><p class="pbordered">ScopeInsights</p>
'@
            $html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force
            $html = $null
            Write-Host ' Building ScopeInsights'
        }

        $startHierarchyTable = Get-Date
        $script:scopescnter = 0
        if ($azAPICallConf['htParameters'].NoResources -eq $false) {
            if ($azAPICallConf['htParameters'].DoPSRule -eq $true) {
                $grpPSRuleSubscriptions = $psRuleDataSelection | group-object -Property subscriptionId
                $grpPSRuleManagementGroups = $psRuleDataSelection | group-object -Property mgPath
            }
        }
        if ($arrayFeaturesAll.Count -gt 0) {
            $script:subFeaturesGroupedBySubscription = $arrayFeaturesAll | Group-Object -property subscriptionId
        }
        if ($arrayOrphanedResourcesSlim.Count -gt 0) {
            $arrayOrphanedResourcesGroupedBySubscription = $arrayOrphanedResourcesSlim | Group-Object subscriptionId
        }
        processScopeInsights -mgChild $ManagementGroupId -mgChildOf $getMgParentId
        showMemoryUsage
        #[System.GC]::Collect()

        $endHierarchyTable = Get-Date
        Write-Host " Building ScopeInsights duration: $((NEW-TIMESPAN -Start $startHierarchyTable -End $endHierarchyTable).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startHierarchyTable -End $endHierarchyTable).TotalSeconds) seconds)"

        if ((-not $NoScopeInsights)) {
            $html += @'
        </div>
    </div>
'@
        }
    }
}

$html += @'
    <div class="footer">
    <div class="VersionDiv VersionLatest"></div>
    <div class="VersionDiv VersionThis"></div>
    <div class="VersionAlert"></div>
'@

if ($azAPICallConf['htParameters'].HierarchyMapOnly -eq $false) {
    $endAzGovVizHTML = Get-Date
    $AzGovVizHTMLDuration = (NEW-TIMESPAN -Start $startAzGovViz -End $endAzGovVizHTML).TotalMinutes
    $paramsUsed += "Creation duration: $AzGovVizHTMLDuration minutes &#13;"
    if (-not $NoScopeInsights) {
        $html += @"
        <abbr style="text-decoration:none" title="$($paramsUsed)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr> <button id="hierarchyTreeShowHide" onclick="toggleHierarchyTree()">Hide HierarchyMap</button> <button id="summaryShowHide" onclick="togglesummprnt()">Hide TenantSummary</button> <button id="definitionInsightsShowHide" onclick="toggledefinitioninsightsprnt()">Hide DefinitionInsights</button> <button id="hierprntShowHide" onclick="togglehierprnt()">Hide ScopeInsights</button> $azGovVizNewerVersionAvailableHTML
        <hr>
"@
    }
    else {
        $html += @"
        <abbr style="text-decoration:none" title="$($paramsUsed)"><i class="fa fa-question-circle" aria-hidden="true"></i></abbr> <button id="hierarchyTreeShowHide" onclick="toggleHierarchyTree()">Hide HierarchyMap</button> <button id="summaryShowHide" onclick="togglesummprnt()">Hide TenantSummary</button> <button id="definitionInsightsShowHide" onclick="toggledefinitioninsightsprnt()">Hide DefinitionInsights</button> $azGovVizNewerVersionAvailableHTML
"@

    }
}

$html += @'
    </div>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/toggle_v004_004.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/collapsetable_v004_001.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/fitty_v004_001.min.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/version_v004_002.js"></script>
    <script src="https://www.azadvertizer.net/azgovvizv4/js/autocorrectOff_v004_001.js"></script>
    <script>
        fitty('#fitme', {
            minSize: 7,
            maxSize: 10
        });
    </script>
</body>
</html>
'@

$html | Add-Content -Path "$($outputPath)$($DirectorySeparatorChar)$($fileName).html" -Encoding utf8 -Force

$endBuildHTML = Get-Date
Write-Host "Building HTML total duration: $((NEW-TIMESPAN -Start $startBuildHTML -End $endBuildHTML).TotalMinutes) minutes ($((NEW-TIMESPAN -Start $startBuildHTML -End $endBuildHTML).TotalSeconds) seconds)"
#endregion BuildHTML

buildMD
showMemoryUsage

if (-not $azAPICallConf['htParameters'].NoJsonExport) {
    buildJSON
    showMemoryUsage
}

buildPolicyAllJSON
showMemoryUsage

#endregion createoutputs

apiCallTracking -stage 'Summary' -spacing ''

$endAzGovViz = Get-Date
$durationProduct = (NEW-TIMESPAN -Start $startAzGovViz -End $endAzGovViz)
Write-Host "AzGovViz duration: $($durationProduct.TotalMinutes) minutes"

#end
$endTime = Get-Date -Format 'dd-MMM-yyyy HH:mm:ss'
Write-Host "End AzGovViz $endTime"

Write-Host 'Checking for errors'
if ($Error.Count -gt 0) {
    Write-Host "Dumping $($Error.Count) Errors (handled by AzGovViz):"
    $Error | Out-host
}
else {
    Write-Host 'Error count is 0'
}

stats

if ($DoTranscript) {
    Stop-Transcript
}

Write-Host ''
Write-Host '--------------------'
Write-Host 'AzGovViz completed successful' -ForegroundColor Green

showMemoryUsage

if ($Error.Count -gt 0) {
    Write-Host "Don't bother about dumped errors"
}

if ($DoPSRule) {
    $psRuleErrors = $psRuleDataSelection.where({ -not [string]::IsNullOrWhiteSpace($_.errorMsg) })
    if ($psRuleErrors) {
        Write-Host ''
        Write-Host "$($psRuleErrors.Count) 'PSRule for Azure' error(s) encountered"
        Write-Host "Please review the error(s) and consider filing an issue at the PSRule.Rules.Azure GitHub repository https://github.com/Azure/PSRule.Rules.Azure - thank you"
        $psRuleErrorsGrouped = $psRuleErrors | Group-Object -Property resourceType, errorMsg
        foreach ($errorGroupedByResourceTypeAndMessage in $psRuleErrorsGrouped) {
            Write-Host "$($errorGroupedByResourceTypeAndMessage.Count) x $($errorGroupedByResourceTypeAndMessage.Name)"
            Write-Host 'Resources:'
            foreach ($resourceId in $errorGroupedByResourceTypeAndMessage.Group.resourceId) {
                Write-Host " -$resourceId"
            }
        }
    }
}

#region infoNewAzGovVizVersionAvailable
if ($azGovVizNewerVersionAvailable) {
    if ($azAPICallConf['htParameters'].onAzureDevOpsOrGitHubActions) {
        Write-Host ''
        Write-Host "This AzGovViz version ($ProductVersion) is not up to date. Get the latest AzGovViz version ($azGovVizVersionOnRepositoryFull)!"
        Write-Host 'Check the AzGovViz history: https://github.com/JulianHayward/Azure-MG-Sub-Governance-Reporting/blob/master/history.md'
    }
}
#endregion infoNewAzGovVizVersionAvailable
