@page "/generate"
@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using System.Text;
@using AzureNamingTool.Shared.Components;
@inject ILogger<Generate> Logger
@inject NavigationManager NavigationManager
@inject StateContainer state
@inject IJSRuntime JsRuntime
@inject IToastService toastService

<PageTitle>Azure Naming Tool - Generate</PageTitle>
<div class="card @theme.ThemeStyle">
    <div class="card-body">
        <div style="float:left;">
            <h1>
                Generate
            </h1>
        </div>
        <div style="float:right;">
            <button class="btn btn-secondary" title="Instructions" @onclick="@(e => ShowInstructionsModal())">
                <span class="oi oi-document" aria-hidden="true"></span> Documentation
            </button>
        </div>
        <div style="clear:both;"></div>
        <div class="mb-3">This page generates a name for the selected resource type.</div>
        <div class="card mb-3">
            <h5 class="card-header bg-default text-black">
                Instructions
            </h5>
            <div class="card card-body @theme.ThemeStyle">
                <ol>
                    <li>
                        Select the desired Resource Type / Resource Types
                    </li>
                    <li>
                        Review the Naming Guidelines (for single resource type)
                    </li>
                    <li>
                        Select the component options
                    </li>
                    <li>
                        Click <strong>Generate</strong> to generate the Azure resource name(s)
                    </li>
                    <li>
                        View generated names in the <a href="/generatednameslog">Generated Names Log</a>
                    </li>
                </ol>
            </div>
        </div>
        @if (servicesData.ResourceTypes == null)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <EditForm Model="@resourceNameRequest" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div id="generator">
                    <div class="card @theme.ThemeStyle mb-3">
                        <h5 class="card-header text-white bg-secondary">
                            Generate Mode
                        </h5>
                        <div class="card card-body @theme.ThemeStyle">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="generateselect" id="singleselect" value="single" checked @onclick="@(e => OnGenerateModeChange("single"))">
                                <label class="form-check-label" for="singleselect">
                                    <strong>Generate Single Resouce Type Name</strong><br />This option will allow the generation of a single resource type name using the selected components.
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="generateselect" id="multiselect" value="multi" @onclick="@(e => OnGenerateModeChange("multi"))">
                                <label class="form-check-label" for="multiselect">
                                    <strong>Generate Multiple Resource Type Names</strong><br />This option will allow the generatation of names for multiple resource types using the selected components. <span class="warning-message">All components will be required.</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="card @theme.ThemeStyle mb-3 @resourcetypeVisible" id="single">
                        <h5 class="card-header text-white bg-secondary">
                            Resource Type
                        </h5>
                        <div class="card card-body @theme.ThemeStyle">
                            <p>
                                Select the desired resource type.
                            </p>
                            <InputSelect title="Resource Category" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceTypeCategory)"
                                     Value="@selectedResourceTypeCategory"
                                     ValueChanged="@((string value) => OnCategoryChanged(value))" aria-label="Select category">
                                <option value="">Select a resource type provider (OPTIONAL)</option>
                                @foreach (var category in @categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>

                            <InputSelect title="Resource Type" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceType)"
                                     Value="@selectedResourceType"
                                     ValueChanged="@((string value) => OnTypeChanged(value))" aria-label="Select type">
                                <option value="">Select a resource type</option>
                                @foreach (var type in @ResourceTypeService.GetFilteredResourceTypes(servicesData.ResourceTypes, selectedResourceTypeCategory))
                                {
                                    @if (type.Property != "")
                                    {
                                        <option value="@type.Id">@type.Resource - @type.Property (@type.ShortName)</option>
                                    }
                                    else
                                    {
                                        <option value="@type.Id">@type.Resource (@type.ShortName)</option>
                                    }
                                }
                            </InputSelect>

                            @if (currentResourceType != null)
                            {
                                @if (!filteredscopes.Contains(currentResourceType.Scope))
                                {
                                    <table class="table table-warning w-100 mt-3" style="margin-bottom:0;">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <strong>This resource has a lower-level scope and does not require a unique name.</strong><a id="@currentResourceType.Id"></a>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                }
                                <div id="guidelines" class="card mt-3">
                                    <div class="card-header bg-default text-black">
                                        <a id="NamingGuidlines" class="link-dark text-decoration-none" data-toggle="collapse" href="#namingguidelines" role="button" aria-expanded="false" aria-controls="namingguidelines">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Naming Guidelines
                                        </a>
                                    </div>
                                    <div class="collapse card card-body @theme.ThemeStyle" id="namingguidelines">
                                        @if (currentResourceType.LengthMin != "")
                                        {
                                            <div><strong>Minimum Length:</strong> @currentResourceType.LengthMin</div>
                                        }
                                        @if (currentResourceType.LengthMax != "")
                                        {
                                            <div><strong>Maximum Length:</strong> @currentResourceType.LengthMax</div>
                                        }
                                        @if (currentResourceType.ValidText != "")
                                        {
                                            <div><strong>Valid Text:</strong> @currentResourceType.ValidText</div>
                                        }
                                        @if (currentResourceType.Optional != "")
                                        {
                                            <div><strong>Optional:</strong> @currentResourceType.Optional</div>
                                        }
                                        @if (currentResourceType.Exclude != "")
                                        {
                                            <div><strong>Excluded:</strong> @currentResourceType.Exclude</div>
                                        }
                                        @if (currentResourceType.Regx != "")
                                        {
                                            <div><strong>Regx:</strong> @currentResourceType.Regx</div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="card @theme.ThemeStyle mb-3 @resourcetypesVisible" id="multi">
                        <h5 class="card-header text-white bg-secondary">
                            Resource Types
                        </h5>
                        <div class="card card-body @theme.ThemeStyle">
                            <p>The current selected resource types.</p>
                            <ul>
                                @foreach (string id in multiselectedResourceTypes)
                                {
                                    ResourceType thistype = servicesData.ResourceTypes.Find(x => x.Id == Convert.ToInt32(id));
                                    <li>
                                        @if (thistype.Property != "")
                                        {
                                            <span>@thistype.Resource - @thistype.Property (@thistype.ShortName)</span>
                                        }
                                        else
                                        {
                                            <span>@thistype.Resource (@thistype.ShortName)</span>
                                        }
                                    </li>
                                }
                            </ul>
                            <div class="m-3">
                                <button type="button" title="Select" class="btn btn-primary" @onclick="@(e => OpenMultiSelectModal(false))">Select</button>
                            </div>

                        </div>
                    </div>

                    @if (selectedResourceType != "")
                    {
                        @if (componentsVisible == "collapse")
                        {
                            <div class="mt-3 mb-3">
                                <button type="button" title="Show/Hide Components" class="btn btn-primary" data-toggle="collapse" data-target="#components">Show/Hide Components</button>
                            </div>
                        }

                        <div class="@componentsVisible" id="components">
                            @foreach (ResourceComponent resourceComponent in servicesData.ResourceComponents)
                            {
                                if ((!selectedResourceTypeExclude.ToLower().Split(',').Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true))) || (multiselectedResourceTypes.Count > 0))
                                {
                                    switch (resourceComponent.Name)
                                    {
                                        case "ResourceEnvironment":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("environment")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceEnvironment)"
                                         Value="@selectedResourceEnvironment"
                                         ValueChanged="@((string value) => OnComponentChanged("re",value))">
                                                        <option value="">Select an environment</option>
                                                        @foreach (var item in @servicesData.ResourceEnvironments)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceFunction":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("function")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceFunction)"
                                         Value="@selectedResourceFunction"
                                         ValueChanged="@((string value) => OnComponentChanged("rf",value))">
                                                        <option value="">Select a Function</option>
                                                        @foreach (var item in @servicesData.ResourceFunctions)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceInstance":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("instance")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputText title="@resourceComponent.DisplayName" class="@GetControlStyle()" id="ri" ValueExpression="@(()=>selectedResourceInstance)"
                                       Value="@selectedResourceInstance" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"
                                       ValueChanged="@((string value) => OnComponentChanged("ri",value))" />
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceLocation":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("location")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceLocation)"
                                         Value="@selectedResourceLocation"
                                         ValueChanged="@((string value) => OnComponentChanged("rl",value))">
                                                        <option value="">Select a location</option>
                                                        @foreach (var item in @servicesData.ResourceLocations)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceOrg":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("org")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceOrg)"
                                         Value="@selectedResourceOrg"
                                         ValueChanged="@((string value) => OnComponentChanged("ro",value))">
                                                        <option value="">Select an org</option>
                                                        @foreach (var item in @servicesData.ResourceOrgs)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceProjAppSvc":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("projappsvc")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceProjAppSvc)"
                                         Value="@selectedResourceProjAppSvc"
                                         ValueChanged="@((string value) => OnComponentChanged("rpas",value))">
                                                        <option value="">Select a project/app/service</option>
                                                        @foreach (var item in @servicesData.ResourceProjAppSvcs)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        case "ResourceUnitDept":
                                            <div class="card @theme.ThemeStyle mb-3">
                                                <h5 class="card-header text-white bg-secondary">
                                                    @resourceComponent.DisplayName
                                                    @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains("unitdept")) && (multiselectedResourceTypes.Count == 0)))
                                                    {
                                                        @((MarkupString)optional)
                                                    }
                                                </h5>
                                                <div class="card card-body @theme.ThemeStyle">
                                                    <InputSelect title="@resourceComponent.DisplayName" class="@GetControlStyle()" ValueExpression="@(()=>selectedResourceUnitDept)"
                                         Value="@selectedResourceUnitDept"
                                         ValueChanged="@((string value) => OnComponentChanged("rud",value))">
                                                        <option value="">Select a unit/dept</option>
                                                        @foreach (var item in @servicesData.ResourceUnitDepts)
                                                        {
                                                            <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            break;
                                        default:
                                            @if (resourceComponent.IsCustom)
                                            {
                                                @if (!resourceComponent.IsFreeText)
                                                {
                                                    @if (servicesData.CustomComponents.Where(x => x.ParentComponent == GeneralHelper.NormalizeName(resourceComponent.Name, true)).Count() > 0)
                                                    {
                                                        <div class="card @theme.ThemeStyle mb-3">
                                                            <h5 class="card-header text-white bg-secondary">
                                                                @resourceComponent.Name
                                                                @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true))) && (multiselectedResourceTypes.Count == 0)))
                                                                {
                                                                    @((MarkupString)optional)
                                                                }
                                                            </h5>
                                                            <div class="card card-body @theme.ThemeStyle">
                                                                <select title="@resourceComponent.DisplayName" class="@GetControlStyle()" value="@selectedCustomComponents[GeneralHelper.NormalizeName(resourceComponent.Name, true)]" @onchange='(e  => OnCustomComponentChanged(e, GeneralHelper.NormalizeName(resourceComponent.Name, true)))'>
                                                                    <option value="">Select a component</option>
                                                                    @foreach (var item in @servicesData.CustomComponents.Where(x => x.ParentComponent == GeneralHelper.NormalizeName(resourceComponent.Name, true)))
                                                                    {
                                                                        <option value="@item.ShortName">@item.Name (@item.ShortName)</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="card @theme.ThemeStyle mb-3">
                                                        <h5 class="card-header text-white bg-secondary">
                                                            @resourceComponent.Name
                                                            @if (((selectedResourceTypeOptional.ToLower().Split(',').Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true))) && (multiselectedResourceTypes.Count == 0)))
                                                            {
                                                                @((MarkupString)optional)
                                                            }
                                                        </h5>
                                                        <div class="card card-body @theme.ThemeStyle">
                                                            <input title="@resourceComponent.DisplayName" class="@GetControlStyle()" type="text" @onchange="@((ui) => { OnCustomComponentChanged(ui, GeneralHelper.NormalizeName(resourceComponent.Name, true));})" />
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            break;
                                    }
                                }
                            }

                            @*<div class="card mb-3">
                    <h5 class="card-header bg-default text-black">
                    Delimiter (Configured by site administrator)
                    </h5>
                    <div class="card card-body @theme.ThemeStyle">
                    @resourceDelimiter.Name: @resourceDelimiter.Delimiter
                    </div>
                    </div>*@
                            <div class="mb-3">
                                <br />
                                <button class="btn btn-success" type="submit" title="Generate" disabled=@boolFormDisabled>
                                    <span class="oi oi-loop-circular" aria-hidden="true"></span> Generate
                                </button>
                            </div>
                        </div>
                        @if (@resourceNameRequestResponse != null)
                        {
                            <div class="card @resultClass text-white mt-3">
                                <div class="card-header">@resultHeader</div>
                                <div class="card-body">
                                    @if (@generatedName != null)
                                    {
                                        @if (@generatedName != "")
                                        {
                                            <div>
                                                <strong>Generated Name(s): </strong>
                                                @((MarkupString)generatedName)

                                                <button class="btn btn-primary" title="Export Generated Names" @onclick="@(e => OnExportGeneratedNames())">
                                                    Export Generated Names
                                                </button>
                                            </div>
                                        }
                                    }
                                    @if (@message != null)
                                    {
                                        @if (@message != "")
                                        {
                                            <div>
                                                <strong>Message: </strong>

                                                @foreach (var sub in message.Split('\n'))
                                                {
                                                    <div>
                                                        @sub
                                                    </div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </EditForm>
        }
    </div>
</div>
@code {
    [CascadingParameter]
    protected ThemeInfo? theme { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private ServicesData servicesData = new();
    private ResourceDelimiter? resourceDelimiter;
    private string? selectedResourceEnvironment;
    private string? selectedResourceInstance;
    private string? selectedResourceLocation;
    private string? selectedResourceOrg;
    private string? selectedResourceProjAppSvc;
    private string? selectedResourceTypeCategory = "";
    private string? selectedResourceType = "";
    private string selectedResourceTypeExclude;
    private string selectedResourceTypeOptional;
    private Dictionary<string, string> selectedCustomComponents = new();
    private List<string> categories = new();
    private string? selectedResourceUnitDept;
    private string? selectedResourceFunction;
    private bool boolFormDisabled = true;
    private string? generatedName;
    private string? message;
    private string? resultClass;
    private string? resultHeader;
    private string? componentsVisible = "collapse in";
    private string? resourcetypeVisible = "";
    private string? resourcetypesVisible = "collapse";
    private string optional = " (OPTIONAL)";
    private string[] filteredscopes = new string[] { "resource group", "resource group & region", "region", "global", "subscription", "tenant" };
    private ResourceNameRequest resourceNameRequest = new();
    private ResourceNameResponse resourceNameRequestResponse;
    private ResourceType currentResourceType;
    private List<string> multiselectedResourceTypes = new();

    protected override async Task OnInitializedAsync()
    {
        await SetServicesData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (resourceDelimiter == null)
        {
            await SetServicesData();
        }
    }

    private async Task SetServicesData()
    {
        try
        {
            servicesData = await ServicesHelper.LoadServicesData(servicesData, false);
            List<ResourceType> filteredtypes = new List<ResourceType>();
            // Filter out the types w/o the scope
            foreach (ResourceType type in servicesData.ResourceTypes)
            {
                filteredtypes.Add(type);
            }
            servicesData.ResourceTypes = filteredtypes;

            // Get the list of categories
            categories = ResourceTypeService.GetTypeCategories(servicesData.ResourceTypes);

            resourceDelimiter = (ResourceDelimiter)servicesData.ResourceDelimiters[0];
            componentsVisible = "collapse show";
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
            toastService.ShowError("There was a problem loading the page. Please try again");
        }
    }

    private async Task HandleValidSubmit()
    {
        StringBuilder sbNames = new();
        StringBuilder sbMessage = new();
        generatedName = "";
        message = "";

        ResourceType resourceType = new();
        // Create the name request
        resourceNameRequest.ResourceEnvironment = selectedResourceEnvironment;
        resourceNameRequest.ResourceFunction = selectedResourceFunction;
        resourceNameRequest.ResourceInstance = selectedResourceInstance;
        resourceNameRequest.ResourceLocation = selectedResourceLocation;
        resourceNameRequest.ResourceOrg = selectedResourceOrg;
        resourceNameRequest.ResourceProjAppSvc = selectedResourceProjAppSvc;
        resourceNameRequest.ResourceUnitDept = selectedResourceUnitDept;
        resourceNameRequest.CustomComponents = selectedCustomComponents;

        sbNames.Append("<table class=\"table text-light generatednames\">");
        sbNames.Append("<thead>");
        sbNames.Append("<tr>");
        sbNames.Append("<th class\"w25\">Reource Type</th>");
        sbNames.Append("<th class\"w25\">Generated Name</th>");
        sbNames.Append("<th class\"w50\">Notes</th>");
        sbNames.Append("</tr>");
        sbNames.Append("</thead>");
        sbNames.Append("<tbody>");

        // Check the genrate mode
        if (multiselectedResourceTypes.Count == 0)
        {
            // Single type generation
            StringBuilder sbName = new();
            resourceType = servicesData.ResourceTypes.Find(x => x.Id == Convert.ToInt32(selectedResourceType));
            resourceNameRequest.ResourceType = resourceType.ShortName;
            resourceNameRequest.ResourceId = resourceType.Id;

            resourceNameRequestResponse = await ResourceNamingRequestService.RequestName(resourceNameRequest);

            // Prepare the response
            sbNames.Append("<tr>");
            if (resourceType.Property != "")
            {
                sbNames.Append("<td class=\"col-3\">" + @resourceType.Resource + " - " + @resourceType.Property + "</td>");
            }
            else
            {
                sbNames.Append("<td class=\"col-3\">" + @resourceType.Resource + "</td>");
            }
            sbNames.Append("<td class=\"col-3\">" + resourceNameRequestResponse.ResourceName + "</td>");
            sbNames.Append("<td class=\"col-3\">");
            if (resourceNameRequestResponse.Message != "")
            {
                sbNames.Append(resourceNameRequestResponse.Message);
            }
            sbNames.Append("</td>");
            sbNames.Append("</tr>");

            // Set the result container
            if (resourceNameRequestResponse.Success)
            {
                resultClass = "bg-success";
                resultHeader = "SUCCESS";
                componentsVisible = "collapse";
            }
            else
            {
                resultClass = "bg-danger";
                resultHeader = "FAILURE";
                componentsVisible = "collapse show";
            }
        }
        else
        {
            // Attempt to genrate name for each seelct types
            resultClass = "bg-success";
            foreach (string id in multiselectedResourceTypes)
            {
                resourceType = servicesData.ResourceTypes.Find(x => x.Id == Convert.ToInt32(id));
                resourceNameRequest.ResourceType = resourceType.ShortName;
                resourceNameRequest.ResourceId = resourceType.Id;
                resourceNameRequestResponse = await ResourceNamingRequestService.RequestName(resourceNameRequest);

                sbNames.Append("<tr>");
                if (resourceType.Property != "")
                {
                    sbNames.Append("<td class=\"col-3\">" + @resourceType.Resource + " - " + @resourceType.Property + "</td>");
                }
                else
                {
                    sbNames.Append("<td class=\"col-3\">" + @resourceType.Resource + "</td>");
                }
                sbNames.Append("<td class=\"col-3\">" + resourceNameRequestResponse.ResourceName + "</td>");
                sbNames.Append("<td class=\"col-3\">");
                if (resourceNameRequestResponse.Message != "")
                {
                    sbNames.Append(resourceNameRequestResponse.Message);
                }
                sbNames.Append("</td>");
                sbNames.Append("</tr>");

                // Set the  result container
                if (!resourceNameRequestResponse.Success)
                {
                    resultClass = "bg-danger";
                    resultHeader = "FAILURE";
                }
            }

        }

        sbNames.Append("</tbody>");
        sbNames.Append("</table>");

        // Always show the response
        generatedName = sbNames.ToString();
        componentsVisible = "collapse";
    }

    private async void OnGenerateModeChange(string mode)
    {
        ResetForm(true);

        if (mode == "multi")
        {
            toastService.ShowInfo("This option will require all current components to be selected.");
            // Show the multi select modal
            await OpenMultiSelectModal(true);
            resourcetypeVisible = "collapse";
            resourcetypesVisible = "";
        }
        else
        {
            // Show the single type selection
            resourcetypeVisible = "";
            resourcetypesVisible = "collapse";
        }
        StateHasChanged();
    }

    private async Task OpenMultiSelectModal(bool clearselection)
    {
        ResetForm(false);
        var parameters = new ModalParameters();
        parameters.Add("theme", theme);
        parameters.Add("multiselectedResourceTypes", multiselectedResourceTypes);
        var options = new ModalOptions()
            {
                HideCloseButton = false,
                UseCustomLayout = true,
            };

        var modal = Modal.Show<MultiTypeSelectModal>("Select Resource Types", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed)
        {
            multiselectedResourceTypes = result.Data as List<string>;
            if (multiselectedResourceTypes.Count > 0)
            {
                await OnTypeChanged(multiselectedResourceTypes[0].ToString());
                componentsVisible = "";
            }
            else
            {
                componentsVisible = "collapse";
            }
        }

        resourcetypeVisible = "collapse";
        resourcetypesVisible = "";
    }

    private void OnCategoryChanged(string value)
    {
        selectedResourceTypeCategory = value;
        selectedResourceType = "";
        componentsVisible = "collapse show";
    }

    private Task OnTypeChanged(string value)
    {
        try
        {
            resourceNameRequestResponse = null;
            // Assign the selected value to the Model
            selectedResourceType = value;

            if (selectedResourceType != "")
            {
                // Find the selected resoruce type
                currentResourceType = servicesData.ResourceTypes.Find((t) => t.Id == Convert.ToInt32(selectedResourceType));

                // Set the optional components
                selectedResourceTypeOptional = currentResourceType.Optional;

                // Set the excluded components
                selectedResourceTypeExclude = currentResourceType.Exclude;

                // Reset the selected items
                selectedResourceEnvironment = null;
                selectedResourceInstance = null;
                selectedResourceLocation = null;
                selectedResourceOrg = null;
                selectedResourceProjAppSvc = null;
                selectedResourceUnitDept = null;
                selectedResourceFunction = null;

                componentsVisible = "collapse show";

                // Check if all the components are optional for the resource type
                selectedCustomComponents.Clear();
                foreach (var component in servicesData.ResourceComponents)
                {
                    if (component.IsCustom)
                    {
                        selectedCustomComponents.Add(GeneralHelper.NormalizeName(component.Name, true), null);
                    }
                }

                ValidateForm();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("There was an error setting the resource type! Please try again.");
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
        }

        return Task.CompletedTask;
    }

    private Task OnComponentChanged(string sender, string value, string key = "")
    {
        switch (sender)
        {
            case "re":
                selectedResourceEnvironment = value;
                break;
            case "ri":
                selectedResourceInstance = value;
                break;
            case "rl":
                selectedResourceLocation = value;
                break;
            case "ro":
                selectedResourceOrg = value;
                break;
            case "rpas":
                selectedResourceProjAppSvc = value;
                break;
            case "rud":
                selectedResourceUnitDept = value;
                break;
            case "rf":
                selectedResourceFunction = value;
                break;
            case "cc":
                // Determine if the custom component aleady exists in the current collection
                if (selectedCustomComponents.ContainsKey(key))
                {
                    selectedCustomComponents[key] = value;
                }
                else
                {
                    // Add the selection
                    selectedCustomComponents.Add(key, value);
                }
                break;
        }

        ValidateForm();
        return Task.CompletedTask;
    }

    private void OnCustomComponentChanged(ChangeEventArgs e, string parentcomponent)
    {
        if (e.Value != "")
        {
            OnComponentChanged("cc", e.Value.ToString(), parentcomponent);
        }
        else
        {
            if (selectedCustomComponents.ContainsKey(parentcomponent))
            {
                selectedCustomComponents[parentcomponent] = null;
            }
            ValidateForm();
        }
    }

    private void ValidateForm()
    {
        if ((selectedResourceType != null) || (multiselectedResourceTypes.Count > 0))
        {
            boolFormDisabled = false;
            string nomalizedcomponentname;
            @foreach (ResourceComponent resourceComponent in servicesData.ResourceComponents)
            {
                nomalizedcomponentname = GeneralHelper.NormalizeName(resourceComponent.Name, true);
                // Check if the user is generating names for a single type or multiple types
                if (multiselectedResourceTypes.Count == 0)
                {
                    // Check if the component is excluded for the resource type
                    if (!selectedResourceTypeExclude.ToLower().Split(',').Contains(nomalizedcomponentname))
                    {
                        // Check if the component is optional for the resource type
                        if ((!selectedResourceTypeOptional.ToLower().Split(',').Contains(nomalizedcomponentname)))
                        {
                            switch (resourceComponent.Name)
                            {
                                case "ResourceEnvironment":
                                    if (selectedResourceEnvironment == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceEnvironment == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;

                                case "ResourceInstance":
                                    if (selectedResourceInstance == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceInstance == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                case "ResourceLocation":
                                    if (selectedResourceLocation == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceLocation == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                case "ResourceOrg":
                                    if (selectedResourceOrg == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceOrg == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                case "ResourceProjAppSvc":
                                    if (selectedResourceProjAppSvc == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceProjAppSvc == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                case "ResourceUnitDept":
                                    if (selectedResourceUnitDept == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceUnitDept == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                case "ResourceFunction":
                                    if (selectedResourceFunction == null)
                                    {
                                        boolFormDisabled = true;
                                    }
                                    else
                                    {
                                        if (selectedResourceFunction == "")
                                        {
                                            boolFormDisabled = true;
                                        }
                                    }
                                    break;
                                default:
                                    if (resourceComponent.IsCustom)
                                    {
                                        if (!resourceComponent.IsFreeText)
                                        {
                                            if (servicesData.CustomComponents.Where(x => x.ParentComponent == nomalizedcomponentname).Count() > 0)
                                            {
                                                // Make sure each component has a value
                                                if (selectedCustomComponents[nomalizedcomponentname] == null)
                                                {
                                                    boolFormDisabled = true;
                                                }
                                                else
                                                {
                                                    if (selectedCustomComponents[nomalizedcomponentname] == "")
                                                    {
                                                        boolFormDisabled = true;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            // Make sure each component has a value
                                            if (selectedCustomComponents[nomalizedcomponentname] == null)
                                            {
                                                boolFormDisabled = true;
                                            }
                                            else
                                            {
                                                if (selectedCustomComponents[nomalizedcomponentname] == "")
                                                {
                                                    boolFormDisabled = true;
                                                }
                                            }
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    // Ensure every component has a value, unless it's globally optional
                    switch (resourceComponent.Name)
                    {
                        case "ResourceEnvironment":
                            if (selectedResourceEnvironment == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceEnvironment == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;

                        case "ResourceInstance":
                            if (selectedResourceInstance == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceInstance == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        case "ResourceLocation":
                            if (selectedResourceLocation == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceLocation == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        case "ResourceOrg":
                            if (selectedResourceOrg == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceOrg == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        case "ResourceProjAppSvc":
                            if (selectedResourceProjAppSvc == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceProjAppSvc == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        case "ResourceUnitDept":
                            if (selectedResourceUnitDept == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceUnitDept == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        case "ResourceFunction":
                            if (selectedResourceFunction == null)
                            {
                                boolFormDisabled = true;
                            }
                            else
                            {
                                if (selectedResourceFunction == "")
                                {
                                    boolFormDisabled = true;
                                }
                            }
                            break;
                        default:
                            if (resourceComponent.IsCustom)
                            {
                                if (!resourceComponent.IsFreeText)
                                {
                                    if (servicesData.CustomComponents.Where(x => x.ParentComponent == nomalizedcomponentname).Count() > 0)
                                    {
                                        // Make sure each component has a value
                                        if (selectedCustomComponents[nomalizedcomponentname] == null)
                                        {
                                            boolFormDisabled = true;
                                        }
                                        else
                                        {
                                            if (selectedCustomComponents[nomalizedcomponentname] == "")
                                            {
                                                boolFormDisabled = true;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
    }

    private string GetControlStyle()
    {
        return "form-control " + theme.ThemeStyle;
    }

    private string GetCustomComponentValue(string key)
    {
        return selectedCustomComponents[key];
    }

    private async Task OnExportGeneratedNames()
    {
        await JsRuntime.InvokeVoidAsync("htmlToCSV", "generatednames.csv", "generatednames");
    }

    private void ResetForm(bool clearselection)
    {
        selectedResourceType = "";
        componentsVisible = "collapse show";
        currentResourceType = null;
        if (clearselection)
        {
            multiselectedResourceTypes.Clear();
        }
    }

    private async void ShowInstructionsModal()
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(InformationModal.message), null);
            parameters.Add(nameof(InformationModal.title), "Generate");
            parameters.Add(nameof(InformationModal.headerstyle), "bg-navcolor");
            parameters.Add(nameof(InformationModal.component), "generateinstructions");
            parameters.Add("theme", theme);

            var options = new ModalOptions()
                {
                    HideCloseButton = true,
                    UseCustomLayout = true
                };

            var modal = Modal.Show<InformationModal>("Instructions", parameters, options);
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
        }
    }
}