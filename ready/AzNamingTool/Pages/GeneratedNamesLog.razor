@page "/generatednameslog"
@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@inject ILogger<Configuration> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IToastService toastService
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Azure Naming Tool - Generated Names Log</PageTitle>
<div class="card  @theme.ThemeStyle">
    <div class="card-body">
        <div style="float:left;">
            <h1>
                Generated Names Log
            </h1>
        </div>
        <div style="float:right;">
            <button class="btn btn-secondary" title="Instructions" @onclick="@(e => ShowInstructionsModal())">
                <span class="oi oi-document" aria-hidden="true"></span> Documentation
            </button>
        </div>
        <div style="clear:both;"></div>
        <div class="mb-3">This page displays a log of generated resouce type names.</div>

        @if (!dataLoaded)
        {
            <div class="spinner-border blue" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <div class="mb-3">
                @if (lstNameRequests.Count > 0)
                {
                    <div class="mb-3">
                        <button class="btn btn-primary" title="Export Generated Names Log" @onclick="@(e => OnExportLogClick())">
                            Export Generated Names Log
                        </button>
                        @if (admin)
                        {
                            if (duplicatenamesallowed)
                            {
                                <button class="btn btn-danger" style="margin-left:5px;" title="Purge Generated Names Log" @onclick="@(e => OnPurgeLogClick())">
                                    Purge Generated Names Log
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger" style="margin-left:5px;" title="Purge Generated Names Log" disabled>
                                    Purge Generated Names Log
                                </button>
                                <div class="mt-3">
                                    <div class="alert alert-warning">
                                    <strong>NOTE</strong>:
                                    Duplicate names are not currently allowed in the site settings. Purging of the log is restricted.
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div class="card mb-3">
                        <div class="card-header bg-default text-black">
                            <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#filter" role="button" aria-expanded="false" aria-controls="filter">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Filter Data
                            </a>
                        </div>
                        <div class="collapse show card card-body @theme.ThemeStyle" id="filter">
                            <div class="form-group row mb-3">
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="startdate" @bind:event="oninput" />
                                </div>
                                <div style="width:auto;padding-top:7px;">
                                    to
                                </div>
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="enddate" @bind:event="oninput" />
                                </div>
                            </div>
                            <div class="form-group row mb-3">
                                <div class="input-group flex-nowrap">
                                    <div class="input-group flex-nowrap">
                                        <span class="input-group-text" id="addon-wrapping">
                                            <span class="oi oi-magnifying-glass" id="addon-wrapping"></span>
                                        </span>
                                        <input class="form-control" type="search" placeholder="Filter by Generated Name, Resource Type, Components"
                                       @bind="filterData"
                                       @bind:event="oninput">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div>
                                    <button class="btn btn-success" title="Reset" @onclick="@(e => OnResetClick())">
                                        Reset
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table @theme.ThemeStyle">
                            <thead>
                                <tr>
                                    @if ((admin) && (duplicatenamesallowed))
                                    {
                                        <th scope="col"></th>
                                    }
                                    <th scope="col">Created On</th>
                                    <th scope="col">Generated Name</th>
                                    <th scope="col">Resource Type</th>
                                    <th scope="col">Components</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (GeneratedName name in lstNameRequests)
                                {
                                    if (!IsVisible(name))
                                        continue;
                                    <tr>
                                        @if ((admin) && (duplicatenamesallowed))
                                        {
                                            <td class="align-top">
                                                <button type="button" class="btn btn-danger" @onclick="@(e => DeleteGeneratedName(name.Id))" title="Delete">
                                                    <span class="oi oi-x" aria-hidden="true"></span>
                                                </button>
                                            </td>
                                        }
                                        <td class="align-top">
                                            @name.CreatedOn.ToString()
                                        </td>
                                        <td class="align-top">
                                            @name.ResourceName
                                        </td>
                                        <td class="align-top">
                                            @if (name.ResourceTypeName != null)
                                            {
                                                @name.ResourceTypeName
                                            }
                                        </td>
                                        <td class="align-top">
                                            @foreach (string[] component in name.Components.ToList<string[]>())
                                            {
                                                <div style="line-break:anywhere;">
                                                    @component[0] : @component[1]
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p style="font-style:italic">
                        There are no log items to display.
                    </p>
                }
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    protected ThemeInfo? theme { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private bool admin;
    private bool dataLoaded = false;
    private bool duplicatenamesallowed = false;
    List<GeneratedName> lstNameRequests = new();
    public string filterData { get; set; }
    public DateTime startdate { get; set; } = DateTime.Today.AddDays(-30);
    public DateTime enddate { get; set; } = DateTime.Today;
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await session.GetAsync<bool>("admin");
            admin = (bool)result.Value;
            LoadData();
            duplicatenamesallowed = Convert.ToBoolean(ConfigurationHelper.GetAppSetting("DuplicateNamesAllowed"));
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        ServiceResponse serviceResponse = new();
        serviceResponse = await GeneratedNamesService.GetItems();
        lstNameRequests = (List<GeneratedName>)serviceResponse.ResponseObject;
        dataLoaded = true;
        StateHasChanged();
    }


    private async Task OnInstructionsClick()
    {
        NavigationManager.NavigateTo("/instructions");
    }


    public void Dispose()
    {
        StateHasChanged();
    }

    private async Task DeleteGeneratedName(long id)
    {
        ServiceResponse serviceResponse = new();
        ResponseMessage message = new();
        bool confirm = false;
        confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirm)
        {
            serviceResponse = await GeneratedNamesService.GetItem(Convert.ToInt32(id));
            if (serviceResponse.Success)
            {
                GeneratedName generatedname = (GeneratedName)serviceResponse.ResponseObject;
                serviceResponse = await GeneratedNamesService.DeleteItem(Convert.ToInt32(generatedname.Id));
                if (serviceResponse.Success)
                {
                    message.Type = MessageTypesEnum.SUCCESS;
                    message.Message = "Generated name deleted!";
                    toastService.ShowSuccess(message.Message);
                    AdminLogService.PostItem(new AdminLogMessage() { Title = "INFORMATION", Message = "Generated Name (" + generatedname.ResourceName + ") deleted." });
                    CacheHelper.InvalidateCacheObject("GeneratedName");
                    LoadData();
                    state.SetNavReload(true);
                }
                else
                {
                    message.Type = MessageTypesEnum.ERROR;
                    message.Message = "Generated name deletion failed!";
                    message.MessageDetails = serviceResponse.ResponseMessage;
                    toastService.ShowError(message.Message);
                }
            }
            else
            {
                message.Type = MessageTypesEnum.ERROR;
                message.Message = "Generated name deletion failed!";
                message.MessageDetails = serviceResponse.ResponseMessage;
                toastService.ShowError(message.Message);
            }

        }
    }

    private async Task OnPurgeLogClick()
    {
        ServiceResponse serviceResponse = new();

        bool confirm = false;
        confirm = await JsRuntime.InvokeAsync<bool>("confirm", "This will purge the Generated Names log. Are you sure?");
        if (confirm)
        {
            await LogHelper.PurgeGeneratedNames();
            toastService.ShowSuccess("Generated Log purged!");
            AdminLogService.PostItem(new AdminLogMessage() { Title = "INFORMATION", Message = "Generated Names log purged." });
            await LoadData();
            StateHasChanged();
        }
    }

    private async Task OnExportLogClick()
    {
        await JsRuntime.InvokeVoidAsync("htmlToCSV", "generatednameslog.csv");
    }

    public bool IsVisible(GeneratedName name)
    {
        bool visible = true;
        if (startdate != null)
        {
            if (name.CreatedOn < startdate)
                visible = false;
        }

        if (enddate != null)
        {
            if (name.CreatedOn > (enddate + new TimeSpan(23, 59, 59)))
                visible = false;
        }

        if (!string.IsNullOrEmpty(filterData))
        {
            if ((!name.ResourceName.ToLower().Contains(filterData)) && (!name.ResourceTypeName.ToLower().Contains(filterData)) && (!string.Join(",", name.Components).ToLower().Contains(filterData)))
                visible = false;
        }
        return visible;
    }

    private async Task OnResetClick()
    {
        startdate = DateTime.Today.AddDays(-30);
        enddate = DateTime.Today;
        filterData = "";
    }

    private async void ShowInstructionsModal()
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(InformationModal.message), null);
            parameters.Add(nameof(InformationModal.title), "Generated Names Log");
            parameters.Add(nameof(InformationModal.headerstyle), "bg-navcolor");
            parameters.Add(nameof(InformationModal.component), "generatednamesloginstructions");
            parameters.Add(nameof(InformationModal.admin), admin);

            parameters.Add("theme", theme);

            var options = new ModalOptions()
                {
                    HideCloseButton = true,
                    UseCustomLayout = true
                };

            var modal = Modal.Show<InformationModal>("Instructions", parameters, options);
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
        }
    }
}
