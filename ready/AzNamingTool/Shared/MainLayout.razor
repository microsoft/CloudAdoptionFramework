@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@inherits LayoutComponentBase
@implements IDisposable
@inject StateContainer state
@inject IToastService toastService
@inject IJSRuntime JsRuntime
@inject ILogger<MainLayout> Logger
@inject NavigationManager NavigationManager
@using AzureNamingTool.Services;
@using Blazored.Toast.Configuration
@inject ProtectedLocalStorage storage
@inject ProtectedSessionStorage session

<PageTitle>Azure Naming Tool</PageTitle>
<BlazoredToasts Position="ToastPosition.BottomRight" ShowProgressBar="true" />
<div class="page @theme.ThemeStyle">
    <div class="sidebar">
        <NavMenu PageType="@PageType" />
    </div>

    <main>
        <div class="top-row px-4 auth @theme.ThemeStyle">
            @if ((admin) && (!String.IsNullOrEmpty(feedbackurl)))
            {
                <div class="text-left w-100">
                <button type="button" class="btn btn-success" @onclick="@(e => ShowFeedback())" title="Want to give feedback?">Want to give feedback?</button>
                </div>
            }
            @if ((admin) && (bool.Parse(ConfigurationHelper.GetAppSetting("DevMode"))))
            {
                <div class="warning-message">DEV MODE Enabled! This can cause unexpected behavior! Use at your own risk!</div>
            }
            @if (admin)
            {
                <button type="button" class="btn btn-danger" @onclick="@(e => Logout())" title="Logout" data-toggle="collapse" href="#admin">Logout</button>
            }
            <div class=" px-3">
                <label class="switch" title="App Theme">
                    <input type="checkbox" checked="@isdarktheme" @oninput="ThemeChanged">
                    <span class="slider round"></span>
                </label>
            </div>
        </div>

        <article class="content px-4">
            <CascadingValue Value=@theme>
                @Body
            </CascadingValue>
        </article>
    </main>
</div>

<button onclick="topFunction()" id="btnScrollToTop" class="btn btn-success btn-sm" title="Go to top"><span class="oi oi-arrow-circle-top" style="vertical-align:text-top;"></span> Top</button>
@if (PasswordModalOpen)
{
    <PasswordModal OnClose="@OnPasswordModalClose">
    </PasswordModal>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private ThemeInfo theme = new() { ThemeName = "Light", ThemeStyle = "bg-default text-black" };
    private bool isdarktheme = false;
    private bool admin;
    private string feedbackurl = String.Empty;

    public bool PasswordModalOpen { get; set; }
    public Type PageType { get; set; }

    protected override void OnParametersSet()
    {
        PageType = (this.Body.Target as RouteView)?.RouteData.PageType;
    }

    private string? message;

    protected override async void OnInitialized()
    {
        ConfigurationHelper.VerifyConfiguration();
        ConfigurationHelper.VerifySecurity(state);

        // Check that the admin password is set
        if (!state.Password)
        {
            OpenPasswordModal();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var adminresult = await session.GetAsync<bool>("admin");
        admin = (bool)adminresult.Value;
        if (firstRender)
        {
            try
            {
                var themeresult = await storage.GetAsync<string>("apptheme");
                theme.ThemeStyle = themeresult.Success ? themeresult.Value : "bg-default text-black";
            }
            catch
            {
                theme.ThemeStyle = "bg-default text-black";
            }
            if (theme.ThemeStyle == "bg-default text-black")
            {
                theme.ThemeName = "Light";
                isdarktheme = false;
            }
            else
            {
                theme.ThemeName = "Dark";
                isdarktheme = true;
            }
            state.AppTheme = theme.ThemeStyle;

            // Check if Feedback is enabled
            if (admin)
            {
                feedbackurl = await ConfigurationHelper.GetProgramSetting("FeedbackURL");
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    private void OpenPasswordModal()
    {
        PasswordModalOpen = true;
        StateHasChanged();
    }

    private async Task OnPasswordModalClose(bool accepted)
    {
        PasswordModalOpen = false;
    }

    private async void MagicReset()
    {
        bool confrimAPIKeyGenerate = await JsRuntime.InvokeAsync<bool>("confirm", "This will reset the site settings. Are you sure?");
        if (confrimAPIKeyGenerate)
        {

            var config = ConfigurationHelper.GetConfigurationData();
            config.SALTKey = "";
            config.AdminPassword = "";
            config.APIKey = "";

            ConfigurationHelper.UpdateSettings(config);
            ConfigurationHelper.ResetState(state);
            ConfigurationHelper.VerifySecurity(state);

            toastService.ShowSuccess("The site has been reset.");

            OpenPasswordModal();
        }
    }

    private async void ThemeChanged(ChangeEventArgs e)
    {
        isdarktheme = (bool)e.Value;
        if (!isdarktheme)
        {
            theme.ThemeName = "Dark";
            theme.ThemeStyle = "bg-default text-black";
        }
        else
        {
            theme.ThemeName = "Light";
            theme.ThemeStyle = "bg-dark text-white";
        }
        await storage.SetAsync("apptheme", theme.ThemeStyle);
        state.AppTheme = theme.ThemeStyle;
    }

    private async void Logout()
    {
        admin = false;
        state.SetAdmin(false);
        await session.SetAsync("admin", false);
        ResponseMessage message = new();
        message.Type = MessageTypesEnum.INFORMATION;
        message.Header = "INFORMATION";
        message.Message = "Admin logged out.";
        toastService.ShowInfo(message.Message);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
        StateHasChanged();
    }

    private async void ShowFeedback()
    {
        await JsRuntime.InvokeVoidAsync("open", feedbackurl, "_blank");
    }
}